<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Three.js]]></title>
  <link href="http://learningthreejs.com/atom.xml" rel="self"/>
  <link href="http://learningthreejs.com/"/>
  <updated>2013-04-22T15:16:18+02:00</updated>
  <id>http://learningthreejs.com/</id>
  <author>
    <name><![CDATA[Jerome Etienne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debugging With Chrome's Canvas Inspection]]></title>
    <link href="http://learningthreejs.com/blog/2013/04/05/debugging-with-chromes-canvas-inspection/"/>
    <updated>2013-04-05T09:15:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2013/04/05/debugging-with-chromes-canvas-inspection</id>
    <content type="html"><![CDATA[<p>This post will present to you how to debug your webgl with  chrome&#8217;s canvas inspection.
This is an experimental feature available in chrome devtools.
It gives you all the WebGL calls which are done in your webgl scene.
So it helps if you actually know some raw WebGL :)
In anycase you can see it being replayed call by calls, which is uber cool.</p>

<center>
  <iframe width="425" height="349" src="http://www.youtube.com/embed/837O1YloCRc" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<h2>Let&#8217;s get started</h2>

<p>As it is an experimental feature, you first need to enable it.
First let&#8217;s enable devtool experiment: enter &#8220;chrome://flags&#8221; url
in your chrome location bar. There you enable &#8220;Enable Developer Tools experiments&#8221;
and relaunch chrome.</p>

<p><img src="http://learningthreejs.com/data/2013-04-05-debugging-with-chromes-canvas-inspection/screenshots/devtools-enable-experiments.png"></p>

<p><img class="right" src="http://learningthreejs.com/data/2013-04-05-debugging-with-chromes-canvas-inspection/screenshots/devtools-settings-gear.png" width="160" height="120"></p>

<p>Now that you got the Developer Tools Experiments enabled, let&#8217;s enable
&#8216;Canvas Inpection&#8217; in particular. Click on the little gear on bottom right
of devtools. The one you can see on the right.</p>

<p><img src="http://learningthreejs.com/data/2013-04-05-debugging-with-chromes-canvas-inspection/screenshots/devtools-settings-panel.png"></p>

<p>It will open the settings panel you see above.
Now, select experiment from the left menu, enable &#8216;Canvas Inpection&#8217; and you are done.
Rather clumsy but this is an experiment after all :)</p>

<h2>How to use it</h2>

<p>Now that it is enabled, let&#8217;s see how to use it.
First let&#8217;s go on the &#8220;profile&#8221; tab of devtools. We can see &#8220;Capture Canvas Frame&#8221;, this is the one we gonna use.</p>

<p><img src="http://learningthreejs.com/data/2013-04-05-debugging-with-chromes-canvas-inspection/screenshots/devtools-capture-canvas-frame.png"></p>

<p>Let&#8217;s enable it and load a page with WebGL.
As an example, i will use <a href="http://mmo3d.jit.su/montains">mmo3d</a>. It is a multiplayer game
in webgl. It is very hackable so other people can easily do their own world. Let&#8217;s talk about
that later. For now, lets click &#8216;start&#8217; and capture a frame :)</p>

<h2>Captured frames</h2>

<p>After that you should obtain the following. You got the actual game on the left.
and you recognise developer tools on the right.</p>

<p><img src="http://learningthreejs.com/data/2013-04-05-debugging-with-chromes-canvas-inspection/screenshots/devtools-capture-example-resized.png"></p>

<p>For every frame you capture, you will get a trace log of each webgl call which has been done during this frame.
Above there is a replay window where you can actually see the scene as it is drawn step by step.
Thus you can check the order of your calls. It can be usefull when you debug transparency for example.
Watch for the draw calls, they got huge overhead and should be limited if possible.</p>

<h2>Conclusion</h2>

<p>As it is pure webgl, and not at three.js level, it helps if you know raw WebGL. For that, i suggest
you to read a book on the subject. Personnaly i
like
<a href="http://www.amazon.com/WebGL-Beginners-Guide-Diego-Cantor/dp/184969172X">&#8220;WebGL Beginner&#8217;s Guide&#8221;</a>
by
<a href="http://blog.tojicode.com/">Brandon Jones</a>.
WebGL may be complex at times, and having cool debug tools help being more efficient.
You can see the excelent paul irish doing a
<a href="http://www.youtube.com/watch?v=FY5iiuQRyEE&amp;feature=youtu.be&amp;t=8m23s">presentation</a>
what you can do with canvas inspector.</p>

<p>That&#8217;s all folks. Have Fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Your Game Faster with AppCache]]></title>
    <link href="http://learningthreejs.com/blog/2013/03/22/load-your-game-faster-with-appcache/"/>
    <updated>2013-03-22T05:31:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2013/03/22/load-your-game-faster-with-appcache</id>
    <content type="html"><![CDATA[<p>This post is about loading your game faster.
Appcache may be great help on this.
In this post, i will use a little game of mine called
<a href="http://jeromeetienne.github.com/demo.poollabyrinth/">&#8216;Marble Labyrinth&#8217;</a>
as an example to show how i got from 2.4mbyte to 0byte of download in 5min of work.
Appcache provides faster access to your users, and less bandwidth cost to you. A well used time :)</p>

<center>
  <iframe width="425" height="349" src="http://www.youtube.com/embed/FY4UQpu1ijM" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<h3>What Is Appcache</h3>

<p>This is a way to cache the files more efficiently and with support for offline.
Other already explained it better that i could.
<a href="http://www.html5rocks.com/en/tutorials/appcache/beginner/">&#8220;A Beginner&#8217;s Guide to Using the Application Cache&#8221;</a>
by
<a href="https://twitter.com/ebidel">Eric Bidelman</a>
on
<a href="http://www.html5rocks.com/">html5rocks</a> is a very nice intro.
This site got plenty of data about <a href="http://www.html5rocks.com/en/features/offline">offline support</a>.
Here is a <a href="http://appcachefacts.info/">appcache factsheet</a>
and the <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/offline.html#appcache">specification</a>.</p>

<h3>In The Rought</h3>

<p>How to generate an appcache file without hassle ?
Something which support dynamic stuff like xhr ? It is surprisingly easy.</p>

<ul>
<li><em>Step 1:</em> Do &#8216;Copy ALL as HAR&#8217; in chrome devtools network</li>
<li><em>Step 2:</em> in js console, do &#8216;var har = &#8217; and there you paste it</li>
<li><em>Step 3:</em> generate teh appcache file with the following javascript</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>console.log('CACHE MANIFEST\n\nCACHE:');
</span><span class='line'>har.log.entries.forEach(function(entry){ console.log(entry.request.url) });
</span><span class='line'>console.log('\nNETWORK:\n*');</span></code></pre></td></tr></table></div></figure>


<p>Simple no ? Well unfortunatly even a basic har file is large.
The one for
<a href="http://jeromeetienne.github.com/demo.poollabyrinth/">&#8216;Marble Labyrinth&#8217;</a>
is more than 7000 lines long. So i wrote a little tool to ease up the process
on large project.</p>

<h3>Let&#8217;s Get Started</h3>

<p>First, we install a little utility which gonna generate the appcache for us.
It is called <em>har2appcache</em>.
It is available on a
<a href="https://github.com/jeromeetienne/har2appcache">github repository</a> as usual.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo npm install -g har2appcache
</span></code></pre></td></tr></table></div></figure>


<p>This one got the advantage to use the info from the HAR file.
So you will get all the dynamic request too. All the models that
you load with <code>THREE.OBJMTLLoader</code> or your textures
with <code>THREE.ImageUtils.loadTexture</code> are all loaded dynamically
without insertion in the DOM.</p>

<p>btw HAR stands for &#8216;HTTP Archive&#8217;.
You can read <a href="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/HAR/Overview.html">HTTP Archive specification</a>
if you are so inclined.
To get this HAR file, we will use Chrome.</p>

<h3>Let&#8217;s Play With Chrome Devtools</h3>

<p><img class="right" src="http://learningthreejs.com/data/2013-03-22-load-your-game-faster-with-appcache/devtool-network-small.png"></p>

<p>So first, you open chrome devtool, go in the network tab and reload your game.
You press right button of your mouse and you should see &#8216;Copy ALL as HAR&#8217;
in the popup menu.
Then you take your <a href="http://www.sublimetext.com/2">favorite editor</a>,
create a file named <code>sample.har</code>
and paste the HAR you just copied.
This is a rather large JSON structure.</p>

<h3>Let&#8217;s Generate This File</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>har2appcache sample.har &gt; manifest.appcache
</span></code></pre></td></tr></table></div></figure>


<p>There you got your appcache file, rather easy no ?
You may need to edit it a bit to fit your needs,
e.g. to remove the url of dynamic content.
Now you just need to change the html tag of your page
and you are <strong>DONE!</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;html</span> <span class="na">manifest=</span><span class="s">&#39;manifest.appcache&#39;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Smooth Workflow</h3>

<p>Appcache is so efficient to cache that it may become hard to disable it :)
When the page load, the browser will check if <code>manifest.appcache</code> has changed.
If there is no update, it won&#8217;t reload what has been cached, not even the original HTML page.
It may be bothering while your develop.
Personnaly, i rename the file during developement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mv manifest.appcache manifest.appcache.dev
</span></code></pre></td></tr></table></div></figure>


<p>and comment the attribute in the html.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- &lt;html manifest=&#39;manifest.appcache&#39;&gt; --&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It does the job smoothly.</p>

<h3>Conclusion</h3>

<p>With this technic, you gain a lot of time to download.
So your user got faster access and you get less bandwidth cost.
A nice win-win situation! All that in 5min top. It definitly worth it.</p>

<p>That&#8217;s all for today, have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Move a Cube With Your Head or Head-Tracking with WebGL]]></title>
    <link href="http://learningthreejs.com/blog/2013/03/12/move-a-cube-with-your-head/"/>
    <updated>2013-03-12T13:28:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2013/03/12/move-a-cube-with-your-head</id>
    <content type="html"><![CDATA[<p>This post is about head tracking and how to use it in 3D.
It is surprisingly easy to do with the suitable libraries.
We will experiment with
<a href="https://github.com/auduno/headtrackr">headtrackr.js</a> and
<a href="http://github.com/mrdoob/three.js/">three.js</a>.
<a href="https://github.com/auduno/headtrackr">headtrackr.js</a>
is a nice library from
<a href="https://github.com/auduno">auduno</a> to do head tracking in the browser.
You will learn how to do head tracking in webgl in only 20lines of javascript.
I love the web and how easy it is :)</p>

<h2>tl;dr; links</h2>

<ul>
<li>For a simple example. see the <a href="http://jeromeetienne.github.com/tquery/plugins/headtrackr/examples/index.html">&#8220;move a cube with your head&#8221;</a> demo</li>
<li>To mess with the code now without any installation, see this <a href="http://jsfiddle.net/jetienne/tSQQ8/">jsfiddle example</a></li>
<li>for an attempt to make 3d more immersive by using head tracking, see this <a href="http://jeromeetienne.github.com/tquery/plugins/headtrackr/examples/demo.html">demo</a></li>
</ul>


<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/gnVfqfjXxmM" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<h2>WebRTC is great!</h2>

<p>WebRTC starts to get traction. I love that! We have seen
<a href="http://www.webrtc.org/">WebRTC</a>
and
<a href="http://dev.w3.org/2011/webrtc/editor/getusermedia.html">getUserMedia</a>
several times in the past: in
<a href="http://learningthreejs.com/blog/2012/05/15/punch-a-doom-character-in-augmented-reality/">&#8220;Punch a Doom Character in Augmented Reality&#8221;</a>
post, in
<a href="http://learningthreejs.com/blog/2012/02/07/live-video-in-webgl/">&#8220;Fun With Live Video in WebGL&#8221;</a>
post and
<a href="http://learningthreejs.com/blog/2012/05/02/augmented-reality-3d-pong/">&#8220;Augmented Reality 3D Pong&#8221;</a>
post.
It is
<a href="http://www.webrtc.org/blog/seeyouontheweb">already in chrome stable</a>
, and will be in firefox
<a href="https://hacks.mozilla.org/2012/11/progress-update-on-webrtc-for-firefox-on-desktop/">real soon</a>.
They already
<a href="https://hacks.mozilla.org/2013/02/hello-chrome-its-firefox-calling/">talk to each other</a>.
Here we don&#8217;t need the network part of webrtc.
We only need get the webcam video, so
<a href="http://dev.w3.org/2011/webrtc/editor/getusermedia.html">getUserMedia</a>
is enougth. It is in
<a href="http://www.opera.com/browser/">opera 12</a>
too as you can read
<a href="http://dev.opera.com/articles/view/head-tracking-with-webrtc/">here</a>.</p>

<p><a href="https://github.com/auduno">auduno</a> is part of
<a href="http://opera.com">Opera</a> team.
He wrote it as a demo for
<a href="http://www.opera.com/browser/">opera 12</a>
release  which contained
<a href="http://dev.w3.org/2011/webrtc/editor/getusermedia.html">getUserMedia</a>.
For more info on the library, <a href="https://github.com/auduno">auduno</a>
blogged
about internals of
<a href="https://github.com/auduno/headtrackr">his library</a>. You can find details in his
<a href="http://auduno.tumblr.com/post/25125149521/head-tracking-with-webrtc">blog post</a>.
Additionnal info are available in the
<a href="http://auduno.github.com/headtrackr/documentation/reference.html">reference documentation</a>.
Some examples are already in three.js, like
<a href="http://auduno.github.com/headtrackr/examples/targets.html">targets</a>
or
<a href="http://www.shinydemos.com/facekat/">facekat</a>.</p>

<h2>Demo Time !!</h2>

<p><img class="left" src="http://learningthreejs.com/data/2012-12-07-playing-with-headtrackr-dot-js/screenshots/screenshot-box3d-small.png">
As usual we did a plugin for
<a href="http://jeromeetienne.github.com/tquery">tQuery API</a>
to make it easy to use in our environement.
One can find 2 examples for it:
A <a href="http://jeromeetienne.github.com/tquery/plugins/headtrackr/examples/index.html">educational example</a>
where your heads controls a box in 3d.
For best result, <em>make sure your face is well and evenly lighted</em></p>

<p><img class="right" src="http://learningthreejs.com/data/2012-12-07-playing-with-headtrackr-dot-js/screenshots/screenshot-demo-small.png">
Another <a href="http://jeromeetienne.github.com/tquery/plugins/headtrackr/examples/demo.html">demo</a>
where the camera follows your head.
The whole scene moves as you move your head, providing quite an immersive experience.
You can play with it <a href="http://jsfiddle.net/jetienne/tSQQ8/">thru jsfiddle</a> too.</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/jetienne/tSQQ8/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h2>Let&#8217;s Get Started</h2>

<p>Ok now lets see how to use this library with
<a href="http://jeromeetienne.github.com/tquery">tQuery API</a>.
First, we include the <code>tquery.headtrackr</code> files in your code.
tQuery plugins supports
<a href="http://requirejs.com">require.js</a>.
It makes dependancies much easier to handle. <code>tquery.headtrackr</code> is no exception, so to include it you can do</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">require</span><span class="p">([</span><span class="s1">&#39;tquery.headtrackr&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">// Your code ...   </span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or if you use the good old <code>&lt;script&gt;</code>, do something like that
to include
<a href="https://github.com/auduno/headtrackr">headtrackr.js</a> itself, the library which handle the head tracking. Then you just include the plugin itself, and you are done.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;headtrackr.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;tquery.headtrackr.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Start Tracking Heads</h3>

<p>First, you instanciate the object with this simple line.
You can pass various options to <code>.createHeadtrackr(opts)</code>.
Here, <code>opts</code> is an
<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object">Object</a>
with those properties</p>

<ul>
<li><strong>opts.width :</strong> width of the image containing the face. default to 320px</li>
<li><strong>opts.height :</strong> height of the image containing the face. default to 240px</li>
<li><strong>opts.headtrackrOpts :</strong> options passed directly to headtrackr.js. default to <code>{}</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">headTracker</span>    <span class="o">=</span> <span class="nx">tQuery</span><span class="p">.</span><span class="nx">createHeadtrackr</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Default are reasonable, so chances are you dont need to specify anything. To start tracking the head on the webcam, just do the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">headTracker</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is possible to stop it with <code>.stop()</code> or to reset it via <code>.reset()</code>.</p>

<h3>Debug View is Cool For User Feedback</h3>

<p><img class="right" src="http://learningthreejs.com/data/2012-12-07-playing-with-headtrackr-dot-js/screenshots/screenshot-debugview-small.png">
If you wish enable the debugView, aka the little visualisation the headtracker result.
It gives feedback to the user on what is happening.
Thus the user can move his head accordingly or to change lighting of the room.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">headTracker</span><span class="p">.</span><span class="nx">debugView</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Face Position Notified thru Events</h3>

<p>When a face is found, events are dispatched to notify the detected positions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">headTracker</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;found&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// Your code ...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>event</code> contains normalized coordinates of the detected face.
They use the same axis as WebGL.
If the head is on the center, <code>event.x</code> and <code>event.y</code> will be 0.
And if the head is vertical, <code>event.angle</code> is 0. More precisely</p>

<ul>
<li><code>.x</code> and <code>.y</code> : It is the center position. it varies from [-1,+1], from left to right
and bottom to top.</li>
<li><code>.width</code> and <code>.height</code>: the width and height :) If it is half of whole image, it is equal to 1.</li>
<li><code>.angle</code>: the Z rotation of the detected head. It is in radian as usual.</li>
<li><code>.headtrackrEvent</code>: the original facetrackingEvent event from
<a href="https://github.com/auduno/headtrackr">headtrackr.js</a>
(see
<a href="http://auduno.github.com/headtrackr/documentation/reference.html">reference</a>
)</li>
</ul>


<h2>Head tracking&#8230; Kesaco ?</h2>

<p>Head tracking is a <a href="http://example.com">well known concept</a>. One can find
<a href="http://www.youtube.com/watch?v=bBQQEcfkHoE">head tracking on ipad</a>.
One can find <a href="http://www.youtube.com/watch?v=Jd3-eiid-Uw">head tracking on wii</a>.
They got impressive result using the informations from the <a href="http://en.wikipedia.org/wiki/Wii_Remote">wiimote</a> or even the <a href="http://example.com">device orientation</a>.
With the <a href="http://en.wikipedia.org/wiki/Kinect">kinect</a>, they even
track the <a href="http://example.com">features</a> of the face itself (e.g. mouth, noze, eyes etc&#8230;)</p>

<p>In our case, we use the image from the webcam.
Unfortunatly face localisation from an image isn&#8217;t exactly 100% accurate to say the least :)
See <a href="http://auduno.github.com/headtrackr/examples/targets.html">here</a>,
this is the same demo as the
<a href="http://www.youtube.com/watch?v=Jd3-eiid-Uw">wii one</a>
or the
<a href="http://www.youtube.com/watch?v=bBQQEcfkHoE">ipad one</a>.
Yet the result isn&#8217;t as convincing.
With <a href="https://github.com/auduno/headtrackr">headtrackr.js</a> and
<a href="http://webrtc.org">webrtc</a>
, we use only the webcam in a uncontrolled environement.
So the accuracy is in consequences.</p>

<p>You can improve efficiency by following a few simples advices:
Avoid hats or a too crazy haircut. Being bold with a beard doesn&#8217;t help :)
Make sure your face is well and evenly lighted and you should be fine.</p>

<h2>Conclusion</h2>

<p>In this post, we have seen it is now possible to do head tracking in a web browser !!
Impressive if you ask me!
Even better, it is easy if you use suitable libraries. Coupled with
<a href="http://github.com/mrdoob/three.js/">three.js</a>
and
<a href="http://jeromeetienne.github.com/tquery">tQuery API</a>,
it is possible provide new immersive experience in
<a href="http://jsfiddle.net/jetienne/tSQQ8/">20lines of javascript</a>.
Im so excited.
This kind of things was academic research 5 years ago, and now everybody can easily use it.
We will likely do more with
<a href="https://github.com/auduno/headtrackr">headtrackr.js</a>.
This is a very nice library with lots of possibilities.
For example, one can use it the head as a game controller, or in a artistic exposition. Stay tuned!</p>

<p>That&#8217;s all folks, have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minecraft Character in WebGL]]></title>
    <link href="http://learningthreejs.com/blog/2012/07/05/minecraft-character-in-webgl/"/>
    <updated>2012-07-05T10:22:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2012/07/05/minecraft-character-in-webgl</id>
    <content type="html"><![CDATA[<p>This post is about Minecraft Character.
We will play with the minecraft character, learn how to do your own and make it move.
I recently saw this excelent <a href="http://djazz.mine.nu/lab/minecraft_items/">minecraft items demo</a>
by <a href="https://twitter.com/#!/daniel_hede">@daniel_hede</a>. It triggered a switch in my head :)
I felt in love with minecraft style of 3d.
It makes modeling so simple.
You don&#8217;t need to learn how to use 3d modeling software like
<a href="http://www.blender.org/">blender</a>,
<a href="http://usa.autodesk.com/maya/">maya</a> and such.
It is easy to create new model based on this style.</p>

<p>Try the <a href="http://learningthreejs.com/data/2012-07-05-minecraft-character-in-webgl/">minecraft plugin demo</a>. This is the
one we gonna build. I used <a href="https://twitter.com/#!/daniel_hede">@daniel_hede</a>&#8217;s code
and did many plugins to make it all simple and fun :)
In this demo, i introduce
<a href="https://github.com/mrdoob/three.js/tree/master/examples/js/postprocessing">three.js post processing</a>
for the first time.
This is the
<a href="http://en.wikipedia.org/wiki/Vignetting">Vignetting</a>
and
<a href="http://en.wikipedia.org/wiki/Sepia_(color)">sepia color</a>
that you see.
Additionnaly, you can easily change the skins with the UI within the demo.
Now let&#8217;s get started!</p>

<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/eg0qshn4VC0" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<h2>Let&#8217;s start coding</h2>

<p>We start to create our world as usual. This initialize the renderer, the camera,
its controls and a rendering loop.
We setup the
<a href="http://learningthreejs.com/blog/2012/01/19/boilerplate-builder-for-three-js/">boilerplate for three.js</a>
and add a page title with some info on our little 3D demo.
We just put the camera a little closer to scene center. Thus the character
will be bigger on screen. We just can&#8217;t get enougth of it, can we ;)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var world    = tQuery.createWorld().boilerplate().pageTitle('#info').start();
</span><span class='line'>world.tCamera().position.z    = 1.8;</span></code></pre></td></tr></table></div></figure>


<p>Now we add a bit of post processing. It is the first time
we talk about this, so let&#8217;s details it a bit.
What is post processing (in a 3d context) ?
Post processing is performed after rendering the 3D, hence the name.
It applies on the screen as a whole. So the effects are in 2D.
What&#8217;s it not ?
It isn&#8217;t for 3d effect on specific objects in your world.</p>

<p> <code>tquery.effectcomposer.js</code> plugin provides a simple api to add
postprocessing to our world. It is a chained API on top of
<a href="https://github.com/mrdoob/three.js/tree/master/examples/js/postprocessing">three.js effect composer</a>.
In our case, we first apply <code>.sepia()</code> to change the colors toward
<a href="http://en.wikipedia.org/wiki/Sepia_(color)">sepia color</a>.
Then we apply <code>.vignette()</code> for
<a href="http://en.wikipedia.org/wiki/Vignetting">Vignetting</a>
and mark the effects list
as finished.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.addEffectComposer().sepia().vignette().finish();</span></code></pre></td></tr></table></div></figure>


<p>Not too hard hey ;)</p>

<h2>Hello Steve!</h2>

<p>Now that we go a world. We will create a minecraft character.
In fact, minecraft main character is called <a href="http://www.minecraftwiki.net/wiki/The_Player">&#8216;steve&#8217;</a>.
 <code>tQuery.MinecraftChar</code> is the main class. It will create
a character model and expose all its limbs too e.g right legs or right arms.
More on that later.
As you can see, we specify <code>skinUrl</code> parameter. It should point to the
image of the skin texture. You can change it anytime with <code>character.loadSkin(skinUrl)</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var character    = new tQuery.MinecraftChar({
</span><span class='line'>  skinUrl : 'images/3djesus.png'
</span><span class='line'>}); </span></code></pre></td></tr></table></div></figure>


<p>Now that we got our character setup, we just need to include it in our 3D world.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>character.model.addTo(world);</span></code></pre></td></tr></table></div></figure>


<h2>Make this model move</h2>

<p>So we talked about exposed limbs&#8230; kinda gross, almost disturbing :)
In fact it just means each part of our model is exposed for you to
play with. It has the head, legs right and left, and the same for the arms.
It is all in <code>character.parts</code>.</p>

<p>So the first step is to hook a function in the world rendering loop.
two parameters are passed <code>delta</code> and <code>now</code>. <code>delta</code> is the number
of seconds since the last iteration of the rendering loop. <code>now</code> is the absolute
time in seconds.
We use those values to tune the animation. Thus it will be animated at the same
speed no matter the <a href="http://en.wikipedia.org/wiki/Frame_rate">fps</a> rate of your computer.
Here is simple animation of the head. So we hook the function and change
the <code>headGroup</code> rotation to fit our taste.
We will make it do an
<a href="http://en.wikipedia.org/wiki/8_(number)">eight</a>
or
<a href="http://en.wikipedia.org/wiki/Infinity#Infinity_symbol">infinite synbol</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.loop().hook(function(delta, now){
</span><span class='line'>  character.parts.headGroup.rotation.x    = Math.sin(now*1.5)/3;
</span><span class='line'>  character.parts.headGroup.rotation.y    = Math.sin(now)/3;
</span><span class='line'>}); </span></code></pre></td></tr></table></div></figure>


<p>This is nice but the body would appear rather static if we move only the head.
Let&#8217;s make see how to make it walk.
When people walks or run, they swing theirs arm and legs.
So we need to change the rotation X of each of those limbs. First we get
an angle relative to current time. It will determine the position of the arms/legs.
The amplitude of the move has been tuned to <code>1.4</code>, play with it and find the
value you like. Then you move the legs and arms by setting the rotation.
Just take care of balancing legs and arms thus his can keep his balance :)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.loop().hook(function(delta, now){
</span><span class='line'>  var angle   = 1/2 * now*Math.PI*2;
</span><span class='line'>  // move the arms
</span><span class='line'>  character.parts.armR.rotation.x = 1.4 * Math.cos(angle + Math.PI);
</span><span class='line'>  character.parts.armL.rotation.x = 1.4 * Math.cos(angle);
</span><span class='line'>  // move the legs
</span><span class='line'>  character.parts.legR.rotation.x = 1.4 * Math.cos(angle);
</span><span class='line'>  character.parts.legL.rotation.x = 1.4 * Math.cos(angle + Math.PI);
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>And we are done! Pretty cool no ? :)</p>

<h3>Conclusion</h3>

<p>So we did a little character ala minecraft.
We got a basic animations of it. Nevertheless it would be neat to make animations
more robusts and generic. A new post will likely focus on this.
I so love this field and how it make things easier.</p>

<p>That&#8217;s all folks. Have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3D Physics With Three.js and Physijs]]></title>
    <link href="http://learningthreejs.com/blog/2012/06/05/3d-physics-with-three-js-and-physijs/"/>
    <updated>2012-06-05T12:13:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2012/06/05/3d-physics-with-three-js-and-physijs</id>
    <content type="html"><![CDATA[<p>This is yet another post about physics.
This one is about
<a href="https://github.com/chandlerprall/Physijs">physijs</a>
by
<a href="https://twitter.com/#!/chandlerprall">Chandler Prall</a>.
It easily bind
<a href="https://github.com/kripken/ammo.js/">ammo.js</a>
and
<a href="http://mrdoob.github.com/three.js/">three.js</a>.
We will walk thru an example using it.
Physics is always important in 3D graphics.
It makes scenes more realistic.
Additionally, if you simple put your object into the scene, it will move nicely and realisticly.
So you spend less time tuning each moves. I am quite lazy so it matters :)
The <a href="http://www.youtube.com/watch?v=THI82Q-P8Fo">screencast</a>
presents the <a href="http://learningthreejs.com/data/2012-06-05-3d-physics-with-three-js-and-physijs/">demo we gonna code</a>
and various examples of what is possible with
<a href="https://github.com/kripken/ammo.js/">ammo.js</a>.</p>

<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/THI82Q-P8Fo" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<h2>What About Physics Engines ?</h2>

<p>We already did physics with three.js.
It was with <a href="https://github.com/jeromeetienne/microphysics.js">microphysics.js</a> for <a href="http://marblesoccer.com">marblesoccer</a> minigame.
It is a micro library implementing 3D physics.
We talked quite a bit about it in
<a href="http://learningthreejs.com/blog/2011/10/17/lets-make-a-3d-game-microphysics-js/">&#8220;Lets Make a 3D Game: microphysics.js&#8221;</a>
and
<a href="http://learningthreejs.com/blog/2011/11/02/lets-make-a-3d-game-helper-for-microphysics-js/">&#8220;Lets Make a 3D Game: microphysics.js, Even Easier&#8221;</a>.
It is only 500lines!
Unfortunatly, this tiny size comes limitations.</p>

<p>Today we gonna use <a href="https://github.com/chandlerprall/Physijs">physijs</a> by <a href="https://twitter.com/#!/chandlerprall">Chandler Prall</a>.
This is a nice library which make it easy to use
<a href="https://github.com/kripken/ammo.js/">ammo.js</a>
with
<a href="http://mrdoob.github.com/three.js/">three.js</a>.
ammo.js is &#8220;Direct port of the Bullet physics engine to JavaScript using
<a href="https://github.com/kripken/emscripten">Emscripten</a>.
The source code is translated directly to JavaScript, without human rewriting, so functionality should be identical to the original Bullet.&#8221;</p>

<p><a href="http://bulletphysics.org/">bullet</a> is a full-blown physics engine well-known in the 3D community.
It can do a lot as you can see in its <a href="http://bulletphysics.com/Bullet/BulletFull/">docs</a>.
<a href="https://github.com/kripken/ammo.js/">ammo.js</a>
supports all the features you can expect from a mature 3D physics engine.
Charles J. Cliffe, aka <a href="https://twitter.com/#!/ccliffe">@ccliffe</a>,
did several demos using ammo.js.
This one is a <a href="http://cjcliffe.github.com/CubicVR.js/cubicvr/samples/physics/physics_heightfield.html">heighfield</a>
And look at this <a href="http://cjcliffe.github.com/CubicVR.js/cubicvr/samples/vehicle_physics_demo/stunt_track1.html">stunt track</a>!
Both are on top of <a href="http://www.cubicvr.org/">cubicvr</a>, <a href="https://twitter.com/#!/ccliffe">@ccliffe</a> own library.</p>

<p><a href="https://github.com/chandlerprall/Physijs">physijs</a> has been written with performance in mind.
<a href="https://github.com/kripken/ammo.js/">ammo.js</a> is running in a
<a href="https://developer.mozilla.org/En/Using_web_workers">webworker</a>.
So it most likely run on a second CPU. This is twice more cpu power for your javascript!
Coordinates are exchanged with
<a href="http://updates.html5rocks.com/2011/12/Transferable-Objects-Lightning-Fast">transferable objects</a>
when available.
Transferable objects is a special type of object which can be transfered between the main thread and the worker <strong>without copying</strong>
the data. Thus no matter how large the data are, it will be very low latency.</p>

<h2>Lets Get Started</h2>

<p>The code of today is a copy of the
<a href="http://chandlerprall.github.com/Physijs/examples/collisions.html">collision example</a>
from
<a href="http://chandlerprall.github.com/Physijs/">physijs</a>
using it thru tQuery API.
It may usefull to reimplement the same thing, just to be sure they both perform the same way. :)
<a href="http://learningthreejs.com/data/2012-06-05-3d-physics-with-three-js-and-physijs/">Try it out</a>.
So we got object falling on the ground and slightly bouncing on it. Let&#8217;s do just that.</p>

<center>
    <iframe width="100%" height="420" src="http://learningthreejs.com/data/2012-06-05-3d-physics-with-three-js-and-physijs/" frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe>
</center>


<p>First a classic. We create a tQuery.World. So you immediatly got
a scene, a renderer, camera and its controls. All that already
setup according to reasonable default.
 <code>.boilerplate()</code> adds
the <a href="http://learningthreejs.com/blog/2011/12/20/boilerplate-for-three-js/">&#8220;three.js boilerplate&#8221;</a>
we did last year. We disable the camera controls as it will stay still in this scene.
Then we <code>.start()</code> to launch the render loop.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var world    = tQuery.createWorld().boilerplate({cameraControls: false}).start();</span></code></pre></td></tr></table></div></figure>


<p>Now we setup the camera to be a bit far from the scene center. Thus
we got room to display larger objects</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.tCamera().position.set( 70, 40, 70 );
</span><span class='line'>world.tCamera().lookAt( world.tScene().position );</span></code></pre></td></tr></table></div></figure>


<p>Now we need to tell the renderer that shadow has to be casted. This is done by the simple lines below.
We saw the details in <a href="http://learningthreejs.com/blog/2012/01/20/casting-shadows/">&#8220;Casting Shadows&#8221;</a> post.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.tRenderer().shadowMapEnabled   = true;
</span><span class='line'>world.tRenderer().shadowMapSoft       = true;
</span><span class='line'>world.tRenderer().setClearColorHex( 0xffffff, 1 );</span></code></pre></td></tr></table></div></figure>


<p>Now we enable the physics into the world.
this is important. From now on, all the physics-enabled object
of this world will move according to realistic physics rules.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.enablePhysics();</span></code></pre></td></tr></table></div></figure>


<h2>Enlight your world</h2>

<p>Here we setup the lights. For simplicity sake, we will use only one directional light.
First we tune the position and color to fit our tastes. Dont be shy, play with those parameters to get a feel of it.
Then we tune shadow parameters.
Those can be tricky to tune.
You can find more details in <a href="http://learningthreejs.com/blog/2012/01/20/casting-shadows/">&#8220;Casting Shadow&#8221;</a> post.
It helps if you make the shaddow camera visible. You can do so with <code>.shadowCameraVisible(true)</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tQuery.createDirectionalLight().addTo(world)
</span><span class='line'>  .position(20, 40, -15).color(0xffffff)
</span><span class='line'>  .castShadow(true).shadowMap(512*2,512*2)
</span><span class='line'>  .shadowCamera(60, -60, 60, -60, 20, 200)
</span><span class='line'>  .shadowDarkness(0.7).shadowBias(.002)</span></code></pre></td></tr></table></div></figure>


<h2>Let&#8217;s create a ground to stand on</h2>

<p>First we create the texture for our ground. We use <code>rocks.jpg</code> to have like a rock
effect. We use <code>.RepeatWrapping</code> to repeat the texture on the faces and get a
proper scale.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var texture  = THREE.ImageUtils.loadTexture( "images/rocks.jpg" );
</span><span class='line'>texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
</span><span class='line'>texture.repeat.set( 3, 3 );</span></code></pre></td></tr></table></div></figure>


<p>In fact, the ground is only a cube which is wide and flat, a bit like
the <a href="http://en.wikipedia.org/wiki/Flat_Earth">old-vision of earth</a> :)
It is usual now, we setup the position, material and shadow.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var ground   = tQuery.createCube(100, 1, 100).addTo(world)
</span><span class='line'>  .position(0, -10, 0)
</span><span class='line'>  .setLambertMaterial().map(texture).back()
</span><span class='line'>  .receiveShadow(true)</span></code></pre></td></tr></table></div></figure>


<p>Now we just have to setup the physics for the ground. This is done
by <code>.enablePhysics()</code>. The <code>mass</code> parameter define the mass
of the object in the physics.
By default, it is automatically computed depending on the volume of the object.
Here zeroing the mass is a special case, which say
&#8220;the mass is infinite, dont move, ever&#8221; :)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ground.enablePhysics({
</span><span class='line'>  mass    : 0
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h2>Spawning object in a 3D world</h2>

<p>Spawning is always a delicate matter in our world.
But first let&#8217;s load the texture for the spawned objects.
It is done outside of the loop thus it get reused. Aka it is sent
only once to the GPU for all the objects. This is an important
point from performance point of view. Last year,
<a href="http://learningthreejs.com/blog/2011/09/16/performance-caching-material/">&#8220;Performance: Caching Material&#8221;</a>
post was about this very topic.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var cTexture = THREE.ImageUtils.loadTexture( "images/plywood.jpg" );</span></code></pre></td></tr></table></div></figure>


<p>Now we declare <code>spawnObject()</code> which gonna take care of spawning one object.
So we create a cube, setup its position, rotation and material. This is all good. Oh dont
forget to use <code>.castShadow()</code> as got <a href="http://en.wikipedia.org/wiki/Shadow_mapping">shadow mapping</a> going on :)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var spawnObject  = function(){
</span><span class='line'>  var object  = tQuery.createCube(4,4,4).addTo(world)
</span><span class='line'>      .rotation(Math.random()*Math.PI*2, Math.random()*Math.PI*2, Math.random()*Math.PI*2)
</span><span class='line'>      .position(Math.random()*15-7.5, 25, Math.random()*15-7.5)
</span><span class='line'>      .setLambertMaterial().map(cTexture).back()
</span><span class='line'>      .castShadow(true)</span></code></pre></td></tr></table></div></figure>


<p>Here we enable the physics on this object. So the world will handle all its move from now on.
It will object to physics laws according to the parameters you setup.
<a href="http://en.wikipedia.org/wiki/Friction">friction</a> is the force resisting when 2 objects slides against each other.
<a href="http://en.wikipedia.org/wiki/Coefficient_of_restitution">resititution</a> is how bouncy the object is.
For scientific definition, go read a book :)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> object.enablePhysics({
</span><span class='line'>      friction    : 0.4,
</span><span class='line'>      restitution : 0.6
</span><span class='line'>  });</span></code></pre></td></tr></table></div></figure>


<p>Now we gonna play with the &#8216;collision&#8217; event. Physijs is able to notify
you when an object collide with another. Just use <code>.addEventListener()</code> on &#8216;collision&#8217;.
Here we gonna change the color of the object depending on the number of collisions
they got.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> var nCollisions = 0;
</span><span class='line'>  object.physics().addEventListener('collision', function(){
</span><span class='line'>      var colliColors = [0xcc8855, 0xbb9955, 0xaaaa55, 0x99bb55, 0x88cc55, 0x77dd55];
</span><span class='line'>      if( ++nCollisions &lt; colliColors.length ){
</span><span class='line'>          var color   = colliColors[nCollisions];
</span><span class='line'>          object.get(0).material.color.setHex( color );
</span><span class='line'>      }
</span><span class='line'>  })
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now we simply use <a href="https://developer.mozilla.org/en/DOM/window.setInterval"><code>setInterval()</code></a> to
spawn an object every seconds.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setInterval(spawnObject, 1000);</span></code></pre></td></tr></table></div></figure>


<p>And we are DONE! We got a realistic physics in our 3D world! not bad hey :)</p>

<h2>Conclusion</h2>

<p>So, thanks to <a href="https://github.com/chandlerprall/Physijs">physijs</a>,
it is now possible to get full blown realistic physics
using
<a href="https://github.com/mrdoob/three.js/">three.js</a>
and
<a href="https://github.com/jeromeetienne/tquery">tQuery</a>.
It is a simple way to make scene more realistic. It is nice to experiment with.
I will do more on this very soon!</p>

<p>Thanks all folks! have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three.js Sport Car on iOS at 40fps]]></title>
    <link href="http://learningthreejs.com/blog/2012/05/29/three-js-sportcar-on-ios/"/>
    <updated>2012-05-29T13:48:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2012/05/29/three-js-sportcar-on-ios</id>
    <content type="html"><![CDATA[<p>This post is about iOS and three.js.
It may seem surprising, but <a href="http://en.wikipedia.org/wiki/iOS">iOS</a> supports WebGL since version 4.2.
There is a tough limitation tho, it is available only in their advertisment plateform,
<a href="http://en.wikipedia.org/wiki/IAd">iAds</a>, not in safari browser.
I got a ipad2 so i experimented a bit with three.js on iOS to see what is going on.
Most WebGL examples from
<a href="https://github.com/mrdoob/three.js/">three.js</a> and
<a href="https://github.com/jeromeetienne/tquery">tQuery</a>
are working nicely on iOS.</p>

<p>The
<a href="http://www.youtube.com/watch?v=3yc4qhP87oY">screencast</a>
below shows an ipad2 running the car demo we did last week in
<a href="http://learningthreejs.com/blog/2012/05/21/sport-car-in-webgl/">&#8220;Sport Car in WebGL&#8221;</a> post.
It runs at 40fps on the video. Rather good!
Especially when you know the demo isn&#8217;t optimized.
This car is way too detailed.
One could reduce the size of this model by half without loosing much.
So on mobile, the Good part is that <em>fps are good</em>.
The Bad part is that <em>speed is slower</em> and <em>balanced differently</em>.
This unbalanced part worries me a bit i admit. We need to better understand the mobile plateform.
But hey, 40fps is quite good, way enougth to make a game!</p>

<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/3yc4qhP87oY" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<h2>Experimenting with WebGL on iOS</h2>

<p>Yesterday,
<a href="http://news.ycombinator.com/user?id=daeken">daeken</a>
published a
<a href="http://demoseen.com/webglenabler/#">WebGL Enabler</a>
for iOS.
It enables WebGL in the browser for jailbroken iOS devices.
Or if you prefere a less invasive solution, not requiring to jailbreak your devices.
You can use
<a href="https://github.com/benvanik/WebGLBrowser">WebGL Browser</a>
made by
<a href="http://noxa.org/">Ben Vanik</a>
, aka <a href="https://twitter.com/#!/benvanik">@benvanik</a> on twitter.
He is wellknow for <a href="https://github.com/benvanik/WebGL-Inspector">WebGL Inspector</a>.</p>

<p>By the way,
<a href="https://github.com/benvanik/WebGLBrowser">WebGL Browser</a>
and
<a href="http://demoseen.com/webglenabler/#">WebGL Enabler</a>,
are both based on a similar trick.
It has been discovered by
<a href="https://twitter.com/#!/atnan">Nathan de Vries</a>
who told about it in this
<a href="http://atnan.com/blog/2011/11/03/enabling-and-using-webgl-on-ios/">excelent post</a>.
A very good read to understand the underlying details!
Unfortuntly this is using an unofficial API&#8230; so it is
impossible to get it for the apps store unfortunatly.</p>

<h2>WebGL Status on Mobile</h2>

<p>WebGL is starting to be hot on mobile.
<a href="http://www.blackberry.com/playbook">blackberry playbook2</a>
got it
<a href="http://devblog.blackberry.com/2012/02/playbook-native-webgl-development/">by default</a>.
<a href="http://www.mozilla.org/en-US/b2g/">boot on gecko</a> got it too with firefox mobile.
It isn&#8217;t enabled on android and iOS tho, the 2 majors.
Maybe we will have more info in june with
<a href="https://developers.google.com/events/io/">google.io</a>
and
<a href="https://developer.apple.com/wwdc/">apple event</a>.
google got <a href="http://www.google.com/intl/en/chrome/android/">chrome on android</a>.
iOS already got <a href="http://atnan.com/blog/2011/11/03/enabling-and-using-webgl-on-ios/">support</a>, this is more a matter of policy.
So lets hope google will announce WebGL support for chrome mobile.
and apple will announce they accepts WebGL on apps store applications.
I am an optimist personn, i hope :)</p>

<h2>Conclusion</h2>

<p>WebGL is coming hard on mobile.
<a href="https://github.com/mrdoob/three.js/">three.js</a> and
<a href="https://github.com/jeromeetienne/tquery">tQuery</a>
already work on it.
We need the 2 majors mobile OS to support it tho.
It think having it on android and ios would significantly change WebGL landscape.
Meanwhile you can already play with it, and do minigames with it, thus be ready when needed :)</p>

<p>That&#8217;s all to today folks. Have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sports Car in WebGL]]></title>
    <link href="http://learningthreejs.com/blog/2012/05/21/sport-car-in-webgl/"/>
    <updated>2012-05-21T12:16:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2012/05/21/sport-car-in-webgl</id>
    <content type="html"><![CDATA[<p>This post is about sports cars and how cool they can be!
Once again, we gonna expose gems from three.js examples.
It contains several sport cars which are fun to play with.
You can drive them around and all.
This is a good base for a game.
We made tQuery plugins on top to make them easily reusable.
Our scene will be a nice sport car, a grass ground, a sunset sky with shadow casting.
All that in 40-lines of javascript.</p>

<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/KxRfFd9SM5s" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<h2>What We Gonna Build ?</h2>

<p>What you see below is what we gonna build. Pretty nice no ?
<a href="http://learningthreejs.com/data/2012-05-21-sport-car-in-webgl/">Try it out</a>.</p>

<center>
    <iframe width="100%" height="420" src="http://learningthreejs.com/data/2012-05-21-sport-car-in-webgl/" frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe>
</center>


<p>It shows what is possible with <code>tquery.car.js</code>.
It is a plugin provides rendering and controls of sport cars.
It is heavily based on some examples by <a href="http://alteredqualia.com/">alteredq</a> in
<a href="http://github.com/mrdoob/three.js/">three.js</a>.
You can find them
<a href="http://mrdoob.github.com/three.js/examples/webgl_materials_cars.html">here</a>
and
<a href="http://mrdoob.github.com/three.js/examples/webgl_materials_cubemap_dynamic.html">here</a>.
The car is a Bugatti Veyron model by
<a href="http://artist-3d.com/free_3d_models/dnm/model_disp.php?uid=1129">Troyano</a>.
Now let&#8217;s get started.</p>

<h2>Let&#8217;s start coding</h2>

<p>We start to create our world as usual. We enable the
<a href="http://learningthreejs.com/blog/2011/12/20/boilerplate-for-three-js/">boilerplate for three.js</a>.
It is a fast way start, avoids repetitive tasks, following DRY principles and includes all those good practices which are so easy to forget.
Then we just have to <code>.start()</code> the rendering loop on this world.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var world    = tQuery.createWorld().boilerplate().start();</span></code></pre></td></tr></table></div></figure>


<p>Now we setup the renderer.
In this scene, we want to cast shadows as if it cames from the sun.
This is a nice way to improve the realism in our 3D scene
We already talked about it in <a href="http://learningthreejs.com/blog/2012/01/20/casting-shadows/">&#8220;Casting Shadow&#8221;</a>
The renderer needs to be notified so we set <code>.shadowMapEnabled</code> and <code>.shadowMapSoft</code> to true.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.renderer().shadowMapEnabled    = true;
</span><span class='line'>world.renderer().shadowMapSoft        = true;</span></code></pre></td></tr></table></div></figure>


<h2>The Sky</h2>

<p>Now we add a sky to the 3D scene.
It will fill the space and make the scene more realistic.
We use a skymap for that. It is WebGL trick which take a cube, make it so large that it seems infinite.
On it, we map a 360degeree texture shaped as a cube, and use a special shader to display it. All is in this
shader, it makes the cube appear as if we were in a gigantic sphere. Exactly like we would feel with a sky above
our head.
We already saw skymaps in <a href="http://learningthreejs.com/blog/2011/08/15/lets-do-a-sky/">&#8220;let&#8217;s do a sky&#8221;</a> post.
We just added a new plugins <code>tquery.skymap.js</code>.
It avoids repeative code when you do skymap or environement map.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tQuery.createSkymap('skybox').addTo(world);</span></code></pre></td></tr></table></div></figure>


<h2>The Lights</h2>

<p>Here we setup the lights. We put one ambient and 2 directional lights.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tQuery.createAmbientLight().addTo(world).color(0xFFFFFF);
</span><span class='line'>tQuery.createDirectionalLight().addTo(world).position(1,1,-1).color(0xffffff).intensity(2);</span></code></pre></td></tr></table></div></figure>


<p>It is rather simple so lets focus on the last one, the one casting shadow.
We want it to appear as coming from the sun.
So we look at the skymap and approximatly localized the sun at <code>(-10, 20, 30)</code>.
Then we tune shadow parameters to fit our tastes.
You can find more details in <a href="http://learningthreejs.com/blog/2012/01/20/casting-shadows/">&#8220;Casting Shadow&#8221;</a> post.
Those parameters can be tricky to tune. It helps if you make the shaddow
camera visible. You can do so with <code>.shadowCameraVisible(true)</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tQuery.createDirectionalLight().addTo(world).position(-10, 20, 30).color(0xffffff).intensity(4)
</span><span class='line'>  .castShadow(true).shadowDarkness(0.8)
</span><span class='line'>  .shadowMap(512*2,512*2)
</span><span class='line'>  .shadowCamera(10, -10, 20, -20, 0.1, 50);</span></code></pre></td></tr></table></div></figure>


<h2>The Ground</h2>

<p>Now we add the ground. A car needs a ground to stand on :)
For that, we got a little helper <code>tquery.grassground.js</code>.
This is just building a <code>THREE.Plane</code> and mapping a grass
texture into it.
It does the job for a simple and fast ground.
We have seen something similar with <code>tquery.checkerboard.js</code> in
<a href="http://learningthreejs.com/blog/2012/05/04/tquery-md2character-a-plugin-for-doom-characters/">&#8220;tQuery Plugin for Doom Characters&#8221;</a>
post.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var ground   = tQuery.createGrassGround({
</span><span class='line'>  textureUrl  : '../../grassground/images/grasslight-big.jpg',
</span><span class='line'>  textureRepeatX  : 30,
</span><span class='line'>  textureRepeatY  : 30,       
</span><span class='line'>}).addTo(world).receiveShadow(true).scaleBy(100);</span></code></pre></td></tr></table></div></figure>


<h2>The Car</h2>

<p>First we instanciate a <code>tQuery.Car</code> object with <code>tQuery.createCar()</code>.
It will load the models, then material will be setup.
 <code>tQuery.Car</code> handles the displacement of the car too.
You can make the car turn, go forward and backward, using <code>car.controls()</code>.
you can even switch on/off the lights with <code>.flareVisible()</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var car  = tQuery.createCar();</span></code></pre></td></tr></table></div></figure>


<p>Then we had the car model in our world scene. Important if you want to see it :)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.add(car.model())</span></code></pre></td></tr></table></div></figure>


<p>Now we got the car on the scene, this is all good.
But we need the camera to follow this car. We create a camera controls specific
to mimic the usual camera in car game. The camera is placed a bit behind the car and looks forward.
The faster you go, the further you look. This is always nice to see what is coming at you :)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tQuery.Car.createCameraControls(car, world);</span></code></pre></td></tr></table></div></figure>


<h2>Car Controls</h2>

<p>Now we hook the controls to the car. This determines how the player will control the
car. It can be controlled by the keyboard, so users press arrows on keyboard
and the car moves.
It can be controlled by the <a href="http://dev.w3.org/geo/api/spec-source-orientation.html">device orientation</a>.
We already talked device orientation in game in
<a href="http://learningthreejs.com/blog/2011/09/20/lets-make-a-3D-game-device-orientation/">this post</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var hasTouchEvent    = "ontouchstart" in window;
</span><span class='line'>if( hasTouchEvent )   car.hookDeviceOrientation();
</span><span class='line'>else          car.hookKeyboard();</span></code></pre></td></tr></table></div></figure>


<p>Now maybe you wonder &#8220;why this devices orientation&#8221; ?
I ported tQuery to IOS. So since tQuery r49.1, it is possible to run
tquery on your iphones or ipads.
It is possible to render with <a href="http://www.w3.org/TR/2dcontext/">canvas 2D</a> in the regular browser.
Even possible to render WebGL using
<a href="https://github.com/benvanik/WebGLBrowser">WebGL Browser</a> by <a href="https://twitter.com/#!/benvanik">Ben Vanik</a>.</p>

<h2>The Road</h2>

<p>In a scene, it is cool to create a goal, something for the user to do.
A road seems like a perfect goal for a car :)
First we create the material we gonna use. This is a <a href="http://en.wikipedia.org/wiki/Lambertian_reflectance">lambert</a>
with a <a href="http://en.wikipedia.org/wiki/Reflection_mapping">reflection</a>. You put a cube texture in the
 <code>envMap</code> parameter and you got your reflection :) Here again, we use tquery.skymap.js to create the cube texture.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var material = new THREE.MeshLambertMaterial({
</span><span class='line'>  ambient : 0x444444,
</span><span class='line'>  color   : 0x666666,
</span><span class='line'>  envMap  : tQuery.createCubeTexture('skybox')
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Now we add the arches. In fact, they are torus which are half in the ground, so the
visible part looks like an arche.
We put 5 of them along the Z axis.
They are all aligned to give a kindof road.
 <code>.castShadow(true)</code> make the 3D object as casting shadow. Always a nice trick to enhance realism.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for(var i = 0; i &lt; 5; i++){
</span><span class='line'>  tQuery.createTorus(1.25-0.25, 0.25, 8, 6*4, material).addTo(world)
</span><span class='line'>      .castShadow(true).translateZ( 2 + i * 5 );      
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And we are <strong>DONE</strong>! We got a nice looking car, driving on grass with a sun set. It is
controlled by keyboard and the camera controls is suitable for a game. Not bad
for 40 lines of javascript.</p>

<h2>Conclusion</h2>

<p>In this post, i walked you thru a example of <code>tQuery.car.js</code>. It builds a rather
cool scene in 40lines of js. It seems a nice base for a game. Like the
<a href="http://learningthreejs.com/blog/2012/05/15/punch-a-doom-character-in-augmented-reality/">two</a>
<a href="http://learningthreejs.com/blog/2012/05/08/sound-visualisation-vuemeter-in-webgl/">previous</a>
walk through, we got very short code. I like this, it makes it easier to understand
and learn. WebGL for All!! :)</p>

<p>That&#8217;s all folks! have fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Punch A Doom Character in Augmented Reality]]></title>
    <link href="http://learningthreejs.com/blog/2012/05/15/punch-a-doom-character-in-augmented-reality/"/>
    <updated>2012-05-15T11:59:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2012/05/15/punch-a-doom-character-in-augmented-reality</id>
    <content type="html"><![CDATA[<p>Did you ever dreamed of punching a doom character ? They look evil and killed
you so many time while you were playing the game. It is revenge time! This
post will help you realize your dream :)
It is about a minigame called &#8220;Punch A Doom Character in Augmented Reality&#8221;
because in this game, the player can punch Doom Character in augmented reality :)</p>

<p>The character is displayed in 3D with WebGL with <a href="http://github.com/mrdoob/three.js/">three.js</a>.
The player gestures are recognized thru the webcam by <a href="https://github.com/jeromeetienne/augmentedgesture.js">augmentedgesture.js</a> library.
It uses <a href="http://webrtc.org">WebRTC</a> <a href="http://dev.w3.org/2011/webrtc/editor/getusermedia.html">getUserMedia</a> to get the webcam
using open standards.
You can play this minigame <a href="http://learningthreejs.com/data/2012-05-15-punch-a-doom-character-in-augmented-reality">here</a>.
In fact, it is an example of <a href="https://github.com/jeromeetienne/augmentedgesture.js">augmentedgesture.js</a> library.
We will walk you thru the code. Only 60 lines of Javascript.</p>

<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/Aa9945MGRL0" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<p>We have seen augmented gesture in <a href="http://learningthreejs.com/blog/2012/05/02/augmented-reality-3d-pong/">&#8220;Augmented Reality 3D Pong&#8221;</a> post
and MD2 Characters in <a href="http://learningthreejs.com/blog/2012/05/04/tquery-md2character-a-plugin-for-doom-characters/">&#8220;tQuery Plugin for Doom Characters&#8221;</a> post.
Now we gonna associate them together in our mini game :)
I presented it at <a href="www.web-5.org">Web-5</a> conference in april.
At the time, i recorded a preview <a href="http://www.youtube.com/watch?v=hUYM93xaIgg">&#8220;Doom: a new workout for geek?&#8221;</a>.
Now let&#8217;s get started!</p>

<h2>The 3D World</h2>

<p>First we initialize the world in 3D.
With <code>tQuery.createWorld()</code>, we create a <code>tQuery.World</code>.
With <code>.boilerplate()</code>, we setup a boilerplate on this world. A boilerplate is
a fast way to get you started on the right foot. It is the
<a href="http://learningthreejs.com/blog/2011/12/20/boilerplate-for-three-js/">learningthreejs boilerplate for three.js</a>.
With <code>.start()</code>, we start the rendering loop. So from now on, the world scene
gonna be rendered periodically, typically 60time per seconds.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var world    = tQuery.createWorld().boilerplate().start();</span></code></pre></td></tr></table></div></figure>


<p>We setup the camera now. We remove the default camera controls from the boilerplate.
Then we put the camera at <code>(0,1.5,5)</code> and looking toward <code>(0,1,-1)</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.removeCameraControls()
</span><span class='line'>world.camera().position.set(0,1.5, 4);
</span><span class='line'>world.camera().lookAt(new THREE.Vector3(0,1,-1));</span></code></pre></td></tr></table></div></figure>


<p>Now we change the background color. This confusing line ensure the background of the
3D scene will be rendered as <code>0x000000</code> color, aka black. We set a black
background to give an impression of night.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.renderer().setClearColorHex( 0x000000, world.renderer().getClearAlpha() );</span></code></pre></td></tr></table></div></figure>


<p>We had a fog to the scene. For that, we use <code>tquery.world.createfog.js</code> plugins.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.addFogExp2({density : 0.15});</span></code></pre></td></tr></table></div></figure>


<h3>The Lights</h3>

<p>Here we setup the lights of our scene. This is important as it determine how
your scene looks. We add a ambient light and a directional light.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tQuery.createAmbientLight().addTo(world).color(0x444444);
</span><span class='line'>tQuery.createDirectionalLight().addTo(world).position(-1,1,1).color(0xFFFFFF).intensity(3);</span></code></pre></td></tr></table></div></figure>


<h3>The Ground</h3>

<p>We create a large checkerboard with <code>tquery.checkerboard.js</code> plugin.
We scale the checkerboard to 100 per 100 units in the 3D world. Thus it is
quite large and disappears into the fog. It gives the cheap impression of
an infinite checkerboard.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tQuery.createCheckerboard({
</span><span class='line'>  segmentsW   : 100,  // number of segment in width
</span><span class='line'>  segmentsH   : 100   // number of segment in Height
</span><span class='line'>}).addTo(world).scaleBy(100);</span></code></pre></td></tr></table></div></figure>


<h3>The Character</h3>

<p>We use <code>tQuery.RatamahattaMD2Character</code> plugin. Its inherits from
 <code>tQuery.MD2Character</code> plugin. All the configuration for this particular
character <code>ratamahatta</code> is already done for you.
We attach it to tQuery world.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var character    = new tQuery.RatamahattaMD2Character().attach(world);</span></code></pre></td></tr></table></div></figure>


<p>When an animation is completed, switch to animation &#8216;stand&#8217;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>character.bind('animationCompleted', function(character, animationName){
</span><span class='line'>  console.log("anim completed", animationName);
</span><span class='line'>  this.animation('stand');
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h2>Recognize Augmented Gestures</h2>

<p>First we instanciate an object of <strong>AugmentedGesture</strong> class.
 <code>.enableDatGui()</code> will add a <a href="http://workshop.chromeexperiments.com/examples/gui">Dat.GUI</a>.
This is a nice library to tune parameters. We use it to tune augmentedgesture pointers.
You can read more about it in <a href="http://learningthreejs.com/blog/2011/08/14/dat-gui-simple-ui-for-demos/">&#8220;Dat-gui - Simple UI for Demos&#8221;</a> post.
 <code>.start()</code> asks it to begin monitoring the webcam and see if it finds markers.
 <code>.domElementThumbnail()</code> put the webcam view as a thumbnail on the screen. This is what you
see on top-left.
This is usefull for the user, it is used as feedback to know what is happening</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var aGesture = new AugmentedGesture().enableDatGui().start().domElementThumbnail();</span></code></pre></td></tr></table></div></figure>


<h3>The Pointers</h3>

<p>Now that we got our AugmentedGesture instance, we gonna configure the pointers.
One for the right hand, one for the left hand. For each, we setup the options
to adapt each hand colors.
In my case, the right hand is containing a green ball and the left hand contains a red ball.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var pointerOpts  = new AugmentedGesture.OptionPointer();
</span><span class='line'>pointerOpts.pointer.crossColor    = {r:    0, g: 255, b:   0};
</span><span class='line'>pointerOpts.colorFilter.r = {min:   0, max:  95};
</span><span class='line'>pointerOpts.colorFilter.g = {min: 115, max: 255};
</span><span class='line'>pointerOpts.colorFilter.b = {min:  25, max: 150};
</span><span class='line'>aGesture.addPointer("right", pointerOpts);</span></code></pre></td></tr></table></div></figure>


<p>Now we do the same for the left pointer.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var pointerOpts  = new AugmentedGesture.OptionPointer();
</span><span class='line'>pointerOpts.pointer.crossColor    = {r:    255, g:   0, b: 128};
</span><span class='line'>pointerOpts.colorFilter.r = {min: 190, max: 255};
</span><span class='line'>pointerOpts.colorFilter.g = {min:  30, max: 255};
</span><span class='line'>pointerOpts.colorFilter.b = {min:   0, max: 100};
</span><span class='line'>aGesture.addPointer("left", pointerOpts);</span></code></pre></td></tr></table></div></figure>


<h3>Gesture Analysis</h3>

<p>Now that augmentedgesture.js is giving us the position of each hand, we gonna
convert that into events. <code>punchingRight</code> when the user gives a punch with
the right hand and <code>punchingLeft</code> for the left hand.
We establish a variable to store the user moves. It is quite simple
 <code>.punchingRight</code> is true when the use is punching with his right hand.
 <code>.punchingLeft</code> is the same for the left hand.
and <code>.changed</code> is true when values change.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var userMove = {
</span><span class='line'>  punchingRight   : false,
</span><span class='line'>  punchingLeft    : false,
</span><span class='line'>  changed     : false
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>we bind the event <code>mousemove.left</code> thus we are notified when the user moves his
left hand. The algo we use is very simple: if the left hand is on the right part of
the screen, then the user is considered &#8220;punchingLeft&#8221;. Dont forget
to <code>.changed</code> to true</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aGesture.bind("mousemove.left", function(event){
</span><span class='line'>  var state   = event.x &gt; 1 - 1/3;
</span><span class='line'>  if( state === userMove.punchingLeft )   return;
</span><span class='line'>  userMove.punchingLeft   = state;
</span><span class='line'>  userMove.changed    = true;
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Now we need the same thing for the other hand. all the the same.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aGesture.bind("mousemove.right", function(event){
</span><span class='line'>  var state   = event.x &lt; 1/3;
</span><span class='line'>  if( state === userMove.punchingRight )  return;
</span><span class='line'>  userMove.punchingRight  = state;
</span><span class='line'>  userMove.changed    = true;
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h2>Bind Character and Augmented Gestures</h2>

<p>Now we hook a function to the rendering loop. This function will be executed
every time the scene is renderered. The first thing we do in this function
is to check that userMove has <code>.changed</code>. If not, we do nothing.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.loop().hook(function(){
</span><span class='line'>  if( userMove.changed === false )    return;
</span><span class='line'>  userMove.changed = false;</span></code></pre></td></tr></table></div></figure>


<p>Now we process each move of the user. If the user is <code>punchingRight</code>, play
the animation <code>crdeath</code> of the character. If he is <code>punchingLeft</code>,
play <code>crplain</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> if( userMove.punchingRight )        character.animation('crdeath');
</span><span class='line'>  else if( userMove.punchingLeft )    character.animation('crpain');
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>And you are <strong>DONE</strong>! Pretty nice no ? :)</p>

<h2>Conclusion</h2>

<p>In this post we built a mini-game where users can punch doom character in augmented reality.
All that in 60 lines of javascript.
The Character is displayed in WebGL with
<a href="https://github.com/mrdoob/three.js/">three.js</a>
and the augmented reality is handled
by <a href="https://github.com/jeromeetienne/augmentedgesture.js">augmentedgesture.js</a>.
I like how those libraries makes the code so small, and the developement time
so short.</p>

<p>That&#8217;s all folks, have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sound Visualisation: a Vuemeter in WebGL]]></title>
    <link href="http://learningthreejs.com/blog/2012/05/08/sound-visualisation-vuemeter-in-webgl/"/>
    <updated>2012-05-08T10:32:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2012/05/08/sound-visualisation-vuemeter-in-webgl</id>
    <content type="html"><![CDATA[<p>This post is about producing a 3D Vuemeter for real time sound.
We gonna walk thru the code of a
<a href="https://github.com/jeromeetienne/webaudio.js">webaudio.js</a> example.
This example will show you how to create a WebGL vuemetter with
<a href="https://github.com/jeromeetienne/webaudio.js">webaudio.js</a>.
It should be simple to understand, only 40-lines of javascript.
<a href="https://github.com/jeromeetienne/webaudio.js">webaudio.js</a> is a web audio library
for game. We gonna use it to reach <a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html">Web Audio API</a>.
We gonna use <a href="https://github.com/jeromeetienne/tquery">tQuery</a>
to reach <a href="http://github.com/mrdoob/three.js/">three.js 3D engine</a>.</p>

<p> <code>webaudio.js</code> has been first coded as a tQuery plugin.
You can find a <a href="http://learningthreejs.com/blog/2012/03/20/sounds-for-more-realistic-3d/">post about it</a>
on <a href="http://learningthreejs.com">learningthreejs</a> blog.
But this technology is so nice, it deserved its <a href="https://github.com/jeromeetienne/webaudio.js">own repository</a>.
The library gained in flexibility in the process: It is now possible to display histogram in canvas2D
of simply play sound, with no 3D at all :) see <a href="http://jeromeetienne.github.com/webaudio.js/#examples">here</a> for a list of
webaudio.js examples.</p>

<p><a href="http://jeromeetienne.github.com/webaudio.js/examples/histotquery.html">Try the demo</a>.
This is the result that we gonna build together.
Below is a small <a href="http://www.youtube.com/watch?v=--Gv2EI2a-U">screencast</a> of me presenting the code.</p>

<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/--Gv2EI2a-U" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<h2>Background Knowledge</h2>

<p><strong>Web Audio API</strong> is aimed for games and based on openAL.
Its API is real nice tho. It is Efficient and flexible.
It is efficient because most processing happen in native code,
still you configure it in js, your favorite language :)
It is flexible as it is based on a routing concept which
give you great controls on the sounds you play.</p>

<p>You can find
<a href="http://www.html5rocks.com/en/tutorials/#technology:multimedia">many good tutorials</a>
on the matter on
<a href="http://www.html5rocks.com/en/">html5rocks</a>.
I recently did a presentation at <a href="http://www.musichackparis.org">musichackparis</a> on Web Audio API.
If you want to know more, slides are <a href="http://jeromeetienne.github.com/slides/webaudioapi">here</a>.
This API is available on WebKit based browser, so safari and chrome and its derivative.
Unfortunatly this API isn&#8217;t compatible with major webgl browsers e.g. firefox and opera.
The <strong>Web Audio API</strong> is real nice tho. Efficient flexible
Sound is still the poor lone child of the web :(
Well let&#8217;s have fun with what we have.</p>

<h2>Let&#8217;s get started</h2>

<p>Ok the very begining is real simple. We init a basic html page.
Then we include the dependancies in javascript.
We include <a href="https://github.com/jeromeetienne/webaudio.js">webaudio.js</a> to handle the sound playing and analysis.
Then we just have to include <a href="https://github.com/jeromeetienne/tquery">tquery</a>.
tquery-bundle.js is <a href="https://github.com/jeromeetienne/tquery">tquery</a>
bundled with
<a href="http://github.com/mrdoob/three.js/">three.js</a> in a single file for convenience.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!doctype html&gt;&lt;title&gt;webaudio example: histo3d&lt;/title&gt;
</span><span class='line'>&lt;script src="../build/webaudio.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src="vendor/tquery/tquery-bundle.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;body&gt;&lt;script&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Let&#8217;s Code in JS</h2>

<p>First we gonna intenciate <code>WebAudio</code>. This will initialize the layer.
It will create the <a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html#AudioNode-section">AudioNode</a>`s
for the end of the chain.
By default it contains a
<a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html#AudioGainNode">gainNode</a>
and a
<a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html#DynamicsCompressorNode">compressorNode</a>.
The gainNode is used to tune the volume. and the compressNode to smooth the peaks we could
hit in the sound.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var webaudio = new WebAudio();</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Now that we go webaudio available, let&#8217;s use it to create the sound we gonna play.
 <code>.createSound()</code> will create a <code>WebAudio.Sound</code>. Then we <code>.load()</code> it
from this url &#8216;sounds/perfume.mp3&#8217;. The callback will be notified as soon as the sound
is loaded. Then we simply start to play it. Don&#8217;t forget to get <code>.loop(true)</code>
thus the sound will loop forever.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var sound    = webaudio.createSound().load('sounds/perfume.mp3', function(sound){
</span><span class='line'>  sound.loop(true).play();
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h2>Initialize the 3D World</h2>

<p>First we initialize the world in 3D.
With <code>tQuery.createWorld()</code>, we create a <code>tQuery.World</code>.
With <code>.boilerplate()</code>, we setup a boilerplate on this world. A boilerplate is
a fast way to get you started on the right foot. It is the
<a href="http://learningthreejs.com/blog/2011/12/20/boilerplate-for-three-js/">learningthreejs boilerplate for three.js</a>
With <code>.start()</code>, we start the rendering loop. So from now on, the world scene
gonna be rendered periodically, typically 60time per seconds.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var world    = tQuery.createWorld().boilerplate().start();</span></code></pre></td></tr></table></div></figure>


<p>We Change the background color. This confusing line ensure the background of the
3D scene will be rendered as <code>0x000000</code> color, aka black.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.renderer().setClearColorHex( 0x000000, world.renderer().getClearAlpha() );</span></code></pre></td></tr></table></div></figure>


<p>Here we setup the lights of our scene. This is a key factor for the look and feel
of your scene. We add a ambient light and 2 directional lights.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tQuery.createAmbientLight().addTo(world).color(0x888888);
</span><span class='line'>tQuery.createDirectionalLight().addTo(world).position(+1,+1,1).color(0x88FF88);
</span><span class='line'>tQuery.createDirectionalLight().addTo(world).position(-1,-1, 1).color(0x8888FF);</span></code></pre></td></tr></table></div></figure>


<h2>Some constants</h2>

<p>First we initialize <code>nBar</code> to store number of bars in our 3D vuemeter.
This number MUST be odd, thus the vuemeter is symteric with the middle</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var nBar = 41;
</span><span class='line'>console.assert(nBar%2, "nBar MUST be a odd number.")</span></code></pre></td></tr></table></div></figure>


<p>Now we need to compute the width of each 3D bar. The whole vuemeter is
 80 wide. So each bar is <code>80/nBar</code> wide.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var barW = 80/nBar;</span></code></pre></td></tr></table></div></figure>


<p>We create an array <code>bars3d</code>. We will use it to store the object3D
for all bars of the  histogram.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var bars3d   = [];</span></code></pre></td></tr></table></div></figure>


<h2>Build the 3D VueMeter</h2>

<p>First we create the container group3D which gonna regroup all the bar3D. It is the
container of the whole 3D Vuemeter</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var group3d  = tQuery.createObject3D().scale(1/20).addTo(world);</span></code></pre></td></tr></table></div></figure>


<p>We gonna build each bar and add it to <code>group3d</code>.
We loop to create <code>nBar</code> with <code>tQuery.createCube()</code>. In fact a bar
is a rectangular box, so like a cube with different dimensions.
a bar got a width of <code>barW</code>, an height of 10 and a depth of 5.
The material is a simple <a href="http://en.wikipedia.org/wiki/Lambertian_reflection">lambert</a>.
Once the bar is create, we add it to <code>group3d</code> and set it to the correct
position in space.
We push every bar3d into <code>bars3d</code> for future reference.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for(var i = 0; i &lt; nBar; i++){
</span><span class='line'>  var bar3d   = tQuery.createCube(barW, 10, 5, new THREE.MeshLambertMaterial({
</span><span class='line'>      ambient : 0x888888,
</span><span class='line'>      color   : 0xFFFFFF
</span><span class='line'>  }));
</span><span class='line'>  bar3d.addTo(group3d).position((i-nBar/2)*barW, 0, 0);
</span><span class='line'>  bars3d.push(bar3d);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Update Vuemeter From Sound Analyser</h2>

<p>Here we hook a function to tQuery rendering loop, <code>tQuery.Loop</code>. Thus
this function gonna be executed everytime our 3D scene is rendered.
if the sound isnt yet loaded, do nothing.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.loop().hook(function(){
</span><span class='line'>  if( sound.isPlayable() === false )  return;</span></code></pre></td></tr></table></div></figure>


<p>build the histogram of the sound based on
<a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html#RealtimeAnalyserNode">RealtimeAnalyserNode</a>
 <code>.getByteFrequencyData()</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var nBarHalf = Math.ceil(nBar/2)
</span><span class='line'>var histo = sound.makeHistogram(nBarHalf);</span></code></pre></td></tr></table></div></figure>


<p>We gonna loop over each bar3D of our vuemeter. We gonna update
each of them based on the sound histogram we just computed.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bars3d.forEach(function(bar3d, barIdx){</span></code></pre></td></tr></table></div></figure>


<p>We need to determine which value in the histogram match this vuemeter bar.
As our vuemeter is symetric, the vuemeter bar on the far left got the same
histogram value as the one on the far right. This make this computation
a bit confusing.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>     var histoIdx        = barIdx &lt; nBarHalf ? nBarHalf-1-barIdx : barIdx - nBarHalf;</span></code></pre></td></tr></table></div></figure>


<p>Now we need to compute the height of the vuemeter bar based on histogram value.
This is simple scaling from one to the other: vuemeter height === histo height / 256</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>     var height      = histo[histoIdx] / 256;</span></code></pre></td></tr></table></div></figure>


<p>Now that we computed all that, we update the <code>bar3d</code>. We update <code>.scale.y</code>
to change its size and <code>.material.color</code> to change its color. The formulas
i used &#8220;worked for me&#8221;. Up to you to be creative and find the one that fit
your own needs</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>     bar3d.get(0).scale.y    = height*3;
</span><span class='line'>      bar3d.get(0).material.color.setHSV(0.3+height*0.7,1,1)
</span><span class='line'>  });
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>So we used
<a href="https://github.com/jeromeetienne/webaudio.js">webaudio.js</a>
to play a sound and analyses in real time.
We used this information to change 3D objects based on this
analysis.
We leveraged <a href="https://github.com/jeromeetienne/tquery">tQuery</a>
to reach <a href="http://github.com/mrdoob/three.js/">three.js 3D engine</a>.
Now you can imagine any visual effect based on sound analysis.
The road to winamp effects is open to you :)
We got a rather nice looking WebGL output of a 3D Vuemeter in Real Time
for only 40 lines of javascript. I love how short code
reduces developement time.</p>

<p>That&#8217;s all folks. Have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tQuery plugin for Doom Characters]]></title>
    <link href="http://learningthreejs.com/blog/2012/05/04/tquery-md2character-a-plugin-for-doom-characters/"/>
    <updated>2012-05-04T10:26:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2012/05/04/tquery-md2character-a-plugin-for-doom-characters</id>
    <content type="html"><![CDATA[<p>This post is about
<a href="https://github.com/jeromeetienne/tquery/tree/dev/plugins/md2character">tQuery.md2Character</a>
plugin: a cool plugin which allow you to easily play with doom characters. You can see a live demo
<a href="http://learningthreejs.com/data/2012-05-04-tquery-md2character-a-plugin-for-doom-characters/examples">here</a>.
I will walk you thru its example. It include a checkerboard for the ground, a fog for the depth, keyboard to
move your player and obviously plugins for the MD2 characters (doom formats).
We gonna learn how to move doom characters in webgl in only 50lines of javascript!</p>

<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/BaCEKbWXbfM" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<h2>Background knowledge</h2>

<p>First what means MD2 ?
<a href="http://en.wikipedia.org/wiki/MD2_(file_format)">MD2</a> is the file format used in the famous
<a href="http://en.wikipedia.org/wiki/Quake_II">Quake II</a>.
Many of the monster you love to hate can be found in this format :)
You can find md2 models
  at <a href="http://www.md2.sitters-electronics.nl/models.html">sitters-electronics</a>
  or at <a href="http://planetquake.gamespy.com/View.php?view=Quake2.Detail&amp;id=69">planet quake</a>.</p>

<p>You can use it easily in three.js thanks to <a href="https://twitter.com/#!/oosmoxiecode">oosmoxiecode</a>
He wrote a nice converter from
  <a href="http://en.wikipedia.org/wiki/MD2_(file_format)">MD2</a>
  to
  <a href="https://github.com/mrdoob/three.js/wiki/JSON-Model-format-3.0">three.js json format</a>.
  He wrote a <a href="http://oos.moxiecode.com/blog/2012/01/md2-to-json-converter/">post about it</a>
  with plenty of usefull info on the subject.
<a href="http://alteredqualia.com/">alteredq</a> wrote
several <a href="http://alteredqualia.com/three/examples/webgl_morphtargets_md2_control.html">cool</a>
<a href="http://alteredqualia.com/three/examples/webgl_morphtargets_md2.html">demos</a>
using it.</p>

<h2>Let&#8217;s Get Started</h2>

<p>We gonna walk you thru the 50lines of javascript needed make this demo.
It is rather simple. It implies tQuery obviously, and various plugins:
One for the fog, one for the checkerboard used as ground, one to
bind the keyboard and obviously plugins for the MD2 Character itself.</p>

<iframe src="http://learningthreejs.com/data/2012-05-04-tquery-md2character-a-plugin-for-doom-characters/examples"
    webkitallowfullscreen mozallowfullscreen allowfullscreen 
    width="100%" height="420" frameborder="0">
</iframe>


<p>Nice demo no ? You can try it
<a href="http://learningthreejs.com/data/2012-05-04-tquery-md2character-a-plugin-for-doom-characters/examples">here</a>.
Let&#8217;s code it!</p>

<h2>The 3D World</h2>

<p>First we initialize the world in 3D.
With <code>tQuery.createWorld()</code>, we create a <code>tQuery.World</code>.
With <code>.boilerplate()</code>, we setup a boilerplate on this world. A boilerplate is
a fast way to get you started on the right foot. It is the
<a href="http://learningthreejs.com/blog/2011/12/20/boilerplate-for-three-js/">learningthreejs boilerplate for three.js</a>
With <code>.start()</code>, we start the rendering loop. So from now on, the world scene
gonna be rendered periodically, typically 60time per seconds.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">world</span>  <span class="o">=</span> <span class="nx">tQuery</span><span class="p">.</span><span class="nx">createWorld</span><span class="p">().</span><span class="nx">boilerplate</span><span class="p">().</span><span class="nx">start</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Change the background color. This confusing line ensure the background of the
3D scene will be rendered as <code>0x000000</code> color, aka black. We set a black
background to give an impression of night.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">world</span><span class="p">.</span><span class="nx">renderer</span><span class="p">().</span><span class="nx">setClearColorHex</span><span class="p">(</span> <span class="mh">0x000000</span><span class="p">,</span> <span class="nx">world</span><span class="p">.</span><span class="nx">renderer</span><span class="p">().</span><span class="nx">getClearAlpha</span><span class="p">()</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The Lights</h2>

<p>Here we setup the lights of our scene. This is important as it determine how
your scene looks. We add a ambient light and 2 directional lights.
The ambient light is a dark grey, to simulate the lack of light during the night.
We setup a directional light in front colored redish&#8230;. This is like a setting sun.
In the opposite direction, we put another direction light, bluish. This is like
the moon. Well this was my rational :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">tQuery</span><span class="p">.</span><span class="nx">createAmbientLight</span><span class="p">().</span><span class="nx">addTo</span><span class="p">(</span><span class="nx">world</span><span class="p">).</span><span class="nx">color</span><span class="p">(</span><span class="mh">0x444444</span><span class="p">);</span>
</span><span class='line'><span class="nx">tQuery</span><span class="p">.</span><span class="nx">createDirectionalLight</span><span class="p">().</span><span class="nx">addTo</span><span class="p">(</span><span class="nx">world</span><span class="p">).</span><span class="nx">position</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">).</span><span class="nx">color</span><span class="p">(</span><span class="mh">0xFF88BB</span><span class="p">).</span><span class="nx">intensity</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="nx">tQuery</span><span class="p">.</span><span class="nx">createDirectionalLight</span><span class="p">().</span><span class="nx">addTo</span><span class="p">(</span><span class="nx">world</span><span class="p">).</span><span class="nx">position</span><span class="p">(</span> <span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">).</span><span class="nx">color</span><span class="p">(</span><span class="mh">0x4444FF</span><span class="p">).</span><span class="nx">intensity</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The fog</h2>

<p>We had a fog to the scene.
For that, we use <code>tquery.world.createfog.js</code> plugins.
It allows to create the 2 types of fog from three.js
: <a href="https://github.com/mrdoob/three.js/blob/master/src/scenes/FogExp2.js">fogexp2</a>
and
<a href="https://github.com/mrdoob/three.js/blob/master/src/scenes/Fog.js">fog</a>.
 <code>density</code> is the density of the fog. 0.01 is very light, 0.9 is almost opaque.
In general, fogs are a nice visual trick. It is rather cheap to compute
and limits the depth of what you see.
It is a nice trick to hide the &#8220;end of the world&#8221; :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">world</span><span class="p">.</span><span class="nx">addFogExp2</span><span class="p">({</span><span class="nx">density</span> <span class="o">:</span> <span class="mf">0.1</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The Columns</h3>

<h4>initialize a material</h4>

<p>We will apply it to all the columns. It is <a href="http://en.wikipedia.org/wiki/Lambertian_reflectance">lambert lighting</a>
the <code>ambient</code> is the color which gonna be combined with be combined with the ambient
light we initialized on top. <code>color</code> will be combined with the
directional lights. and <code>map</code> gives the texture to use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">material</span>   <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">ambient</span>   <span class="o">:</span> <span class="mh">0xFFFFFF</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">color</span> <span class="o">:</span> <span class="mh">0xFFAAAA</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">map</span>   <span class="o">:</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageUtils</span><span class="p">.</span><span class="nx">loadTexture</span><span class="p">(</span><span class="s1">&#39;../../assets/images/water.jpg&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Build 15 Columns</h4>

<p>loop over each column</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">15</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">){</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the cylinder. We pass some parameters to the contructor to setup
the size we see fit, and we add the material we want to apply on the
cylinder. Then we use <code>.addTo()</code> to add our object to
our <code>tQuery.World</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="kd">var</span> <span class="nx">column</span> <span class="o">=</span> <span class="nx">tQuery</span><span class="p">.</span><span class="nx">createCylinder</span><span class="p">(</span><span class="mf">0.2</span><span class="p">,</span><span class="mf">0.2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="nx">material</span><span class="p">).</span><span class="nx">addTo</span><span class="p">(</span><span class="nx">world</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Change the position of the column. We translate the column to build
a kind of alley. Thus the character will be able to run inside it :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>    <span class="nx">column</span><span class="p">.</span><span class="nx">translateX</span><span class="p">(</span><span class="nx">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">?</span> <span class="o">+</span><span class="mi">1</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">).</span><span class="nx">translateY</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nx">translateZ</span><span class="p">(</span><span class="mi">15</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="o">-</span><span class="mi">1</span><span class="o">*</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The Ground</h3>

<p>We create a large checkerboard with <code>tquery.checkerboard.js</code> plugin.
We scale the checkerboard to 100 per 100 units in the 3D world. Thus it is
quite large and disappears into the fog. It gives the cheap impression of
an infinite checkerboard.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">tQuery</span><span class="p">.</span><span class="nx">createCheckerboard</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">segmentsW</span> <span class="o">:</span> <span class="mi">100</span><span class="p">,</span>    <span class="c1">// number of segment in width</span>
</span><span class='line'>    <span class="nx">segmentsH</span> <span class="o">:</span> <span class="mi">100</span>    <span class="c1">// number of segment in Height</span>
</span><span class='line'><span class="p">}).</span><span class="nx">addTo</span><span class="p">(</span><span class="nx">world</span><span class="p">).</span><span class="nx">scaleBy</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The Character</h3>

<p>We use <code>tQuery.RatamahattaMD2Character</code> plugin. Its inherits from
 <code>tQuery.MD2Character</code> plugin. All the configuration for this particular
character <code>ratamahatta</code> is already done for you.
We attach it to tQuery world.
Additionnaly we use <code>.hookKeyboard()</code> which bind arrow key to character moving.
This function is part of
<a href="../../tquery.md2character.ratamahatta.keyboard.js">keyboard plugins for ratamahatta</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">character</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">tQuery</span><span class="p">.</span><span class="nx">RatamahattaMD2Character</span><span class="p">().</span><span class="nx">attach</span><span class="p">(</span><span class="nx">world</span><span class="p">).</span><span class="nx">hookKeyboard</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we show an example of binding the &#8220;loaded&#8221; event.
It is notified once the whole characters data are loaded (texture, mesh for animations of
body and weapons). It just display the name of the available animations.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">character</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="s2">&quot;loaded&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;list animmation&quot;</span><span class="p">,</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">character</span><span class="p">.</span><span class="nx">_meshBody</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">animations</span><span class="p">))</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We setup the user camera controls.
It will determine how the user camera will move in the world scene.
We use <code>tQuery.MD2Character.CameraControls</code> plugin made specially
for this case. With it, the camera will follow the MD2 character looking
at it from above.
world.setCameraControls(new tQuery.MD2Character.CameraControls(character));</p>

<h3>Change the Skin by Keyboard</h3>

<p>hook a function in the rendering loop. This function will be executed everytime
the scene is rendered. Within this function, we will use <code>tQuery.Keyboard</code>
plugins to test the keyboard. if the key <code>s</code> is pressed, then use <code>character.setSkin()</code>
to change the skin of the character.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">world</span><span class="p">.</span><span class="nx">loop</span><span class="p">().</span><span class="nx">hook</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">keyboard</span>  <span class="o">=</span> <span class="nx">tQuery</span><span class="p">.</span><span class="nx">keyboard</span><span class="p">();</span>   <span class="c1">// get keyboard instance</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="nx">keyboard</span><span class="p">.</span><span class="nx">pressed</span><span class="p">(</span><span class="s2">&quot;s&quot;</span><span class="p">)</span> <span class="p">){</span>      <span class="c1">// if the key &#39;s&#39; is pressed, change the skin</span>
</span><span class='line'>        <span class="nx">character</span><span class="p">.</span><span class="nx">setSkin</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="mi">5</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>So we have seen what is possible to do with <code>tquery.md2character</code> and 50lines of javascript.
It is a rather short code for what you got on the screen, if you ask me.
Btw all that released under MIT license.
I think i like the <strong>code walkthru</strong> format.
I find it efficient to describe tQuery examples and fast for me to generate.
It is directly derived from <a href="http://jashkenas.github.com/docco/">annoted doc format</a>
as you can see <a href="http://learningthreejs.com/data/2012-05-04-tquery-md2character-a-plugin-for-doom-characters/examples/docs/">here</a>.
I will likely do more in the future.</p>

<p>That&#8217;s all folks. Have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Augmented Reality 3D Pong]]></title>
    <link href="http://learningthreejs.com/blog/2012/05/02/augmented-reality-3d-pong/"/>
    <updated>2012-05-02T13:38:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2012/05/02/augmented-reality-3d-pong</id>
    <content type="html"><![CDATA[<p>This post presents a livecoding screencast of <strong>Augmented Reality 3D Pong</strong>.
This is an experiment to use <a href="https://github.com/jeromeetienne/augmentedgesture.js">augmented gestures</a>
as a way to interact with game. So i picked a game classic <a href="http://en.wikipedia.org/wiki/Pong">&#8220;pong&#8221;</a>.
We gonna learn how to code a pong in augmented reality with webgl. The result code
is only
<a href="https://github.com/jeromeetienne/augmentedgesture.js/blob/master/examples/augmentedpong/index.html">100lines</a>!!
Nice for augmented reality + webgl + a game :)</p>

<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/ZTwhHwAHc3c" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<p>But First&#8230; What is <em>augmented gestures</em> ?
I made <a href="https://github.com/jeromeetienne/augmentedgesture.js">augmentedgesture.js</a>.
This is a library which use <a href="http://dev.w3.org/2011/webrtc/editor/getusermedia.html">getUserMedia</a>
and <a href="http://www.webrtc.org/">WebRTC</a> to grab the webcam.
It analizes the image with <a href="https://github.com/jeromeetienne/imageprocessing.js">imageprocessing.js</a>
and extract the location of flashy balls.
I presented it first at <a href="http://www.web-5.org/">Web-5 conference</a> with me punching
Doom characters in augmented reality :)
<a href="http://www.youtube.com/watch?v=hUYM93xaIgg">&#8216;Doom: a new workout for geek?&#8217;</a> on youtube
is preview of it. For the webgl, we obviously gonna use
<a href="https://github.com/mrdoob/three.js/">three.js</a>
and
<a href="http://jeromeetienne.github.com/tquery/">tQuery</a>.</p>

<p>Controllers for the <a href="http://en.wikipedia.org/wiki/Wii_Remote">Wii</a>
or
<a href="http://us.playstation.com/ps3/playstation-move/">PS3</a> did good as game controllers.
<a href="http://en.wikipedia.org/wiki/Kinect">kinect</a>
is super cool obviously.
They all requires to buy specific hardware tho&#8230; So the money is <em>a barrier</em>.
Some even require specific installation on your computer, with code to compile.
This is <em>another barrier</em>.
<img class="left" src="http://learningthreejs.com/data/2012-05-02-augmented-reality-3d-pong/images/Household-Latex-Gloves-HY-H001-1-small.jpg">
<img class="right" src="http://learningthreejs.com/data/2012-05-02-augmented-reality-3d-pong/images/postit-small.jpg">
With augmented gestures, you dont need specific devices. I like to use objects
which are cheap and readily available in our everyday life.
Thus people got easily access to the content, in a pure web vibe.
I use children toys that i paid 3euro per ball.
Another possibility is to use <a href="http://en.wikipedia.org/wiki/Post-it_note">post it</a>.
They work well thanks to their flashy colors as you can see
in <a href="http://www.youtube.com/watch?v=k8R1y0oqiic">this video</a>.
They are available in most offices.
Another is to use <a href="http://en.wikipedia.org/wiki/Rubber_glove">dish gloves</a>. They are
readily available and cheap.</p>

<p><a href="http://jeromeetienne.github.com/augmentedgesture.js/examples/augmentedpong/">Try it</a>!
This <a href="http://www.youtube.com/watch?v=iunNd5lmAVE">screencast</a>
is a presentation on how to code
<a href="http://jeromeetienne.github.com/augmentedgesture.js/examples/augmentedpong/">augmented reality pong 3D</a>.
The code is on <a href="https://github.com/jeromeetienne/augmentedgesture.js/tree/master/examples/augmentedpong">github</a>
under <a href="https://github.com/jeromeetienne/augmentedgesture.js/blob/master/MIT-LICENSE.txt">MIT license</a>.
The slides of the presentation are
<a href="http://jeromeetienne.github.com/augmentedgesture.js/examples/augmentedpong/slides">here</a>.
Im not sure about the format of this video&#8230; the mix live coding + slides + screencast is usual.
Anyway publishing it in &#8220;publish early, publish often&#8221; mood :)</p>

<p>Enjoy</p>

<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/iunNd5lmAVE" frameborder="0" allowfullscreen></iframe>
</center>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Video Conference on Top of WebGL]]></title>
    <link href="http://learningthreejs.com/blog/2012/04/12/video-conference-on-top-of-webgl/"/>
    <updated>2012-04-12T13:20:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2012/04/12/video-conference-on-top-of-webgl</id>
    <content type="html"><![CDATA[<p>This post presents
<a href="http://webglmeeting.appspot.com">WebGL Meeting</a>,
a very simple WebGL application to do webrtc call.
It is a follow up of <a href="http://learningthreejs.com/blog/2012/02/07/live-video-in-webgl/">&#8220;Fun with live video on webgl&#8221;</a>.
It was presenting how to use the WebCam using
<a href="http://dev.w3.org/2011/webrtc/editor/getusermedia.html">WebRTC getUserMedia()</a>.
This one goes one step further and make an actual
<a href="http://www.webrtc.org/">WebRTC call</a>
displayed in a WebGL scene.</p>

<p>In fact, it has already been done a month ago! As you can see
<a href="http://www.youtube.com/watch?v=em5RWcstfI0&amp;feature=watch_response">here</a>
:)
The video from the first post, <a href="http://www.youtube.com/watch?v=vnNihxl3taE">&#8216;being on tv, watching tv&#8217;</a> has been answered
by <a href="https://plus.google.com/109216128632357967445/posts">Ethan Hugg</a> from cisco.
My very first video reponse btw! He
<a href="http://www.youtube.com/watch?v=em5RWcstfI0&amp;feature=watch_response">shows a SIP video call</a>
using an version of Chromium hacked by
<a href="https://plus.google.com/102821430095362232437/posts">Suhas Nandakumar</a>.
Definitly cool stuff!
<a href="http://webglmeeting.appspot.com">WebGL Meeting</a> is similar but run on unmodified browsers.
The
<a href="http://youtu.be/Fjb7xBnxq9k">screencast</a>
below is short demo of it.</p>

<!-- more -->




<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/Fjb7xBnxq9k" frameborder="0" allowfullscreen></iframe>
</center>


<h2>WebRTC progress</h2>

<p>Using a modified browser is cool for make nice demo like
<a href="https://plus.google.com/109216128632357967445/posts/QkFu7cxmbzi">this one</a>.
Nevertheless it reduces how widely the technology can spread.
It is now possible to do it using opensource and mainstream browsers.
This field advances so fast!</p>

<p><img class="right" src="http://learningthreejs.com/data/2012-04-12-video-conference-on-top-of-webgl/twoTVsWithWebGLTeam-small.jpg" width="320" height="240"></p>

<p><a href="http://mozillamediagoddess.org/">Mozilla team</a> is
<a href="http://hacks.mozilla.org/2012/04/webrtc-efforts-underway-at-mozilla/">working hard</a>
to make it happen as soon as possible.
It is even available on mobile with
<a href="http://weblog.bocoup.com/javascript-webrtc-opera-mobile-12/">Opera Mobile 12</a>.
Some <a href="http://www.youtube.com/watch?v=wpwjtzXgNFQ]">&#8220;protothon&#8221;</a> are happening about it.
<a href="http://www.webrtc.org/">WebRTC</a>
is on the edge but it is definitly coming hard.
The picture on the right is Chrome WebRTC team doing thumb up on
<a href="webglmeeting.appspot.com">WebGLMeeting</a>
at an WebRTC event for
<a href="http://www.ietf.org/meeting/83/index.html">IETF 83</a>
:)</p>

<h2>What about the code ?</h2>

<p><a href="https://github.com/jeromeetienne/webglmeeting">WebGLMeeting source</a>
is available on Github under MIT license.
It uses three.js to handle the WebGL.
It is the <a href="http://code.google.com/p/webrtc-samples/source/browse/trunk/apprtc/">AppRTC app</a>
mostly unmodified, with a simple WebGL skin on top.</p>

<p>A post from Chrome WebRTC team recently announced
<a href="http://www.webrtc.org/blog/sourcecodetoapprtcappspotcomexampleappavailable">&#8220;Source code to apprtc.appspot.com example app available&#8221;</a>.
The post releases the
<a href="http://code.google.com/p/webrtc-samples/source/browse/trunk/apprtc/">source</a>
on google code.
The <a href="https://apprtc.appspot.com">apprtc demo</a>
is a very simple, one-to-one, webrtc call.
Go look at the <a href="http://code.google.com/p/webrtc-samples/source/browse/trunk/apprtc/">source</a>, dont be shy :)
It is very small, the whole code client+server, is less than 15kbyte.
It is easy to understand and deploy thanks too google App Engine.</p>

<h2>Face tracker seeking love ?</h2>

<p>Surprising hey ? Well the source contains a face tracker,
<a href="http://code.google.com/p/webrtc-samples/source/browse/trunk/apprtc/html/face.html">face.html</a>.
It works rather well but it is slow. If somebody could give it more love&#8230;
It is a rather naive implementation which works well but got many rooms for speed improvement.
It could make face tracking, less clumsy than wearing augmented reality marker on top
of your head like
<a href="http://learningthreejs.com/blog/2012/03/12/augmented-reality-in-the-browser/">i did a while back</a>
:)</p>

<h2>Conclusion</h2>

<p>I got the feeling WebRTC gonna change a lot of things soon. The peer-to-peer aspect makes it super
cheap to integrate live video conferences to your own sites.</p>

<p>That&#8217;s all folks, have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tQuery WebAudio for More Realistic 3D]]></title>
    <link href="http://learningthreejs.com/blog/2012/03/20/sounds-for-more-realistic-3d/"/>
    <updated>2012-03-20T01:08:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/03/20/sounds-for-more-realistic-3d</id>
    <content type="html"><![CDATA[<p>This post is about
<a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html">Web Audio API</a>.
It is a new HTML5 api which provide great controls on the audio layer.
It is much better than the
<a href="http://www.w3.org/TR/html5/the-iframe-element.html#the-audio-element">audio tag</a>.
It is more suitable for games or music software.
As 3D lovers, the one feature that we care about is
<a href="http://en.wikipedia.org/wiki/3D_audio_effect">audio spacialization</a>.
This makes Web Audio a complement to webgl.
It implements positional sounds, so you
get
<a href="http://en.wikipedia.org/wiki/Panning_(audio)">panning</a>,
<a href="http://en.wikipedia.org/wiki/Doppler_effect">dopler</a>
and all.
It makes the scene so much more realistic.</p>

<p>The user tends to associate 3D to reality, so efficient 3D is a lot about realism.
The brain identifies 2D as artificial while 3D seems immediatly more natural.
Anything which appears close to reality increase this effect.
Feeding this illusion creates a more immersive experience to the user.
Realistic physics is one (stay tuned :).
Web Audio audio spacialization is another.</p>

<p>The
<a href="http://youtu.be/QjRF0_KENQ8">screencast</a>
below is a live coding session using <code>tQuery.WebAudio</code>.
If you want, you can experiment with this code in our playground. Just click
<a href="http://bit.ly/GApgWg">here</a>
and start coding :)</p>

<!-- more -->




<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/QjRF0_KENQ8" frameborder="0" allowfullscreen></iframe>
</center>


<h2>Background on WebAudio API</h2>

<p>To learn about WebAudio API is a large subject.
It is out of the scope of this introduction.
You can refere to many dedicated tutorials tho.
The <a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html">specification</a>
itself is clear and very readable.</p>

<p>You can find more comprehensive documentation at <a href="html://html5rocks.com">html5rocks</a>.
It contains several very usefull tutorials to learn Web Audio API.
They go from
<a href="http://www.html5rocks.com/en/tutorials/webaudio/intro/">&#8220;Getting started with the web audio API&#8221;</a>
to
<a href="http://www.html5rocks.com/en/tutorials/webaudio/positional_audio/">&#8220;mixing positional audio and webgl&#8221;</a>
or
<a href="http://www.html5rocks.com/en/tutorials/webaudio/games/">&#8220;developing game audio&#8221;</a>.
If you want, you can find demos in
<a href="http://chromium.googlecode.com/svn/trunk/samples/audio/index.html">chromium samples</a>.</p>

<p>Now let&#8217;s start coding :)</p>

<h2>Let&#8217;s get Started</h2>

<p>First you need to enable WebAudio into your world.
Thus you will be able to play sound in it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">world</span><span class="p">.</span><span class="nx">enableWebAudio</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that the world is able to do sound, let&#8217;s create one</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">sound</span> <span class="o">=</span> <span class="nx">tQuery</span><span class="p">.</span><span class="nx">createSound</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to load a sound file and to start playing it. The callback
is notified when the file is downloaded. At this point, the sound
it ready to play.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">sound</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="s1">&#39;techno.mp3&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sound</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">sound</span><span class="p">.</span><span class="nx">play</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to know more, the full API is documented
<a href="http://jeromeetienne.github.com/tquery/docs/symbols/tQuery.WebAudio.Sound.html">here</a>
and
<a href="http://jeromeetienne.github.com/tquery/docs/symbols/tQuery.WebAudio.html">here</a>
thanks to jsdoc.</p>

<h2>Spacialization and Animation</h2>

<p>Now that we can play a sound, what else can we do ? One definitively interesting part for
<a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html">webaudio API</a>
is the ability to spacialize the sound.
The easiest way to do that is to use <code>.follow()</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">sound</span><span class="p">.</span><span class="nx">follow</span><span class="p">(</span><span class="nx">object3d</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want more controls, you can check
 <code>.updateWithObject3d()</code> or <code>.updateWithMatrix4()</code>.
You may want to animate your 3D object based on the sound you hear.
For that, a simple function <code>.amplitude()</code> has been written.
It is likely a naive implementation but it does the trick, i think.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">amplitude</span> <span class="o">=</span> <span class="nx">sound</span><span class="p">.</span><span class="nx">amplitude</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>It returns an average of low frequencies of the sound.
Note that i dunno if it is the proper term in audio world.
Most likely not :) If you know the proper term, please leave a comment.</p>

<h2>Want more info ?</h2>

<p>You get two examples in
<a href="https://github.com/jeromeetienne/tquery/tree/master/plugins/webaudio/examples">the source</a>.
The
<a href="http://jeromeetienne.github.com/tquery/plugins/webaudio/examples/">minimal one</a>
simply play a sound.
The other is more interactive. It is the
<a href="http://jeromeetienne.github.com/tquery/plugins/webaudio/examples/playground">playground</a>.
It allows to play with various parameters.
tQuery API documentation is provided via
<a href="http://code.google.com/p/jsdoc-toolkit/">jsdoc</a>.
You can find the whole API
<a href="http://jeromeetienne.github.com/tquery/">here</a>.
The plan is to do the same for the plugins.</p>

<p>So for tQuery WebAudio plugin, you get API documentation of each class: the main class
<a href="http://jeromeetienne.github.com/tquery/docs/symbols/tQuery.WebAudio.html">tQuery.WebAudio</a>
and the
<a href="http://jeromeetienne.github.com/tquery/docs/symbols/tQuery.WebAudio.Sound.html">Sound class</a>.
You can even check the
<a href="http://jeromeetienne.github.com/tquery/docs/symbols/tQuery.WebAudio.NodeChainBuilder.html">Node chain builder</a>
doc if you want to go deep and configure your own audio nodes chain :)</p>

<h2>Conclusion</h2>

<p>Ok so now you can play sounds in your 3D scene. You can make the sound follows a given
object3d with realistic sound spatialization. All that in just a few lines. Rather cool
if you ask me :)
<a href="http://en.wikipedia.org/wiki/Winamp">Winamp</a> effects are back !!
Later i will likely implement
click detection as seen
<a href="http://www.html5rocks.com/en/tutorials/webaudio/games/#toc-clip-detect">here</a>
and environmental effect like &#8216;cathedral&#8217;, &#8216;telephone&#8217; etc&#8230;
as seen
<a href="http://www.html5rocks.com/en/tutorials/webaudio/positional_audio/#toc-enveffects">here</a>.</p>

<p>I love how sound make our 3D scene more realistic. That&#8217;s all for today, have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Augmented Reality in the Browser]]></title>
    <link href="http://learningthreejs.com/blog/2012/03/12/augmented-reality-in-the-browser/"/>
    <updated>2012-03-12T11:36:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/03/12/augmented-reality-in-the-browser</id>
    <content type="html"><![CDATA[<p>This post is about augmented reality in the browser.
In a recent post, we saw that it is now possible to
<a href="http://learningthreejs.com/blog/2012/02/07/live-video-in-webgl/">have live video in webgl</a>
with
<a href="http://www.webrtc.org/">WebRTC</a>.
Due to this,
<a href="http://en.wikipedia.org/wiki/Augmented_reality">augmented reality</a>
is under the spotlight. Recently
<a href="http://www.html5rocks.com/">html5rock</a> published a
tutorial
by
<a href="http://www.html5rocks.com/en/profiles/#ilmari">ilmari heikkinen</a>
about
&#8221;<a href="http://www.html5rocks.com/en/tutorials/webgl/jsartoolkit_webrtc/">writting augmented reality application using jsartoolkit</a>&#8221;.
Ilmari is
<a href="https://plus.google.com/115293744081058969329/about">google devrel for webgl</a>
and the author of
<a href="http://github.com/kig/JSARToolKit">JSARToolKit</a>
too. So we are in good hands :)
The tutorial even include a part about binding it with
<a href="https://github.com/mrdoob/three.js/">three.js</a>.
I took this nice tutorial and packaged the code even easier to reuse.</p>

<!-- more -->




<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/rzLuJxTraos" frameborder="0" allowfullscreen></iframe>
</center>


<p><img class="right" src="http://learningthreejs.com/data/2012-03-12-augmented-reality-in-the-browser/images/marker-small.png"></p>

<p><a href="http://jeromeetienne.github.com/tquery.jsartoolkit/">Try this demo</a>.
If you got <a href="http://www.webrtc.org/running-the-demos">WebRTC is available</a> in your browser, take
<a href="http://jeromeetienne.github.com/tquery.jsartoolkit/marker/marker.png">this marker</a>,
and put it in front on your webcam.
It is the same you see on the right.
It is best to print it on paper.
If you can&#8217;t, point your phone to
<a href="http://jeromeetienne.github.com/tquery.jsartoolkit/marker">this page</a> instead.
Phone screens tend to reflect lights from your environment tho. They may
reduce the accuracy of the marker detection.</p>

<p>Now let&#8217;s see how you can to use all this to build your own demos :)</p>

<h2>You Include it</h2>

<p>First you include it as usual in your page. The code is available
<a href="https://github.com/jeromeetienne/tquery.jsartoolkit">here</a>.
Note that
<a href="http://github.com/kig/JSARToolKit">JSARToolKit</a>
is released under GPL, so some restrictions apply.
The threex is under MIT license as usual.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;JSARToolKit.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;threex.jsartoolkit.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>You Initialize It</h2>

<p>Once you get the code, you instanciate the object like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">threexAR</span>   <span class="o">=</span> <span class="k">new</span> <span class="nx">THREEx</span><span class="p">.</span><span class="nx">JSARToolKit</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">srcElement</span>  <span class="o">:</span> <span class="nx">srcElement</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">threshold</span>   <span class="o">:</span> <span class="nx">threshold</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">callback</span>    <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>srcElement</code> may be a
<a href="http://en.wikipedia.org/wiki/HTML5_video">video</a>, an
<a href="http://www.w3.org/TR/html401/struct/objects.html#h-13.2">image</a>
or a
<a href="http://www.w3.org/TR/html5/the-canvas-element.html">canvas</a>.
When the video is shoot in a uncontrolled environement,
the marker detection may be less reliable, due to variations of lighting.
 <code>threshold</code> is a value between 0 and 255 to adapt your detection to those variations.
To detect the augmented reality markers in the <code>srcElement</code>, just use this line in your
rendering loop.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">threexAR</span><span class="p">.</span><span class="nx">update</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>No rocket science here.</p>

<h2>You Use It</h2>

<p>During <code>.update()</code>, the callback is notified with events.
They describe the markers present on the srcElement.
Each event got various fields:
A <code>.markerId</code> which tell you which marker has been recognized.
The
<a href="http://jeromeetienne.github.com/tquery.jsartoolkit/marker">one used above</a>
is the <em>64</em>. You can find the whole list
<a href="https://github.com/kig/JSARToolKit/tree/master/demos/markers">in JSARToolKit repository</a>.</p>

<p>The <code>.type</code> field describe what is happening to this marker.
It may be <em>create</em>, <em>update</em> or <em>delete</em>.
<em>create</em> if the marker has just been detected,
<em>update</em> if the marker was present before.
and <em>delete</em> if the marker is no more present.
Rather obvious :)
The <code>.matrix</code> field is a
<a href="https://github.com/mrdoob/three.js/blob/master/src/core/Matrix4.js">THREE.Matrix4</a>.
It is a transform which matches the position of the marker in space.</p>

<h2>Conclusion</h2>

<p>So now we can do augmented reality in a browser.
The code of the demo is <a href="https://github.com/jeromeetienne/tquery.jsartoolkit">here</a>.
Up to us to find actual application of this technology.
Currently most browsers with webcam are running on desktop/laptop tho.
As most their webcam is directly attached to screens, It limits the flexibility of
what you could put on front of the camera.
As for mobile, only opera 12 is currently the only mobile browser able
to read the webcam.</p>

<p>That&#8217;s all folks. Have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tQuery v0 - Let's get started]]></title>
    <link href="http://learningthreejs.com/blog/2012/03/05/tquery-version-0/"/>
    <updated>2012-03-05T10:42:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/03/05/tquery-version-0</id>
    <content type="html"><![CDATA[<p>This post is an update on
<a href="https://github.com/jeromeetienne/tquery">tquery</a> progress.
<a href="http://learningthreejs.com/blog/categories/tquery/">Our previous posts</a>
were previews,
for example
<a href="http://learningthreejs.com/blog/2012/02/15/valentine-card-in-tquery/">valentine card in tQuery</a>
or
<a href="http://learningthreejs.com/blog/2012/02/27/linkify-tquery-extension/">linkify, a tQuery extension</a>.
This post is the release of <em>version 0</em>.
It will walk you thru the website and shows how to run your first tQuery project
with the boilerplate.
You should be able to play with tQuery after that :)</p>

<p>Ok It is still experimental.
I have been paddling hard to make it usable by other people tho.
The <a href="http://jeromeetienne.github.com/tquery/www/playground/">playground</a>
is the easiest way to start experimenting. It is all online.
no install, no download, simple and understandable.
tQuery code is all on <a href="https://github.com/jeromeetienne/tquery">github repository</a>.
The
<a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=iby6kijX5Zw">screencast</a>
below will walk you thru the
<a href="http://jeromeetienne.github.com/tquery/www/">website</a>.</p>

<!-- more -->




<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/iby6kijX5Zw" frameborder="0" allowfullscreen></iframe>
</center>


<h2>Solid Ground to Build On</h2>

<p>I would like tQuery to be a solid ground. Thus people can easily build
their three.js extensions on top of it. So the code is
documented, tested and performance is monitored. Here is some principles that
i consider important for tQuery.
Note that those principles are the theory.
It doesnt imply i implement them well in practice :)</p>

<p><strong>Code must be tested</strong>. It helps detect bugs earlier.
Our <a href="http://jeromeetienne.github.com/tquery/tests/">tests</a>
are done with
<a href="http://visionmedia.github.com/mocha/">mocha</a>.
<strong>API must be documented</strong>. It helps new users to use the library.
<a href="http://jeromeetienne.github.com/tquery/docs/">API documentation</a>
is done with
<a href="http://code.google.com/p/jsdoc-toolkit/">jsdoc</a>.
<strong>Performance must be monitored</strong>. Thus developpers are immediatly aware of performance
change when the code is modified.
Our
<a href="http://jeromeetienne.github.com/tquery/bench/">benchmarks</a>
are done with
<a href="http://benchmarkjs.com/">benchmark.js</a>
and displayed by
<a href="https://github.com/jeromeetienne/benchrunner">benchrunner</a>.</p>

<h2>How to Get Started</h2>

<p>or how to get the boilerplate :)
tQuery Boilerplate is a template to get you started. You download it and
modify it until it fits your needs. It is a fast way to start a
clean project with tquery.
The running boilerplate looks <a href="http://jeromeetienne.github.com/tqueryboilerplate/">like that</a>.
The
<a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=YOsnKMesyRk">screencast</a>
below shows how to use it.</p>

<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/YOsnKMesyRk" frameborder="0" allowfullscreen></iframe>
</center>


<h2>Running tQuery Boilerplate</h2>

<p>You can try the boilerplate online with the <a href="http://jeromeetienne.github.com/tquery/www/playground/">playground</a>.
Want to run it on your computer ?
First you get boilerplate&#8217;s files
<a href="https://github.com/downloads/jeromeetienne/tquery/tqueryboilerplate.zip">here</a>.
Then you launch the http server to serve them. Here is a little shell script which does it all for you.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -OL https://github.com/downloads/jeromeetienne/tquery/tqueryboilerplate.zip
</span><span class='line'>unzip tqueryboilerplate.zip
</span><span class='line'><span class="nb">cd </span>tqueryboilerplate
</span><span class='line'>make server
</span></code></pre></td></tr></table></div></figure>


<p>Then you open a browser on <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> to
see it running. Up to you to modify <code>index.html</code> until it fits your needs. <code>index.html</code>
looks like the code below&#8230; Quite short.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span><span class="nt">&lt;title&gt;</span>Minimal tQuery Page<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;./tquery-all.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;&lt;script&gt;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">world</span>   <span class="o">=</span> <span class="nx">tQuery</span><span class="p">.</span><span class="nx">createWorld</span><span class="p">().</span><span class="nx">boilerplate</span><span class="p">().</span><span class="nx">start</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">object</span>  <span class="o">=</span> <span class="nx">tQuery</span><span class="p">.</span><span class="nx">createTorus</span><span class="p">().</span><span class="nx">addTo</span><span class="p">(</span><span class="nx">world</span><span class="p">);</span>
</span><span class='line'><span class="nt">&lt;/script&gt;&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>This is the initial release of tQuery.
I like how it looks.
API is documented,
code is tested, and performance measured.
The code produced by the API seems short and quite understandable.
Nice foundations especially for a version 0.</p>

<p>The next step is about stabilizing tquery.js itself, cleaning it up.
I am currently quite busy doing just that.
So please dont hammer me with feature requests at the moment, i won&#8217;t have
time to handle them.
Pull requests are welcomed tho.
Things will change when tQuery core become more stable.</p>

<p>That&#8217;s all folks, have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linkify, a tQuery Extension]]></title>
    <link href="http://learningthreejs.com/blog/2012/02/27/linkify-tquery-extension/"/>
    <updated>2012-02-27T08:55:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/02/27/linkify-tquery-extension</id>
    <content type="html"><![CDATA[<p>This post is an update on
<a href="https://github.com/jeromeetienne/tquery">tquery</a> progress.
It is about <code>linkify</code>, a first experimental extension.
Thanks to it, any 3D object may become a link.
So  3D objects act as a <code>&lt;a&gt;</code> tag, i.e. the object becomes
clickable and clicking on it open a new url.
It is built on top of domEvents.
It is used to incoporate
<a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html">dom kindof events</a>
in 3D world.
We saw them a few week back in
<a href="http://learningthreejs.com/blog/2012/01/17/dom-events-in-3d-space/">&#8216;dom events in 3D space&#8217; post</a>.
Previous posts on tquery may be found <a href="http://learningthreejs.com/blog/categories/tquery/">here</a>.</p>

<!-- more -->




<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/MlW7PeuXGDM" frameborder="0" allowfullscreen></iframe>
</center>


<p>Building extensions on top of others is kinda the point of an extension system.
My dream scenario is :
(1) People do plugins for three.js, like they do in jQuery).
(2) They share their work.
(3) They build on top of each other.
(4) Loop to 1.
All in opensource spirit. All good in my book. Ok enougth talk, let&#8217;s code.</p>

<h2>Dom Events in 3D Space</h2>

<p><em>domEvents</em> have been ported to tQuery.
It is an important part because jQuery developpers use this a lot, thru
<a href="http://api.jquery.com/on/">.on()</a>/<a href="http://api.jquery.com/off/">.off()</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tQuery</span><span class="p">(</span><span class="s1">&#39;cube&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;mouseover&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;somebody put the mouse over a cube&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The supported events are click obviously,
<a href="http://www.quirksmode.org/dom/events/click.html">dblclick, mouseup, mousedown</a>
, <a href="http://www.quirksmode.org/dom/events/mouseover.html">mouseover and mouseout</a>.
It has been improved to better match
<a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html">actual dom events</a>.
The callback now receives a event object. It contains <code>.type</code> and <code>.target</code>
as described in <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-Event">dom specification</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tQuery</span><span class="p">(</span><span class="s1">&#39;.myClass&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;An event of type&quot;</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span> <span class="s2">&quot;has been trigger on &quot;</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// If you wish to stop propagation, just do </span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-bubbling">Event bubbling</a>
is now supported. So events are dispatched to the
<a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget">target</a>
and follow its parent chain upward. It is possible to cancel propagation with an usual
 <code>.stopPropagation()</code>.</p>

<h2>Linkify or How Any 3D Object May Become a Link</h2>

<p>Linkify is an experimental plugins built on top of <code>tquery.domevent</code>. It is
shown in the screencast.
It makes any 3D objects object act as a <code>&lt;a&gt;</code> tag, i.e. the object becomes
clickable and clicking on it open a new url. When the mouse is over it, an underline
is added to make it even more webpage like.
Code is rather short.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tQuery</span><span class="p">(</span><span class="s1">&#39;text&#39;</span><span class="p">).</span><span class="nx">linkify</span><span class="p">(</span><span class="s1">&#39;http://example.com&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>It has been quite time consuming to set up the basis for the project:
tests, bechmarks, docs, or plugins interdependancy resolution.
For each of those field, i had to review the various alternatives,
pick one and setting it up as properly as possible.</p>

<p>Here are the current choises, they may change in the future.
<a href="http://requirejs.org/">require.js</a> will be used for the dependancies between plugins.
Tests are done with <a href="http://visionmedia.github.com/mocha/">mocha</a>,
a javascript test framework for javascript which run in node.js and browser.
Later, we may improve that by testing the rendering output using
<a href="http://www.pixastic.com/">pixastic</a> to do
<a href="http://en.wikipedia.org/wiki/Mean_squared_error">statistical</a>
<a href="http://en.wikipedia.org/wiki/Peak_signal-to-noise_ratio">images</a>
<a href="http://en.wikipedia.org/wiki/Root_mean_square_deviation">comparison</a>.
Benchmarks are done with
<a href="http://benchmarkjs.com/">benchmarks.js</a>, a robust benchmarking library for javascript,
using
<a href="https://github.com/jeromeetienne/benchrunner">benchrunner</a>
as runner.
It is the engine behind the wellknown
<a href="http://jsperf.com/browse">jsperf</a>
site.
Inline documentation is written in <a href="http://code.google.com/p/jsdoc-toolkit/">jsdoc</a>
format using
<a href="http://www.thebrightlines.com/2010/05/06/new-template-for-jsdoctoolkit-codeview/">codeview</a>
template.</p>

<p>That&#8217;s all folks. Have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[a Valentine card in tQuery]]></title>
    <link href="http://learningthreejs.com/blog/2012/02/15/valentine-card-in-tquery/"/>
    <updated>2012-02-15T10:21:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/02/15/valentine-card-in-tquery</id>
    <content type="html"><![CDATA[<p>The <a href="http://learningthreejs.com/blog/categories/tquery/">tQuery</a> experimentation is going on.
It is a lot of fun to code :)
This post is just a short presentation of two plugins currently in incubation:
tquery.text and tquery.shape.
Yesterday was
<a href="http://en.wikipedia.org/wiki/Valentine's_Day">valentine day</a>,
so i thought it would be cool to stay in topic.
The
<a href="http://www.youtube.com/watch?v=8EHqrAXcKrY">screencast</a>
is a live coding of a
<a href="http://learningthreejs.com/data/2012-02-15-valentine-card-in-tquery/">valentine card</a> in tQuery :)</p>

<!-- more -->




<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/8EHqrAXcKrY" frameborder="0" allowfullscreen></iframe>
</center>


<h2>Let&#8217;s Write Text in 3D</h2>

<p>tQuery.text plugin writes text in 3D.
It is based on
<a href="https://github.com/mrdoob/three.js/blob/master/src/extras/geometries/TextGeometry.js">TextGeometry</a>.
Here is a simple example.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tQuery</span><span class="p">.</span><span class="nx">createText</span><span class="p">(</span><span class="s2">&quot;tQuery is Fun!&quot;</span><span class="p">).</span><span class="nx">addTo</span><span class="p">(</span><span class="nx">world</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Let&#8217;s Easily Create Shape</h2>

<p><img class="right" src="http://learningthreejs.com/data/2012-02-15-valentine-card-in-tquery/images/shape.triangle-small.png"></p>

<p>tQuery shape is made to easily build and
<a href="http://en.wikipedia.org/wiki/Extrusion">extrude</a>
shapes in javascript.
It is based on
<a href="https://github.com/mrdoob/three.js/blob/master/src/extras/core/Shape.js">THREE.Shape</a>.
tquery.shape is cool because it uses a API very similar to
<a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#complex-shapes-(paths)">canvas 2D</a>
<a href="https://developer.mozilla.org/en/Canvas_tutorial/Drawing_shapes">path</a>.
This line will build a triangle.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tQuery</span><span class="p">.</span><span class="nx">createShape</span><span class="p">().</span><span class="nx">moveTo</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">).</span><span class="nx">lineTo</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">).</span><span class="nx">lineTo</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">).</span><span class="nx">lineTo</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="left" src="http://learningthreejs.com/data/2012-02-15-valentine-card-in-tquery/images/shape.fish-small.png">
<img class="right" src="http://learningthreejs.com/data/2012-02-15-valentine-card-in-tquery/images/shape.smiley-small.png"></p>

<p>Some shapes are already available, like the triangle above, or a fish, smiley
and a heart. Here is a smiley.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">shape</span> <span class="o">=</span> <span class="nx">tQuery</span><span class="p">.</span><span class="nx">createSmileyShape</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The valentince card</h2>

<p>Last but not least, the valentine card!
<a href="http://learningthreejs.com/data/2012-02-15-valentine-card-in-tquery/">Try it out</a>!
It uses the plugins above to build an animated valentine card.
It is done with less than 20lines&#8230;
tQuery seems to produce short code.</p>

<iframe src="http://learningthreejs.com/data/2012-02-15-valentine-card-in-tquery/"
    webkitallowfullscreen mozallowfullscreen allowfullscreen 
    width="100%" height="349" frameborder="0">
</iframe>


<h2>Conclusion</h2>

<p>Today we saw 2 plugins still in progress.
tQuery experiment seems to go well for now.
The code is moving at fast pace.
I am currently experimenting with <a href="http://requirejs.org/">require.js</a>
to automatically resolve dependancies between plugins.
What&#8217;s next ? likely a series with a step by step on how to build a tunnel game.</p>

<p>That&#8217;s all folks! have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Extension System for three.js]]></title>
    <link href="http://learningthreejs.com/blog/2012/02/08/extension-system-for-three-js/"/>
    <updated>2012-02-08T15:24:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/02/08/extension-system-for-three-js</id>
    <content type="html"><![CDATA[<p>  This post an overview of a work-in-progress.
It is about an extension system on top of three.js which mimics jQuery API.
I came up with the idea while thinking about how to
trim three.js and make it easier to maintain. I have always been impressed
with jQuery plugin ecosystem. It is lively, varied,
and contains impressive specimens. I would love to have such
a rich ecosystem for three.js&#8217;s plugins.</p>

<p>  Let&#8217;s call this experiment <strong>tQuery</strong> as in &#8220;three.js + jQuery&#8221;.
It makes it easier to understand if you already known this library.
This is a v0 in the
<a href="http://catb.org/~esr/writings/homesteading/cathedral-bazaar/ar01s04.html">&#8220;publish early, publish often&#8221;</a>
vibe.
The goal of this little project is to see if we can mix
to mix three.js power with jquery API usability&#8230;
How far this concept can fly ? We will see.</p>

<p>So what do we want ? The code must make <strong>three.js easy to extend</strong>
and should <strong>mimics jQuery whenever possible</strong>.
In order to see if the system hold under load, i wrote several extensions already.
It is very early. The architecture of it all is far from stable.
Code is advancing at fast pace tho :)
The screencast below is short live coding session. Just to give an idea of the current
status.</p>

<!-- more -->




<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/Aa7sHUE224A" frameborder="0" allowfullscreen></iframe>
</center>


<h2>DOM</h2>

<p>With jQuery and the
<a href="http://en.wikipedia.org/wiki/Document_Object_Model">DOM</a>, you
get a tree of
<a href="https://developer.mozilla.org/en/DOM/element">elements</a>
from the page.
In fact, three.js got this tree as well. Surprising hey ?
We just name it a
<a href="https://github.com/mrdoob/three.js/blob/master/src/scenes/Scene.js">scene</a>
instead of a tree.
And our element are called
<a href="https://github.com/mrdoob/three.js/blob/master/src/core/Object3D.js">Object3D</a>.
But all that is just a matter of vocabulary.</p>

<p>One one hand, jquery one, you got the dom and its tree of element.
on the other hand, three.js one, you got the scene and its tree of object3D.
Same Thing!</p>

<h2>Chained API</h2>

<p>jQuery got a chained API, so tQuery got a chained API. When we said
<em>copy jQuery whenever possible</em>, we were not kidding :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tQuery</span><span class="p">(</span><span class="s1">&#39;.fooKlass&#39;</span><span class="p">).</span><span class="nx">scale</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nx">translate</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>IDs and classes</h2>

<p>They got
<a href="http://api.jquery.com/id-selector/">Ids</a>
and
<a href="http://api.jquery.com/class-selector/">classes</a>
, or more recently
<a href="http://api.jquery.com/data/">data</a>.
So we did all the same with tQuery.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">cube</span>   <span class="o">=</span> <span class="nx">tQuery</span><span class="p">().</span><span class="nx">createCube</span><span class="p">();</span>
</span><span class='line'><span class="nx">cube</span><span class="p">.</span><span class="nx">id</span><span class="p">(</span><span class="s2">&quot;myId&quot;</span><span class="p">);</span>   <span class="c1">// set the id of this element</span>
</span><span class='line'><span class="nx">cube</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;fooKlass&#39;</span><span class="p">);</span>   <span class="c1">// add &#39;fooKlass&#39; class to this cube</span>
</span><span class='line'><span class="nx">cube</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;goom&#39;</span><span class="p">,</span> <span class="s1">&#39;baa&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Selector</h2>

<p>jQuery got selectors so tQuery got selectors too.
Here are the selector based on geometry, they are similar to the
[element selector] in jQuery, e.g. <code>jQuery('span')</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tQuery</span><span class="p">(</span><span class="s1">&#39;sphere&#39;</span><span class="p">);</span>    <span class="c1">// select all objects with a sphere gemotry</span>
</span><span class='line'><span class="nx">tQuery</span><span class="p">(</span><span class="s1">&#39;cube&#39;</span><span class="p">);</span> <span class="c1">// smae with a cube gemotry</span>
</span><span class='line'><span class="c1">// and so on</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here are the one for classes and id.
Note how the syntax is similar to css selector.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tQuery</span><span class="p">(</span><span class="s1">&#39;#myId&#39;</span><span class="p">)</span>  <span class="c1">// to get the object with the &#39;myId&#39; id</span>
</span><span class='line'><span class="nx">tQuery</span><span class="p">(</span><span class="s1">&#39;.fooklass&#39;</span><span class="p">)</span> <span class="c1">// to get objects with the class &#39;fooklass&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>obvious we got compose them like with jQuery</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tQuery</span><span class="p">(</span><span class="s1">&#39;.bar.foo&#39;</span><span class="p">)</span>   <span class="c1">// objets with the class &#39;bar&#39; and &#39;foo&#39;</span>
</span><span class='line'><span class="nx">tQuery</span><span class="p">(</span><span class="s1">&#39;.bar cube&#39;</span><span class="p">)</span> <span class="c1">// objets with the class &#39;bar&#39; with a cube as descandant</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Events</h2>

<p>Obviously jQuery got events, so we got events in tQuery.
we use <em>domEvents</em> we saw a few week back in
<a href="http://learningthreejs.com/blog/2012/01/17/dom-events-in-3d-space/">&#8216;dom events in 3D space&#8217; post</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tQuery</span><span class="p">(</span><span class="s1">&#39;cube&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;mouseover&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;somebody put the mouse over a cube&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>A Basic Page</h2>

<iframe src="http://jeromeetienne.github.com/tquery/plugins/minimal/examples"
    webkitallowfullscreen mozallowfullscreen allowfullscreen 
    width="260" height="280" frameborder="0" style="float: right; margin-left: 1em;">
</iframe>


<p>This is a minimal page. the code is below, the preview on the right.
Quite short.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span><span class="nt">&lt;title&gt;</span>tQuery Basic Page<span class="nt">&lt;/title&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;tquery-bundle.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">world</span> <span class="o">=</span> <span class="nx">tQuery</span><span class="p">.</span><span class="nx">createWorld</span><span class="p">().</span><span class="nx">fullpage</span><span class="p">().</span><span class="nx">start</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">object</span> <span class="o">=</span> <span class="nx">tQuery</span><span class="p">.</span><span class="nx">createTorus</span><span class="p">().</span><span class="nx">addTo</span><span class="p">(</span><span class="nx">world</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>This was early presentation of tQuery. I like the idea, we will see how it goes.
The purpose of this experiement is to help those who know jQuery to use three.js.
So they reuse jquery syntax but inside a webgl context.
This is a very early project.
How far is it possible to push this concept of <em>&#8220;three.js power + jQuery API usuability&#8221;</em>.
It seems all very cute at first sight but only time will tell.</p>

<p>That&#8217;s all folks. More on tQuery soon. Have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fun With Live Video in WebGL]]></title>
    <link href="http://learningthreejs.com/blog/2012/02/07/live-video-in-webgl/"/>
    <updated>2012-02-07T13:41:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/02/07/live-video-in-webgl</id>
    <content type="html"><![CDATA[<p>This post is about live video in webgl.
It is possible in today browsers to read the webcam using a new feature from html5, called WebRTC.
This standard is
about real-time communications such video conferences.
It is an open source project supported by Google, Mozilla and Opera.
Quite neat hey!</p>

<p>I think live video has a lot of potential usages in 3D.
It is so cool for interactivity.
The player sees himself on the screen. It becomes part of the actions.
Quite immersive effect.
We can imagine something like <a href="http://secondlife.com/">second life</a>, where
people wander around and interact live with each other in a virtual world.
Our demo is about TV&#8230; Another obvious use may be
<a href="http://en.wikipedia.org/wiki/Reflection_(physics)">reflections</a>
like
<a href="http://en.wikipedia.org/wiki/Mirror">mirror</a>
or
<a href="http://en.wikipedia.org/wiki/Specular_reflection">water</a>.
What about your face from the webcam reflecting in water with animated waves ?
Would be nice!</p>

<!-- more -->




<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/vnNihxl3taE" frameborder="0" allowfullscreen></iframe>
</center>


<p>It is surely nice but WebRTC is still quite on the edge.
To enable webrtc on your computer, see how to
<a href="http://www.webrtc.org/running-the-demos">run webrtc demos</a>.
It is currently available only in
<a href="http://tools.google.com/dlpage/chromesxs">Canari</a>.
Mozilla people are working hard to make it happen as soon as possible.
So it may be too early to use it for &#8216;serious&#8217; things.
But way enougth to do cool experiments like the one we gonna do today :)</p>

<p><a href="http://learningthreejs.com/data/live-video-in-webgl">Try it out</a>!!
The first step will be to create a video element.
We gonna start to make it play either a normal video file
then to play video from the webcam using
<a href="https://dvcs.w3.org/hg/audio/raw-file/tip/streams/StreamProcessing.html">mediastream API</a>.
After that, we gonna map this video to a normal texture.
And we will be done !
It is that simple, now let&#8217;s get started.</p>

<h2>Let&#8217;s create the video element</h2>

<p>The
<a href="http://en.wikipedia.org/wiki/HTML5_video">video element</a>
is the DOM way to handle video in webpage.
Let&#8217;s create the video element.
Later we will use it as texture and display it in WebGL.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">video</span>      <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;video&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">video</span><span class="p">.</span><span class="nx">width</span>    <span class="o">=</span> <span class="mi">320</span><span class="p">;</span>
</span><span class='line'><span class="nx">video</span><span class="p">.</span><span class="nx">height</span>   <span class="o">=</span> <span class="mi">240</span><span class="p">;</span>
</span><span class='line'><span class="nx">video</span><span class="p">.</span><span class="nx">autoplay</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It you wish to create a video from a file webm, mp4 or ogv, just set
its <code>.src</code> property.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">video</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s2">&quot;http://example.com/supercatvideo.webm&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It wasn&#8217;t too hard, hey :) So now we know how to get a video from a file.
Let&#8217;s see if we can use the webcam and get this nice immersive effect for our
users.</p>

<h2>Let&#8217;s Use the Webcam if Available</h2>

<p>Our first step is to detect if the media stream API is available.
The following line will do the job nicely.
 <code>hasUserMedia</code> will be true if it is available, false otherwise.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">hasUserMedia</span> <span class="o">=</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">webkitGetUserMedia</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="kc">false</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If it isn&#8217;t, you may point the users to
<a href="http://www.webrtc.org/running-the-demos">this doc</a>
on how to get it
and/or using a normal video file.
Now we need to check if we can read the webcam.
For that, we use the following lines.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">navigator</span><span class="p">.</span><span class="nx">webkitGetUserMedia</span><span class="p">(</span><span class="s1">&#39;video&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stream</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">video</span><span class="p">.</span><span class="nx">src</span>    <span class="o">=</span> <span class="nx">webkitURL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Failed to get a stream due to&quot;</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>A pseudo URL will be created by <code>.createObjectURL</code>.
It would allows the video element to automagically read the webcam.
It looks a bit like that.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">blob</span><span class="o">:</span><span class="nx">http</span><span class="o">%</span><span class="mi">3</span><span class="nx">A</span><span class="c1">//learningthreejs.com/e33eb278-08a8-4052-9dca-3c7663c88bc0</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Handle the textures</h2>

<p>Now we got the <a href="https://developer.mozilla.org/En/HTML/Element/Video">video element</a> ready.
Let&#8217;s create a texture using it as source.
The last step before seeing the video moving on screen :)
Use this simple line. It is enougth.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">videoTexture</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">(</span> <span class="nx">video</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This texture is a normal texture and can be used as usual in materials.
For example, in a <a href="http://en.wikipedia.org/wiki/Lambertian_reflectance">lambert</a> material.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">material</span>   <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">map</span> <span class="o">:</span> <span class="nx">videoTexture</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>But this texture is special, it is a video. So it need to be constantly updated.
In your render loop, add those lines. They monitor the state of your video.
Every time the video got enougth data to be display, the texture is updated
and sent to the GPU.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span><span class="p">(</span> <span class="nx">video</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="nx">video</span><span class="p">.</span><span class="nx">HAVE_ENOUGH_DATA</span> <span class="p">){</span>
</span><span class='line'>  <span class="nx">videoTexture</span><span class="p">.</span><span class="nx">needsUpdate</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Now you can display your webcam inside your webgl !!
This is simple and cool.
Browser support will increase with time.
Live video is a very powerfull tool.
The image from the webcam is a normal one.
On it, you can perform
<a href="https://github.com/mrdoob/three.js/tree/master/examples/js/postprocessing">post processing</a>,
<a href="http://en.wikipedia.org/wiki/Edge_detection">edge detection</a>,
and many other crazy things. Up to you to experiment.
Let&#8217;s all for today folks, have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Casting Shadows]]></title>
    <link href="http://learningthreejs.com/blog/2012/01/20/casting-shadows/"/>
    <updated>2012-01-20T14:44:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/01/20/casting-shadows</id>
    <content type="html"><![CDATA[<p>This post is about
<a href="http://en.wikipedia.org/wiki/Shadow_mapping">shadow casting</a>,
a technique which approximates the effect you see in real life everyday.
They may be tricky to tune but they looks so good, it worths it.
Shadows are an efficient tool when you to make your scene more realistic.
We will see how they can be used inside
<a href="https://github.com/mrdoob/three.js/">three.js</a>
and see more about lights while we are at it.</p>

<p>As usual, there is a <a href="http://learningthreejs.com/data/casting-shadows/">demo</a>.
It is kept it real simple thus you can read the code more easily.
The scene is a simple object in the middle, a spotlight moving around and a plane
to receive the object shadow. The light frustum is left visible in orange.</p>

<!-- more -->




<iframe src="http://learningthreejs.com/data/casting-shadows"
    webkitallowfullscreen mozallowfullscreen allowfullscreen 
    width="100%" height="420" frameborder="0">
</iframe>


<h2>Let&#8217;s Code Shadows</h2>

<p>Casting shadows in
<a href="https://github.com/mrdoob/three.js/">three.js</a>
involves 3 parts: the
<a href="https://github.com/mrdoob/three.js/blob/master/src/renderers/WebGLRenderer.js">renderer</a>
which does the computation, the
<a href="https://github.com/mrdoob/three.js/tree/master/src/lights">lights</a>
which cast shadows, and
<a href="https://github.com/mrdoob/three.js/blob/master/src/core/Object3D.js">objects</a>
which receives lights and shadows.</p>

<h2>Set up the Renderer</h2>

<p>The renderer is the one which will compute the shadows positions for your 3D scene.
Shadow casting is quite expensive. It is only supported by
<a href="https://github.com/mrdoob/three.js/blob/master/src/renderers/WebGLRenderer.js">WebGLRenderer</a>.
It uses
<a href="http://en.wikipedia.org/wiki/Shadow_mapping">Shadow mapping</a>, a technique specific
to WebGL, performed directly on the <a href="http://en.wikipedia.org/wiki/Graphics_processing_unit">GPU</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">renderer</span><span class="p">.</span><span class="nx">shadowMapEnabled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="right" src="http://learningthreejs.com/data/casting-shadows/images/screenshot-withsoftshadow-small.png">
<img class="left" src="http://learningthreejs.com/data/casting-shadows/images/screenshot-nosoftshadow-small.png"></p>

<p>You can smooth produced shadows with <code>shadowMapSoft</code>. It default to false.
On the left, the shadow is crisp, on the right it is soft.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// to antialias the shadow</span>
</span><span class='line'><span class="nx">renderer</span><span class="p">.</span><span class="nx">shadowMapSoft</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Configure your objects</h2>

<p>For
<a href="https://github.com/mrdoob/three.js/blob/master/src/core/Object3D.js">Object3D</a>,
two parameters controls how they interact with lights and shadows.
Set <code>.castShadow</code> to true if the object occludes light, so to cast a shadow.
Set <code>.receiveShadow</code> to true if the object is supposed to receive shadows.
Both default to false</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">object3d</span><span class="p">.</span><span class="nx">castShadow</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="nx">object3d</span><span class="p">.</span><span class="nx">receiveShadow</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the configuration for the central object in the demo. It will occlude lights but
won&#8217;t be able to receive shadow. So you wont see any
<a href="http://en.wikipedia.org/wiki/Self-shadowing">self shadow</a>.</p>

<h2>Tune your Lights</h2>

<p><img class="left" src="http://learningthreejs.com/data/casting-shadows/images/light-directionallight-small.jpg">
<img class="right" src="http://learningthreejs.com/data/casting-shadows/images/light-spotlight-small.jpg" title="" ></p>

<p><a href="https://github.com/mrdoob/three.js/blob/master/src/lights/DirectionalLight.js">THREE.DirectionalLight</a>
or
<a href="https://github.com/mrdoob/three.js/blob/master/src/lights/SpotLight.js">THREE.SpotLight</a>
are able to cast shadows.
Let&#8217;s details them.
A directional light is when light rays are parallel.
A bit like when you look at the sun rays on the left.
It mostly behaves like a light source very far from us.
A spot light is when light rays seems to originate from a single point, and
spreads outward in a coned direction, like in the dance club on the right
(Images are from wikipedia).
To enable the shadow casting on a light,
just use this line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">light</span><span class="p">.</span><span class="nx">castShadow</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can tune the <code>shadowDarkness</code>.
It is the opacity of the shadow. 0 means no shadow, 1 means pure back shadow.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">light</span><span class="p">.</span><span class="nx">shadowDarkness</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="right" src="http://learningthreejs.com/data/casting-shadows/images/screenshot-shadowCameraVisible-small.png"></p>

<p>In the same vibe, it possible to show the shadow camera on the screen
with <code>shadowCameraVisible</code>.
A very usefull feature during tuning or debugging.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">light</span><span class="p">.</span><span class="nx">shadowCameraVisible</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>More of Directional Lights</h2>

<p><img class="right" src="http://learningthreejs.com/data/casting-shadows/images/screenshot-fustrum-orthographic-small.png">
<img class="left" src="http://learningthreejs.com/data/casting-shadows/images/screenshot-fustrum-perspective-small.png"></p>

<p>Additionally, when casting shadow with a
<a href="https://github.com/mrdoob/three.js/blob/master/src/lights/DirectionalLight.js">THREE.DirectionalLight</a>,
you need to setup an orthographic camera.
What is that ? it is a different form of
<a href="http://en.wikipedia.org/wiki/3D_projection">3D projection</a>.
<a href="http://en.wikipedia.org/wiki/Perspective_(graphical)">Perspective</a>
is the way we see things in real life.
So it seems more natural to us than
<a href="http://en.wikipedia.org/wiki/Orthographic_projection">orthographic projection</a>.
On the left, an illustration shows a perspective projection.
You can see what is inside the orange shape.
On the right, the same for a orthographic one.</p>

<p>Recent
<a href="https://github.com/mrdoob/three.js/commit/32b581f24fddeaf9e91b7825aa93ec0ad3a45c83">three.js r47 release</a>
includes a
<a href="http://mrdoob.github.com/three.js/examples/webgl_camera.html">very didactic example</a>
from
<a href="http://alteredqualia.com/">alteredq</a>.
Play with it, it may understand the difference between
<a href="https://github.com/mrdoob/three.js/blob/master/src/cameras/OrthographicCamera.js">orthographic</a>
and
<a href="https://github.com/mrdoob/three.js/blob/master/src/cameras/PerspectiveCamera.js">perspective</a>
cameras.
Here is a possible configuration of the frustum for the orthographic camera of our light.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">light</span><span class="p">.</span><span class="nx">shadowCameraRight</span>     <span class="o">=</span>  <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="nx">light</span><span class="p">.</span><span class="nx">shadowCameraLeft</span>     <span class="o">=</span> <span class="o">-</span><span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="nx">light</span><span class="p">.</span><span class="nx">shadowCameraTop</span>      <span class="o">=</span>  <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="nx">light</span><span class="p">.</span><span class="nx">shadowCameraBottom</span>   <span class="o">=</span> <span class="o">-</span><span class="mi">5</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>This is it, you can code shadow casting in three.js now :)
Go ahead and play with them. They are hard to master but very efficient visually.
Keep in mind that those shadows aren&#8217;t real.
They only uses
<a href="http://en.wikipedia.org/wiki/Shadow_mapping">&#8216;some tricks&#8217;</a>
to make them appears as real. And they do so in real time !!
To achieve this result, they take significant shortcuts which
produce artifacts. To avoid those require tuning and experience.</p>

<p>That&#8217;s all for today folks. Have fun.</p>
]]></content>
  </entry>
  
</feed>
