<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Three.js]]></title>
  <link href="http://learningthreejs.com/atom.xml" rel="self"/>
  <link href="http://learningthreejs.com/"/>
  <updated>2015-07-16T13:04:05+01:00</updated>
  <id>http://learningthreejs.com/</id>
  <author>
    <name><![CDATA[Jerome Etienne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hatsune Miku Dancing In Augmented Reality]]></title>
    <link href="http://learningthreejs.com/blog/2015/07/16/hatsune-miku-dancing-in-augmented-reality/"/>
    <updated>2015-07-16T08:47:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2015/07/16/hatsune-miku-dancing-in-augmented-reality</id>
    <content type="html"><![CDATA[<p>This demo shows Hatsune Miku dancing in augmented reality within
your browser! This is great and surprisingly easy to do.
All that running on your browser, based on web standards.
I did it to show it was possible to do AR within the browser. I wanted to share the code to see what you guys can do with it.</p>

<p><img class="right" src="http://learningthreejs.com/data/2015-07-16-hatsune-miku-dancing-in-augmented-reality/screenshots/screenshot-nexus9.png" width="350"></p>

<p>Best of all, it even runs on mobile phones that
support WebGL and WebRTC.
The screenshot on the right is made on a nexus.
So we can do augmented reality within the browser on mobile</p>

<blockquote><p>We can do augmented reality within the browser on currently deployed mobile phones.
There is  nothing to wait for.</p></blockquote>

<iframe src="https://vine.co/v/eApD5rPtKxT/embed/simple" width="600" height="600" frameborder="0"></iframe>


<script src="https://platform.vine.co/static/scripts/embed.js"></script>


<h2>How is it coded ?</h2>

<p>It is mainly a link of 2 parts.
First <a href="https://github.com/jeromeetienne/threex.webar">webar extensions</a>
for three.js. They bundle what is needed to handle augmented reality with three.js, from the webcam setup to the marker localisation.
Second part is the <a href="http://takahirox.github.io/three.js/examples/#webgl_loader_mmd">mmd loader</a> which loads the model. It loads the Hatsune Miku model and its animations.</p>

<p>Once you got those 2 parts, things are simple :) you just have to display your model where your marker is.
To know the tech details, you will have to dig in <a href="http://takahirox.github.io/three.js/examples/#webgl_loader_mmd">the</a>
<a href="https://github.com/jeromeetienne/threex.webar">code</a>.
I will likely talk more about AR tho.</p>

<h2>Now Let&#8217;s Do a Bit of History</h2>

<p>I did this to show it was possible to do AR within the browser and to share the code to see what you guys can do with it.
It was for a <a href="http://daqri.com/dublinhacks/">AR oriented hackathon</a> in Dublin.
It recently landed a <a href="https://twitter.com/jerome_etienne/status/572435641079877632">new job</a> at <a href="http://daqri.com">Daqri</a>. Part of my job is developer relations, so I get to help people doing AR. I love it :)</p>

<p>All the code to handle Hatsune Miku is from
<a href="https://www.linkedin.com/pub/takahiro-aoyagi/96/10a/41a">Takahiro Aoyagi</a>.
He did a <a href="http://github.io/takahirox/three.js">fork on three.js</a> to load mmd formats, the format used to store Hatsune Miku.
It may be included in three.js soon.
Here is his <a href="http://takahirox.github.io/three.js/examples/#webgl_loader_mmd">example for three.js</a>
It all started with his <a href="http://takahirox.github.io/mmd-viewer-js/">mmd viewer</a> in pure webgl.
The original contains a LOT of neat features like inverse kinetic, physics for the hair,
a toon shader to make the color more cartoonish, a edge shader to enhance the outline of the model
like a drawing.
He is doing excellent work. Check him out on twitter as <a href="https://twitter.com/superhoge">@superhoge</a>.</p>

<p>Let&#8217;s have a word about <a href="https://en.wikipedia.org/wiki/Hatsune_Miku">Hatsune Miku</a> herself.
It is such a nice story.
She is a Japanese star but she is purely virtual.
She is a humanoid persona which appears as a drawing or as a hologram.
There is no human behind, even for the voice!
When she sings, what you hear is a voice synthesizer from <a href="https://en.wikipedia.org/wiki/Crypton_Future_Media">crypton</a>
All that is crazy but true :)</p>

<p>She even does <a href="https://www.youtube.com/watch?v=pEaBqiLeCu0">concerts</a> where thousand of fans are go to see her.
Actual human fans I mean, not virtual ones.
As you can see, Hatsune Miku is no stranger to augmented reality.
I love her!</p>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/pEaBqiLeCu0" frameborder="0" allowfullscreen></iframe>


<h2>How To Run The Demo ?</h2>

<p>You may want to run this demo obviously.
Here is how to do it.
First you put the <a href="http://jeromeetienne.github.io/demo.hatsunemiku-augmentedreality">demo url</a> in your browser.
It will read your webcam using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia">getUserMedia</a>. When it asks for permission, allow it :)
Then you need to put this <a href="http://jeromeetienne.github.io/threex.webar/demo.hatsunemiku-augmentedreality/image-marker-265.html">AR marker</a> in front of the camera.
You can print it and point the camera toward the paper
or you can load the marker web page and put the phone in front of the camera.
And now you can see Hatsune Mike Dancing in Augmented Reality.</p>

<p>Now let&#8217;s look at it in action in this little screencast.</p>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/ObVR2mOM-3Y" frameborder="0" allowfullscreen></iframe>


<h2>Conclusion</h2>

<p>If you want to experiment with augmented reality and three.js, checkout <a href="https://github.com/jeromeetienne/threex.webar">threex.webar</a>.
It is so cool to make augmented reality on the web!
I hope you have as much fun as I had doing it :)
I can&#8217;t wait to see what augmented reality will do on mobile&#8217;s browsers.</p>

<p>That&#8217;s all folks. Have fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LearningThree.js News #8: Stay Tuned With Creative 3D Demos]]></title>
    <link href="http://learningthreejs.com/blog/2015/07/10/learningthree-dot-js-news-number-8-stay-tuned-with-creative-3d-demos/"/>
    <updated>2015-07-10T12:52:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2015/07/10/learningthree-dot-js-news-number-8-stay-tuned-with-creative-3d-demos</id>
    <content type="html"><![CDATA[<p>This is another post for Three.js News. In this eighth edition we are going to travel and dance with cubes, discover Swiss ground with points, and do some commuting with lines. We have a couple of educational viewers, one for asteroids and another, less space related but equally exact, for terrains. We will enjoy turning around with funky vertex and spinning helix. We will discover some beautiful models skillfully displayed in Three.js. We will also be able to measure and forecast happiness.</p>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/5vPtKBlyQsA" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h3>The Happy Forecast</h3>

<p><img src="http://learningthreejs.com/data/2015-07-10-learningthree-dot-js-news-number-8-stay-tuned-with-creative-3d-demos/screenshots/the_happy_forecast.jpg" alt="the_happy_forecast" /></p>

<p><a href="http://www.thehappyforecast.com/?utm_content=bufferdcbd0&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">The Happy Forecast</a> is a beautifully made and innovative social experiment. It was created by the team at <a href="https://twitter.com/weareclubhouse">Clubhouse</a>, an interactive design studio. In this project they measure happiness in every region and postcode of London. They did this with over a year social wellbeing research. Everything from public interactions to body language and audio factors are taken into account. You can visit their <a href="http://weareclubhouse.com/">website</a> to learn more about their cool projects</p>

<h3>Point Cloud Viewer</h3>

<p><img src="http://learningthreejs.com/data/2015-07-10-learningthree-dot-js-news-number-8-stay-tuned-with-creative-3d-demos/screenshots/point_cloud_viewer.jpg" alt="point_cloud_viewer" /></p>

<p>The <a href="http://sitn.ne.ch/lidar/">point cloud viewer</a> experiment is amazing. It  measures the exactness of land, making an accurate replica of it. They have displayed the Swiss canton of Neufchatel. You can navigate through it, keeping above ground, increasing the moving speed, flying or changing controls. The ground will materialize before your eyes.</p>

<h3>Double Helix Spin</h3>

<p><img src="http://learningthreejs.com/data/2015-07-10-learningthree-dot-js-news-number-8-stay-tuned-with-creative-3d-demos/screenshots/double_helix_spin.jpg" alt="double_helix_spin" /></p>

<p>This fun <a href="http://codepen.io/tdhooper/pen/NqyQQe">demo</a> was created by <a href="https://twitter.com/tdhooper">Thomas Hooper</a>. The helix have a predefined motion, their trajectory is spiral and never ending. You can see them entwined as snakes each with a different color, it is a very cool effect! You can see some of Thomas very artistic projects on his website <a href="http://www.stainlessvision.com/">stainless vision</a></p>

<h3>Fluuuu</h3>

<p><img src="http://learningthreejs.com/data/2015-07-10-learningthree-dot-js-news-number-8-stay-tuned-with-creative-3d-demos/screenshots/fluuu.jpg" alt="fluuu" /></p>

<p><a href="http://labs.fluuu.id/iso2/">Fluuuu</a> is a fun and rythmic demo created by <a href="https://twitter.com/silviopaganini">Silvio Paganini</a>. Silvio is a very talented developer, we featured him in previous Three.js news. In this demo, you can see cubes dancing as if to a beat. They were inspired by Conway&#8217;s game of life. You can change their size and color. Silvio did this for <a href="http://fluuu.id/">FLUUUID</a>, a London creative-tech collective that converges art and technology.</p>

<h3>Asteroid Model Viewer</h3>

<p><img src="http://learningthreejs.com/data/2015-07-10-learningthree-dot-js-news-number-8-stay-tuned-with-creative-3d-demos/screenshots/asteroid_model_viewer.jpg" alt="asteroid_model_viewer" /></p>

<p>This educational <a href="https://www.chromeexperiments.com/experiment/asteroid-viewer">demo</a> was developed by <a href="https://twitter.com/iwebst">Ian Webster</a>. We featured his Ancient Earth project, which we loved, in previous episodes. Now Ian has created an asteroid viewer with lots of models to choose from. You can see various types of asteroids; a lot of research has been put into this demo. You can even see them in wireframe mode.</p>

<h3>Metrogram3D</h3>

<p><img src="http://learningthreejs.com/data/2015-07-10-learningthree-dot-js-news-number-8-stay-tuned-with-creative-3d-demos/screenshots/metrogram_3d.jpg" alt="metrogram_3d" /></p>

<p><a href="https://www.chromeexperiments.com/experiment/metrogram3d">Metrogram3d</a> is a wildly interactive and creative demo by <a href="https://twitter.com/nulldesign">nulldesign</a>. It is a time lapse simulation of the Tokyo metro. You can see what is happening in the web of lines in real time. It makes you feel dizzy sometimes. We can realize the pace we are living at when we commute every morning&#8230;maybe we should slow down a bit!</p>

<h3>Cube Travelling</h3>

<p><img src="http://learningthreejs.com/data/2015-07-10-learningthree-dot-js-news-number-8-stay-tuned-with-creative-3d-demos/screenshots/cube_travelling.jpg" alt="cube_travelling" /></p>

<p><a href="http://codepen.io/raurir/full/IAtie/">Cube Travelling</a> is a very cool interactive demo created by <a href="https://twitter.com/raurir">Rauri</a> on Codepen.io. The effect of the cubes or bars, depending on which was you see them, is fantastic. In this version, you can change the camera perspective and view. You can also toggle the colours. The motion is very fast and the effect is enthralling. In his funky vector <a href="http://www.funkyvector.com/javascript/#">website</a> you can check out all the demos Rauri has developed.</p>

<h3>Maya models converted to Three.js</h3>

<p><img src="http://learningthreejs.com/data/2015-07-10-learningthree-dot-js-news-number-8-stay-tuned-with-creative-3d-demos/screenshots/maya_to_threejs.jpg" alt="maya_to_threejs" /></p>

<p>This <a href="https://alexstockdale.com/3D/">demo</a> was created by <a href="https://twitter.com/ALIXPLOX">Alex Stockdale</a>. You can see custom Maya models and materials beautifully and skillfully converted to Three.js. You can turn around the models set on the table, zoom in to see them more closely. There is also some great shadow casting in this demo. Alex is an interactive artist, we can see that in his <a href="https://alexstockdale.com/">portfolio</a> where he mixes code and creativity in his projects.</p>

<h3>Conclusion</h3>

<p>In this edition of Three.js News we travelled with cubes, points and lines. We discovered how happiness can be measured and forecasted in a determined region. We enjoyed dancing, spinning and converting models to Three.js. All of these projects reflect researched studies, skills and creativity, and the elliptical never ending wonderment of web 3D.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LearningThree.js News #7: Stay Tuned with Creative 3D Demos]]></title>
    <link href="http://learningthreejs.com/blog/2015/07/03/learningthree-dot-js-news-number-7-stay-tuned-with-creative-3d-demos/"/>
    <updated>2015-07-03T12:13:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2015/07/03/learningthree-dot-js-news-number-7-stay-tuned-with-creative-3d-demos</id>
    <content type="html"><![CDATA[<p>This post is part of the Three.js News series. In this episode we will see some very cool editors, we can  share assets and create WebGL experiments with. They are useful, practical and easy to use; they are also a great way to start designing your own 3D models. We will take a look at some impressive demos with cute animals, multiple icons, shaders and crazy skills. All these projects are very fun to play with!</p>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/6AXl6gwwlCc" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h3>Poonya</h3>

<p><img src="http://learningthreejs.com/data/2015-07-03-learningthree-dot-js-news-number-7-stay-tuned-with-creative-3d-demos/screenshots/poonya.jpg" alt="screen shot 2015-07-03 at 08 37 42" /></p>

<p><a href="http://community.poonya.com/156">Poonya</a> is an active community and a cool portal for sharing assets. That is, you will be able to share models, material, textures, animations and scripts with <a href="https://twitter.com/sea3dformat">SEA3D</a> Studio for web. An easy to use editor that allows you to create models and to share them with others. You have a wide range of tutorials to help you get started and discover all the functionalities. You can also take a look at all the projects, contributions from other developers.</p>

<h3>Chill de lion</h3>

<p><img src="http://learningthreejs.com/data/2015-07-03-learningthree-dot-js-news-number-7-stay-tuned-with-creative-3d-demos/screenshots/chill_the_lion.jpg" alt="screen shot 2015-07-03 at 11 39 39" /></p>

<p>Beautiful <a href="http://codepen.io/Yakudoo/pen/YXxmYR?utm_content=buffer71fab&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">demo</a> created by <a href="https://twitter.com/yakudoo">Yakudoo</a>. We saw paranoid birds in another three.js news. Now its time for the king of the jungle. You will see a very cute animation of a lion who is in desperate need of chillin&#8217; and refreshment. It must be a very warm summer day for him. By clicking you activate the ventilation and  when turning around with your mouse you make wind blow in every direction. The lion will definitely appreciate. He will actually smile.</p>

<h3>Holy Running Cow</h3>

<p><img src="http://learningthreejs.com/data/2015-07-03-learningthree-dot-js-news-number-7-stay-tuned-with-creative-3d-demos/screenshots/holy_running_cow.jpg" alt="screen shot 2015-07-03 at 11 40 36" /></p>

<p>This is another <a href="http://codepen.io/Yakudoo/pen/rVGraP">demo</a> done by Yakudoo. He really has a talent for creating fun animal characters! You can see  a very cute cow running around. When you press and drag the scene rotates, and the cow tries to pick up the pace.</p>

<h3>Mighty Fish</h3>

<p><img src="http://learningthreejs.com/data/2015-07-03-learningthree-dot-js-news-number-7-stay-tuned-with-creative-3d-demos/screenshots/mighty_fish.jpg" alt="screen shot 2015-07-03 at 11 41 24" /></p>

<p>We just love Yakudoo&#8217;s demos. This one is called <a href="http://codepen.io/Yakudoo/pen/BNNGBq">Mighty Fish</a>. In it you will see a very determined fish, swimming with or against the current. Kind of Nemo&#8217;s father when he couldn&#8217;t find Nemo. You can move your mouse to change speed and direction and see how adorably funny it is.</p>

<h3>Many Icons Using Three.js</h3>

<p><img src="http://learningthreejs.com/data/2015-07-03-learningthree-dot-js-news-number-7-stay-tuned-with-creative-3d-demos/screenshots/many_icons_using_threejs.jpg" alt="screen shot 2015-07-03 at 11 42 27" /></p>

<p>Funky <a href="http://codepen.io/clockmaker/details/gpozrX/">demo</a> created by Yasunobu Ikeda in <a href="http://codepen.io/clockmaker/">codepen.io</a>. It shows various icons and letters that come together and turn into one, flowing in a replaying cycle. It changes color every time and it sometimes gives you the impression of being inside the Matrix. This demo was created using the Time Remap effect with Three.js and TweenMax. You can visit the Clock Maker <a href="http://clockmaker.jp/labs/">website</a> to see all Yasunobu&#8217;s experiences in this interactive motion lab.</p>

<h3>Unstable Clock</h3>

<p><img src="http://learningthreejs.com/data/2015-07-03-learningthree-dot-js-news-number-7-stay-tuned-with-creative-3d-demos/screenshots/unstable_clock.jpg" alt="screen shot 2015-07-03 at 11 42 51" /></p>

<p>This one is a captivating <a href="http://freelance-html-developer.com/clock/">demo</a> and a Chrome Experiment developed by <a href="http://freelance-html-developer.com/">Tomasz Slawnikowski</a>, a freelance html developer. It measures time in an original frame. Every second is drawn according to the hour passing by. If you look a it for a while you will feel in a state of unreality, in a haze, hypnotic state. Even if it appears unstable, the clock is ticking!</p>

<h3>Crazy Skills</h3>

<p><img src="http://learningthreejs.com/data/2015-07-03-learningthree-dot-js-news-number-7-stay-tuned-with-creative-3d-demos/screenshots/crazy_skills.jpg" alt="screen shot 2015-07-03 at 11 43 42" /></p>

<p><a href="https://crazyskills.panasonic.com/en/">Crazy Skills</a> is a very cool project created by <a href="@panasonic_njr">Panasonic</a>. If you are a football fan you are definitely gonna enjoy it. It is an awesome presentation of football player <a href="@neymarjr">Neymar</a> incredible sport skills. Just in case you don&#8217;t know him, Neymar is a recognised and adored Brazilian football player who plays for FC Barcelona and is captain of the Brazilian national team. He is very talented as you can see it in this motion museum dedicated to him.  There a a set of skills you can click on and see how Neymar&#8217;s avatar plays on the field.</p>

<h3>Fiddling with shaders</h3>

<p><img src="http://learningthreejs.com/data/2015-07-03-learningthree-dot-js-news-number-7-stay-tuned-with-creative-3d-demos/screenshots/fiddling_with_shaders.jpg" alt="screen shot 2015-07-03 at 11 48 33" /></p>

<p>Very kaleidoscopic <a href="http://chrisirhc.github.io/_experiment-sand-webgl/push-field.html">experiment</a> created by <a href="https://twitter.com/chrisirhc">Chris Chua</a>. In this demo Chris plays around with shaders in WebGL to simulate force over an area. You can click and drag your mouse around to see how a trail is designed, go faster or slower. It almost resembles a small fish in the water.</p>

<h3>I&#8217;ll be back</h3>

<p><img src="http://learningthreejs.com/data/2015-07-03-learningthree-dot-js-news-number-7-stay-tuned-with-creative-3d-demos/screenshots/ill_be_back.jpg" alt="screen shot 2015-07-03 at 11 45 27" /></p>

<p>Amazing <a href="https://c1.goote.ch/b9cca08d92a744e79a6772e13d624200.scene/">project</a> brought to us by the team at <a href="https://twitter.com/GooTechnologies">Goo Create</a>. Here is another cinematic and life like demo inspired by the last Terminator film. The effects and sound intensify the experience and the ambiance around is purely immersive. On their <a href="http://goocreate.com/">website</a> you can try out their great WebGL creation tool for ads, games and interactive experiences. Their editor is impressive by its simplicity and accessibility.</p>

<h3>Conclusion</h3>

<p>In this episode of Three.js News we discovered some great ways to create 3D models and share assets. There are vast possibilities when using great editors and tools. We discovered letters and numbers that form together in time and space. We also played with fun and lovable characters and professional football skills. We hope that you will really enjoy experimenting with all these projects.</p>

<p>Stay tuned for more Three.js News. See you next time</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LearningThree.js News #6: Stay Tuned with Creative 3D Demos]]></title>
    <link href="http://learningthreejs.com/blog/2015/06/29/learningthree-dot-js-news-number-6-stay-tuned-with-creative-3d-demos/"/>
    <updated>2015-06-29T12:13:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2015/06/29/learningthree-dot-js-news-number-6-stay-tuned-with-creative-3d-demos</id>
    <content type="html"><![CDATA[<p>This post is our new edition of Three.js News. In this episode we will be amazed by cinematographic experiences and awesome effects. Some of them will even give you goosebumps or make your hairs stand on end. We will explore physics engines, blockbuster movies coming soon, particles, portfolios. We will take a look at everything from a manga universe to a world of change. There is also a show off, a very special mention to a great experience that we found, combining 3d animation, motion capture and projection. These vivid experiences are unforgettable and all too real.</p>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/mSJA2ZLWBfc" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h3>Cardboard With Oimo</h3>

<p><img src="http://learningthreejs.com/data/2015-06-29-learningthree-dot-js-news-number-6-stay-tuned-with-creative-3d-demos/screenshots/cardboard_with_oimo.jpg" alt="cardboard_with_oimo" /></p>

<p>This is a very fun and colourful <a href="http://puga.com.br/play/cardboard-oimo/">demo</a> created by <a href="https://twitter.com/marciopuga">Marcio Puga</a> using oimo.js. <a href="http://lo-th.github.io/Oimo.js/">Oimo</a> is a great physics engine developed by lo-th. In this demo you can see how the spheres change color and react when they touch each other and the surface around them. It&#8217;s very cool and you also have a view for google cardboard.</p>

<h3>Insidious movie experience</h3>

<p><img src="http://learningthreejs.com/data/2015-06-29-learningthree-dot-js-news-number-6-stay-tuned-with-creative-3d-demos/screenshots/insidious_movie_experience.jpg" alt="insidious_movie_experience" /></p>

<p>This awesome cinematographic <a href="http://www.insidious-movie.net/entertheroom/">experience</a> will make your hairs stand on end. The first two episodes of the Insidious movie saga really frightened me. I&#8217;m anxiously waiting for the new one. This demo is not reassuring. I think i&#8217;m gonna be even more scared! You explore the room around you and click on the hot spots, the story will develop with each click. The effects will have you screaming your heart out!</p>

<h3>1 Million Particles</h3>

<p><img src="http://learningthreejs.com/data/2015-06-29-learningthree-dot-js-news-number-6-stay-tuned-with-creative-3d-demos/screenshots/1million_particles.jpg" alt="1million_particles" /></p>

<p>This <a href="http://codepen.io/edankwan/pen/QbMxWp">demo</a> shows us a beautiful and subtile way of creating particles in codepen.io. Developed by <a href="https://twitter.com/edankwan">Edan Kwan</a> using curl noise and fbo on three.js. He produced a very professional and fascinating effect. You can change the color of the particles, the size, the speed.</p>

<h3>Aaron Meyers portfolio</h3>

<p><img src="http://learningthreejs.com/data/2015-06-29-learningthree-dot-js-news-number-6-stay-tuned-with-creative-3d-demos/screenshots/aaron_meyers_portfolio.jpg" alt="aaron_meyers_portfolio" /></p>

<p>In his <a href="http://aaron-meyers.com/!/">portfolio</a> <a href="https://twitter.com/aarontweets">Aaron Meyers</a> creates a very cool environment. We can see his skills as a developer in this original homepage.Turn around in the room and by clicking on each TV screen you can explore the works he has done. You can also click on Aaron himself to know a bit more about him. This is hands down one of the most creative portfolios I have seen.</p>

<h3>Realize project</h3>

<p><img src="http://learningthreejs.com/data/2015-06-29-learningthree-dot-js-news-number-6-stay-tuned-with-creative-3d-demos/screenshots/realize_project.jpg" alt="realize_project" /></p>

<p>If you liked the movie Ghost in the Shell you are going to love this <a href="http://www.realize-project.jp/">project</a> It is an homage made by true fans. <a href="https://en.wikipedia.org/wiki/Ghost_in_the_Shell">Ghost in the Shell</a> is a manga by Masamune Shirow, there was also a movie made of it. This demo captures the universe of the manga pretty well. You can turn around and decide which icon to pop-up. There are very cool neon lights in the space, it gives it kind of a Tron aspect. You can also take a look at posts on VR and AI from other news-based sites.</p>

<h3>A world of change</h3>

<p><img src="http://learningthreejs.com/data/2015-06-29-learningthree-dot-js-news-number-6-stay-tuned-with-creative-3d-demos/screenshots/a_world_of_change.jpg" alt="a_world_of_change" /></p>

<p>This <a href="http://news-lab-trends-experiment.appspot.com/">demo</a> is part of <a href="https://www.google.com/trends/">Google Trends</a>. It is a great idea for social impact. Through google search you can click on topic (recycling, energy, water, natural environment, pollution) or a city, and see how those searches reflect the way the world thinks about climate change. You can discover what certain cities are doing about the environment. It is an eye opener and a great way to encourage sustainable development</p>

<h3>Terminator Genisys</h3>

<p><img src="http://learningthreejs.com/data/2015-06-29-learningthree-dot-js-news-number-6-stay-tuned-with-creative-3d-demos/screenshots/terminator_genisys.jpg" alt="terminator_genisys" /></p>

<p><a href="http://www.terminatorgenisysmovie.co.uk/insidelook/">Terminator Genisys</a> is another successful and  cinema based demo created my <a href="https://twitter.com/ParamountUK">Paramount Pictures</a>. You can get an amazing inside of the characters by rotating the camera to explore 3d models. You can also zoom in and click on hotspots for information and videos about the movie coming soon. It is very fun.</p>

<h3>Show Off &#8220;Le Petit Chef&#8221;</h3>

<p><img src="http://learningthreejs.com/data/2015-06-29-learningthree-dot-js-news-number-6-stay-tuned-with-creative-3d-demos/screenshots/le_petit_chef.jpg" alt="le_petit_chef" /></p>

<p>Special mention to this great experience that we found. <a href="https://www.youtube.com/watch?v=yBJEP4lsRFY&amp;feature=youtu.be">Le Petit Chef</a> is a masterpiece created by the guys at <a href="http://www.skullmapping.com/">Skull Mapping</a>, <a href="http://www.filipsterckx.be/">Filip Sterckx</a> and <a href="http://www.antoon.be/">Antoon Verbeek</a>. They experimented with projection on a dinner table. Combining 3d animation and motion capture, a miniature chef turns your dish into a grill and cooks right in front of your astonished eyes. I wish I could book a place at this table! It is an awesome experience that I&#8217;m sure you will love.</p>

<h2>Conclusion</h2>

<p>In this episode of Three.js News we have seen awesome projects. All very vivid and lifelike. Some movie related and some really scary, others more realistic and down to protecting earth. They all have their own universe. We experienced physics and particles, projection and motion capture. Regardless of how or by whom they were developed, all these experiences show us what is possible to create in the amazing universe of 3D.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LearningThree.js News #5: Stay Tuned with Creative 3D Demos]]></title>
    <link href="http://learningthreejs.com/blog/2015/06/18/learningthree-dot-js-news-number-5-stay-tuned-with-creative-3d-demos/"/>
    <updated>2015-06-18T11:33:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2015/06/18/learningthree-dot-js-news-number-5-stay-tuned-with-creative-3d-demos</id>
    <content type="html"><![CDATA[<p>This post explores original demos with lots of knowledge. In this episode of Three.js News we will take a tour around 4D dimensions and creative subdivisions. We will also travel over webs of information and have fun with wildlife games. There is a lot of diversity in these projects, but one thing is for sure, they are all developed with the utmost skill and created for the maximum effect.</p>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/oSDdZyM9cYU" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h3>Paranoid vs. Shy Birds</h3>

<p><img src="http://learningthreejs.com/data/2015-06-18-learningthree-dot-js-news-number-5-stay-tuned-with-creative-3d-demos/screenshots/paranoid_vs_shy_birds.jpg" alt="screen shot 2015-06-17 at 11 00 12" /></p>

<p>This is a very fun <a href="http://codepen.io/Yakudoo/pen/LVyJXw">demo</a> created by <a href="https://twitter.com/yakudoo">Yakudoo</a> on CodePen. The bird characters are so cute. The one in the middle is the paranoid one. You can move his head around and see how he interacts with the small shy birds. The HTML, CSS and Javascript are visible on the scene.</p>

<h3>Threepark</h3>

<p><img src="http://learningthreejs.com/data/2015-06-18-learningthree-dot-js-news-number-5-stay-tuned-with-creative-3d-demos/screenshots/threepark.jpg" alt="screen shot 2015-06-17 at 11 00 12" /></p>

<p><a href="http://threepark.net/English">Threepark</a> is a cool editor developed by <a href="https://github.com/liguocn">liguocn</a>. Easy to understand and to use, great for artists and 3d lovers. You can create different models and designs. You even have a library of templates to use. Subdivide a model as many times as you like in the <a href="http://threepark.net/English/cagemodeling">cagemodeling</a> canvas. You can also store your models in the cloud and export them into 3d printing format. Great way to unleash your creativity.</p>

<h3>Parrot Hunt</h3>

<p><img src="http://learningthreejs.com/data/2015-06-18-learningthree-dot-js-news-number-5-stay-tuned-with-creative-3d-demos/screenshots/parrot_hunt.jpg" alt="screen shot 2015-06-17 at 11 00 12" /></p>

<p>Very funky retro <a href="http://parrothunt.nergal.se:8080/">game</a>, and also a Chrome Experiment, created by  Magnus Persson aka <a href="https://twitter.com/lallassu">nergal</a> . The idea is to shoot only the parrots, not the flamingos. You can move around and reload your rifle to keep shooting at your prey. Fortunately its not real hunting! You can get really serious and try to improve your score every time like I did! It&#8217;s really enjoyable and it makes you feel like a great aim.</p>

<h3>Ntype</h3>

<p><img src="http://learningthreejs.com/data/2015-06-18-learningthree-dot-js-news-number-5-stay-tuned-with-creative-3d-demos/screenshots/ntype.jpg" alt="screen shot 2015-06-17 at 11 00 12" /></p>

<p><a href="http://ntype.blue/#speed=0.015707963267948967&amp;rotationPlanes=xw,xz,yw,yz,zw&amp;fpr=100&amp;string=NTYPE&amp;drawForms=true&amp;drawTrails=false">Ntype</a> is another Chrome Experiment demo developed by <a href="https://twitter.com/kevinzweerink">Kevin Zweerink</a>. It shows us a compelling and interesting way to explore 4D. The typography is extruded into the 4d dimension. You can change the parameters and settings and customise the rotation planes. You can even modify the trails that the letters leave behind them. There are also a lot of other designs to explore in Kevin&#8217;s <a href="http://kevinzweerink.com/">homepage</a></p>

<h3>WikiGalaxy</h3>

<p><img src="http://learningthreejs.com/data/2015-06-18-learningthree-dot-js-news-number-5-stay-tuned-with-creative-3d-demos/screenshots/wiki_galaxy.jpg" alt="screen shot 2015-06-17 at 11 00 12" /></p>

<p><a href="http://wiki.polyfra.me/#">WikiGalaxy</a> is a beautiful and original demo created by <a href="https://twitter.com/WikiGalaxy">Owen Cornec</a>. This experiment takes us to a fantastic space that we actually already use everyday life. We can visualise Wikipedia as a galactic web of information. It&#8217;s a marvellous world of knowledge. There is a map where you can fly over the planets, zoom and search. Wikipedia articles are stars, interests are nebulas. Have a good time learning! You can see more WebGL visualisations  in Owen&#8217;s <a href="http://www.polyfra.me/">portfolio</a></p>

<h3>Multivers3D</h3>

<p><img src="http://learningthreejs.com/data/2015-06-18-learningthree-dot-js-news-number-5-stay-tuned-with-creative-3d-demos/screenshots/multivers3d.jpg" alt="screen shot 2015-06-17 at 11 00 12" /></p>

<p>This is the first <a href="https://multivers3d.fr/#/51184/Home.html">video game demo</a> released by the <a href="https://twitter.com/INF1N1T">multivers3d</a> team. It supports multi-users, cross platforms and it has zero install. This first episode is called Earth Creed. You are a honey bee and you need to harvest pollen and nectar from your environment. You have to use your judgement to equilibrate the balance of the ecosystem. This game will definitely make you love nature.</p>

<h3>Conclusion</h3>

<p>In this post, we discovered some varied and original demos. We traveled through a space of information and explored 4D dimensions. We also played very funky games and designed 3D models with various subdivisions. The experience each of these demos give us is unique. Keep creating such wonderful projects.</p>

<p>Stay tuned for more Three.js News. See you next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LearningThree.js News #4: Stay Tuned With Creative 3D Demos]]></title>
    <link href="http://learningthreejs.com/blog/2015/06/12/learningthree-dot-js-news-number-4-stay-tuned-with-creative-3d-demos/"/>
    <updated>2015-06-12T09:48:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2015/06/12/learningthree-dot-js-news-number-4-stay-tuned-with-creative-3d-demos</id>
    <content type="html"><![CDATA[<p>This post introduces another episode of Three.js News. In this edition we explore dynamic and constantly changing experiences. With the featured demos we will travel through time, discover new worlds and parallel universes. We will also get into fun and procedurally generated experiences that never repeat themselves twice; they are different every time, no matter how much you try them out. We will enjoy psychedelic effects and interactive experiments.</p>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/YGGoZ6mB7yE" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h3>Ancient Earth</h3>

<p><img src="http://learningthreejs.com/data/2015-06-12-learningthree-dot-js-news-number-4-stay-tuned-with-creative-3d-demos/screenshots/ancient_earth.jpg" alt="screen shot 2015-06-11 at 14 45 41" /></p>

<p><a href="http://dinosaurpictures.org/ancient-earth/#0">Ancient Earth</a> is a very educational experiment found in the dinosaur pictures <a href="http://dinosaurpictures.org/">website</a>. It is a globe of how Earth used to look like, from 20 million to 600 million years ago. There is a list where you can choose any period on the evolution of our planet. For example, when multicellular life was first developed or when plants and flowers first appear&#8230; or even jump to dinosaur extinction! You can also remove clouds to see Earth&#8217;s transformation and use the left and right keys to travel through time.</p>

<h3>Dennis</h3>

<p><img src="http://learningthreejs.com/data/2015-06-12-learningthree-dot-js-news-number-4-stay-tuned-with-creative-3d-demos/screenshots/dennis.jpg" alt="screen shot 2015-06-11 at 14 51 06" /></p>

<p><a href="http://www.dennis.video/">Dennis</a> is a very colourful generative 3D experience produced by <a href="http://aaf.nyc/">Always &amp; Forever</a> computer entertainment and presented by NHX. It is a fun music video with music from popcorn_10. Frames are created in real time. Nothing is pre-rendered. Each scene is procedurally created every time you press play. You’ll never see the same video twice. Check out the <a href="http://www.dennis.video/#about">about</a> page to see how it was developed.</p>

<h3>Growing Tree</h3>

<p><img src="http://learningthreejs.com/data/2015-06-12-learningthree-dot-js-news-number-4-stay-tuned-with-creative-3d-demos/screenshots/growing_tree.jpg" alt="screen shot 2015-06-11 at 15 05 00" /></p>

<p>This <a href="http://gregtatum.com/poems/growth/#/1-seedling">demo</a> displays the beautiful and natural growth of a tree. It was created by <a href="https://twitter.com/TatumCreative">Greg Tatum</a>. You can check out his <a href="http://gregtatum.com/category/interactive/">blog</a> to see the other works and animations he has done. It starts out at the root, from seedling to tree with small incremental additions. It shows a dynamic growth of the 3D tree structure. Nice colours and lighting make it truly mesmerising.</p>

<h3>Another End Game</h3>

<p><img src="http://learningthreejs.com/data/2015-06-12-learningthree-dot-js-news-number-4-stay-tuned-with-creative-3d-demos/screenshots/another_end_game.jpg" alt="screen shot 2015-06-11 at 15 18 01" /></p>

<p><a href="http://www.anotherend.com/">Another End</a> is a procedurally-generated game with an interesting story and a thread to follow. It was developed by Ryan Bottriell and his team. Inside the adventure, you are a player, created by Entity to reunite the 4 Glyphs which are essential to the world. You can have great powers; you can be Architect, a Protector, an Illusionist. Plus there are experimental versions to play it with Leap Motion and Occulus Rift. Follow them on <a href="https://twitter.com/anotherendgame">twitter</a> and take a look at all their developments.</p>

<h3>Simple Ball</h3>

<p><img src="http://learningthreejs.com/data/2015-06-12-learningthree-dot-js-news-number-4-stay-tuned-with-creative-3d-demos/screenshots/simple_ball.jpg" alt="screen shot 2015-06-11 at 15 29 21" /></p>

<p>Simple Ball is a traditional pinpall <a href="http://cwar.de/pinball/simpleball.html">game</a> for the web browser using Three.js. It a Chrome Experiment developed by <a href="http://cwar.de">Andreas Rominger</a>. It is very interactive and fun. You will have a very good time trying to keep the ball inside the game. The trick is to shake and tilt!</p>

<h3>Sanoran&#8217;s Valley</h3>

<p><img src="http://learningthreejs.com/data/2015-06-12-learningthree-dot-js-news-number-4-stay-tuned-with-creative-3d-demos/screenshots/sanorans_valley.jpg" alt="screen shot 2015-06-11 at 15 33 27" /></p>

<p><a href="http://www.sonorans-valley.com/">Sanoran&#8217;s Valley</a> is an exceptional experience imagined by <a href="https://twitter.com/Samsyyyy">Samuel Honigstein</a>. It is a desert vision of the city inspired by Alberts Camus quote about the big city &#8220;being the desert we should seek to remedy life in society&#8221;. Very philosophical! It has great shader effects and it actually uses Google Street View, so you can tap in any address you want and see how would it be like transformed into a desert. Check out Sam&#8217;s <a href="http://samsy.ninja/">portfolio</a> to take a look at his other creations.</p>

<h3>Box Physics</h3>

<p><img src="http://learningthreejs.com/data/2015-06-12-learningthree-dot-js-news-number-4-stay-tuned-with-creative-3d-demos/screenshots/box_physics.jpg" alt="screen shot 2015-06-11 at 15 47 59" /></p>

<p><a href="http://labs.fluuu.id/box-physics/">Box Physics</a> is a very cool and creative demo. It was developed by interactive coder <a href="https://twitter.com/silviopaganini">Silvio Paganini</a>. We can see applied physics in the boxes using <a href="http://lo-th.github.io/Oimo.js/">oimo.js</a>. They react with a click of your mouse and they change color. There is also a very cool screen effect. You can visit Silvio&#8217;s <a href="http://s2paganini.com/">website</a> to try out at all his experiments online.</p>

<h3>Magic Mirror</h3>

<p><img src="http://learningthreejs.com/data/2015-06-12-learningthree-dot-js-news-number-4-stay-tuned-with-creative-3d-demos/screenshots/magic_mirror.jpg" alt="screen shot 2015-06-11 at 15 55 23" /></p>

<p><a href="http://www.alexeyrudenko.com/cc/js/030_triangles/">Magic Mirror</a> is another Chrome Experiment created by <a href="http://www.alexeyrudenko.com/">Alexey Roudenko</a>. It is an original psychedelic artwork demo. It is actually web camera triangulation, great for animation in a game. It is amazingly cool, you can use your webcam and see yourself in kind of a distorted reality. You can change the opacity and effect of the triangles and see the cool effect it has.</p>

<h3>Conclusion</h3>

<p>In this blogpost we explored some very dynamic and exciting demos. We experienced ever-changing worlds where 3D is ever-present. We played some immersive games and enjoyed fun and altering animations. I hope you liked them as much as we did.</p>

<p>Stay tuned for more Three.js News. See you next time</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LearningThree.js News #3: Stay Tuned with Creative 3D Demos]]></title>
    <link href="http://learningthreejs.com/blog/2015/06/05/learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/"/>
    <updated>2015-06-05T15:47:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2015/06/05/learningthree-dot-js-news-stay-tuned-with-creative-3d-demos</id>
    <content type="html"><![CDATA[<p>This post presents another edition of Three.js News. In this episode we have gathered some wonderful demos, web documentaries and very artistic experiences. They have all different genres but each of them show a wide range of skills.</p>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/cC5e8kONBzo" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<p>It is inspiring to see how many great demos are out there in the 3D world. I wish I could make them fit all in one episode. But it&#8217;s okay, I&#8217;ll do my best to keep up with your creative minds.</p>

<h3>Nightmarish Tentacles</h3>

<p><img src="http://learningthreejs.com/data/2015-06-05-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/screenshots/nightmarish_tentacles.png" alt="screen shot 2015-06-05 at 11 34 41" /></p>

<p>This is <a href="http://grgrdvrt.com/miam/sweet_dream/">demo</a> is so cool. It was created by the imagination of <a href="https://twitter.com/grgrdvrt">Gregoire Divaret</a> and it is fantastically twisted. It is perfect for a Halloween night! You can see the tentacles moving like snakes entwined with each other. Zoom in very close in full screen for a great fright.</p>

<h3>Generative Tree</h3>

<p><img src="http://learningthreejs.com/data/2015-06-05-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/screenshots/generative_tree.png" alt="screen shot 2015-06-05 at 11 36 03" /></p>

<p>This is another <a href="http://grgrdvrt.com/miam/treee/">demo</a> developed by Gregoire Divaret. The tree grows from the beginning and expands into shape. It is beautifully designed and it has a really nice lighting. You can turn around and see it from different angles.  Be sure to check out Gregoire&#8217;s <a href="http://grgrdvrt.com/">website</a> for all his cool experiences with WebGL</p>

<h3>The Fallen of WWII</h3>

<p><img src="http://learningthreejs.com/data/2015-06-05-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/screenshots/the_fallen_wwii.png" alt="screen shot 2015-06-05 at 11 38 55" /></p>

<p>The Fallen of WWII or <a href="http://www.fallen.io/ww2/#">fallen.io</a> is a data drive documentary about war and peace. Directed and coded by <a href="https://twitter.com/neilhalloran">Neil Halloran</a> it examines the human cost of the second World War. It can be watched on video through mobile, Apple TV and Chromecast. You can also watch the interactive version which allows you to pause at key moments in the video to interact with charts and numbers. This touching project is a way to remember and never forget the devastating consequences of war.</p>

<h3>Gugelmann Galaxy</h3>

<p><img src="http://learningthreejs.com/data/2015-06-05-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/screenshots/gugelmann_galaxy.png" alt="screen shot 2015-06-05 at 11 40 57" /></p>

<p><a href="http://www.mathiasbernhard.ch/gugelmann/">Gugelmann Galaxy</a> is a very artistic experience created by <a href="https://twitter.com/w0rb1t">Matthias Bernhard</a>. This awesome demo is a great way to explore the image galaxy live in the browser with three.js. It is very educational, you can arrange the paintings by color, technique or description. Bonus points since it also has a Google cardboard version. Don&#8217;t forget to check out the <a href="http://www.mathiasbernhard.ch/gugelmann-galaxy/">blogpost</a> to see how it was developed.</p>

<h3>Procedural Star</h3>

<p><img src="http://learningthreejs.com/data/2015-06-05-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/screenshots/procedural_star.png" alt="screen shot 2015-06-05 at 11 42 46" /></p>

<p>Procedural Star is an excellent <a href="http://bruno-simon.com/lab/procedural-star/">demo</a> with great colors and effects. It was designed by <a href="https://twitter.com/bruno_simon">Bruno Simon</a>. The star is great for any space game, you can turn it around, zooming in and out and see the smooth movements it has. You can also change the parameters to customise it as much as you like. Bruno&#8217;s <a href="http://bruno-simon.com/">website</a> is filled with other amazing projects he has worked on.</p>

<h3>Enough</h3>

<p><img src="http://learningthreejs.com/data/2015-06-05-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/screenshots/enough.png" alt="screen shot 2015-06-05 at 11 43 35" /></p>

<p><a href="https://vimeo.com/129003739">Enough</a> is an interactive picture book created by Isaac Cohen or <a href="https://twitter.com/cabbibo">Cabbibo</a>. It is a beautifully artistic and immersive adventure into a world of dreams. It makes the technology appear as if it were alive. It is wonderfully designed and it has a oneiric sense to it. In Cabbibo&#8217;s <a href="http://cabbi.bo/">website</a> you can see all his other creations and be amazed by his skill.</p>

<h3>Experiment for Google IO 2015</h3>

<p><img src="http://learningthreejs.com/data/2015-06-05-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/screenshots/experiment_google_io.png" alt="screen shot 2015-06-05 at 11 46 03" /></p>

<p>This is a very fun and playful <a href="http://www.clicktorelease.com/code/io15/">demo</a> coded by <a href="https://twitter.com/thespite">Jaume Sanchez</a> for the latest Google IO. You play with the Is and the O by clicking on them. They react, with very good physics, by jumping around. There is also an option to change the camera and look at it from different angles.</p>

<h3>Pregoneros de Medellin</h3>

<p><img src="http://learningthreejs.com/data/2015-06-05-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/screenshots/pregoneros_de_medellin.png" alt="screen shot 2015-06-05 at 11 47 45" /></p>

<p><a href="http://www.pregonerosdemedellin.com/#en">Pregoneros de Medellin</a> is a breathtaking and very interactive street walk experience developed by <a href="https://twitter.com/tibbb">Thibault Durand</a> and his talented team. It was created using a GoPro and Javascript. You can read the <a href="https://medium.com/@tibbb/how-we-created-an-immersive-street-walk-experience-with-a-gopro-and-javascript-f442cf8aa2dd">post</a> on how it was produced. In this web documentary you walk around Medellin city in Colombia and listen to the street-vendors cries, which are very traditional in the cultural Colombian landscape. You can click on each vendor to watch a video of his typical day to day life. I just loved it!</p>

<h3>Conclusion</h3>

<p>In this blogpost we talked about some wonderful demos and very artistic projects. We were very impressed by the rich experiences that lead to web documentaries and interesting publications. All these demos are very interactive and show the amazing things we can do with 3D on the web.</p>

<p>We also want to thank our readers. We love it when developers out there send us their stuff, new and creative demos that we can share.</p>

<p>Stay tuned for more Three.js news. See you next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LearningThree.js News #2: Stay Tuned with Creative 3D Demos]]></title>
    <link href="http://learningthreejs.com/blog/2015/05/27/learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/"/>
    <updated>2015-05-27T15:53:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2015/05/27/learningthree-dot-js-news-stay-tuned-with-creative-3d-demos</id>
    <content type="html"><![CDATA[<p>This post is about Three.js News, a fun and brief newsletter about demos in three.js. The idea is to present the new and interesting 3D creations on the web. Our goal is to keep the audience up to date and tuned with Three.js most recent developments. We will upload videos and collect information of the latest demos. Let&#8217;s take a look at this episode</p>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/DgPv6IIVDFQ" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<p>In this second edition of Three.js news we have collected very creative and funky demos. Some of them  were developed for both desktop and mobile phones. Some are games, some are just pure fun. Using the latest technologies, they are all a clear example of what&#8217;s possible to do with web 3D today.</p>

<h2>Inconvergent Waves</h2>

<p><img src="http://learningthreejs.com/data/2015-05-27-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/inconvergent_waves.png" alt="screen shot 2015-05-26 at 10 42 57" />
<a href="http://inconvergent.net/waves/">Inconvergent waves</a> is a nicely done demo by <a href="https://twitter.com/inconvergent">Anders Hoff</a>. You can create waves by moving your mouse around. It&#8217;s like making ripples on the water. This technique is actually used as a method for generating landscapes. It&#8217;s very reactive and the movements are smooth and natural. Visit the inconvergent <a href="http://inconvergent.net/">website</a> to check out the developing process.</p>

<h2>Interactive WebGL globes</h2>

<p><img src="http://learningthreejs.com/data/2015-05-27-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/interactive_webgl_globe.png" alt="screen shot 2015-05-26 at 10 57 30" />
<a href="http://projects.delimited.io/webgl-globes/example_4_interactive_globe.html">Interactive WebGL</a> globes is a great way to improve your geography skills! This very educational and fun demo is a creation of <a href="https://twitter.com/delimitedtech">Steve Hall</a>. You mouseover the countries that you want and turn around by clicking on the interactive globe. Don&#8217;t hesitate to read Steve&#8217;s <a href="http://www.delimited.io/blog/2015/5/16/interactive-webgl-globes-with-threejs-and-d3">blogpost</a> to know more about his implementation of D3 and Three.js.</p>

<h2>Spiral Circle</h2>

<p><img src="http://learningthreejs.com/data/2015-05-27-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/spiral_circle.png" alt="screen shot 2015-05-26 at 10 58 52" /></p>

<p><a href="http://projects.delimited.io/subunit/demos/spiral-circle-v2.html">Spiral Circle</a> is another cool demo created by Steve Hall. It is based on <a href="http://bl.ocks.org/mbostock">mbostock’s</a> <a href="http://bl.ocks.org/mbostock/2472e84f78fd03df443f">example</a>. It is extremely hypnotic and it has kind of a disturbing texture, like the skin of a snake monster or something. You can pan to the left to divide the circle in two. Be careful, it&#8217;s alive!</p>

<h2>Hatsune Miku</h2>

<p><img src="http://learningthreejs.com/data/2015-05-27-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/hatsune_miku_threejs.png" alt="screen shot 2015-05-26 at 11 00 53" /></p>

<p><a href="http://en.wikipedia.org/wiki/Hatsune_Miku">Hatsune Miku</a> is a Three.js example <a href="http://takahirox.github.io/three.js/examples/webgl_loader_mmd.html">demo</a> done by <a href="https://twitter.com/superhoge">takahiro</a>. It&#8217;s a very fun demo even if takahiro is still working on improving it. This very cute blue hair girl is Japan&#8217;s sweetheart. She dances in holograms and does <a href="https://www.youtube.com/watch?v=YSyWtESoeOc">live concerts</a>&#8230;yeah i&#8217;m not kidding! We are even trying to bring her to life in <a href="https://twitter.com/LearningThreejs/status/600740523574439937">AR</a>.</p>

<h2>Race Against Oblivion</h2>

<p><img src="http://learningthreejs.com/data/2015-05-27-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/race_against_oblivion.png" alt="screen shot 2015-05-26 at 10 59 58" /></p>

<p>Race against oblivion or <a href="http://www.timeshift165.com/game">Timeshift</a> is an  original game made by <a href="http://www.ultranoir.com/en/#!/home/">Utranoir</a>. Inspired on the story of a unique French car : The Delahaye 165, you have to race against time to save this one of a kind automobile. The presentation of the game is outstanding, it has great design, background and effects. Bonus, it can be played on both desktop and mobile!</p>

<h2>A Particle Dream</h2>

<p><img src="http://learningthreejs.com/data/2015-05-27-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/a_particle_dream.png" alt="screen shot 2015-05-26 at 11 03 05" />
A Particle dream is a <a href="https://www.chromeexperiments.com/experiment/particle-dream">demo</a> created by <a href="http://www.iamnop.com/">Nop Jiarathanakul</a>. It is one of the latest Chrome experiments. It is a wonderful simulation of particles moving smoothly around. You can choose the shape you want the particles to morph into. The music and the ambiance mix together for a very relaxing result. Oh and you can actually use <a href="https://www.leapmotion.com/">Leap Motion</a> in this demo.</p>

<h2>Our Galactic Neighbourhood</h2>

<p><img src="http://learningthreejs.com/data/2015-05-27-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/our_galactic_neighborhood.png" alt="screen shot 2015-05-26 at 11 02 06" /></p>

<p><a href="http://charliehoey.com/threejs-demos/our-galactic-neighborhood.html">Our Galactic Neighbourhood</a>
is another very educational demo. Developed by creative coder <a href="http://charliehoey.com/">Charlie Hoey</a> this demo is a simulation of the charted stars in our Galaxy. You are able to explore the stars travelling both in space and time. Have you ever wondered how the stars are like lightyears away from Earth? Or how will they be thousands of years from now? This demo is your interstellar adventure.</p>

<h2>Conclusion</h2>

<p>In this blogpost we reviewed some 3D demos for Three.js News. They are all very diverse. We saw games, educational projects, simulations and funky characters. What they all have in common is their creativity and the use of 3D technology on the web. Some even go further and incorporate fun control sensor like the Leap Motion device. Have fun checking out all these demos. I hope you enjoy them as much as we did.</p>

<p>Stay tuned for more Three.js News and see you next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[See-through Effect for Augmented Reality On Your Phone]]></title>
    <link href="http://learningthreejs.com/blog/2015/05/10/see-through-effect-for-augmented-reality-on-your-phone/"/>
    <updated>2015-05-10T19:25:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2015/05/10/see-through-effect-for-augmented-reality-on-your-phone</id>
    <content type="html"><![CDATA[<p>This post shows how to read your phone camera and make it appears as
transparent, aka to act as a see-through.
It may seems unrelated to 3d at first but
it is extremely useful in augmented reality.
I know it may seem silly :)
But this see-throught is the base of Augmented Reality in a phone.
This and other AR tech will be the subject of future posts.</p>

<p>It makes your device &#8216;appears as transparent&#8217;
So when the user is looking at her device, she is seeing the reality.
You just have to display your augmented part on top
and you got augmented reality. A Picture is Worth a Thousand Words :)</p>

<p><a href='http://jeromeetienne.github.io/demo.seethroughphone' target='_blank'><input type="button" value='Try Demo Now' /></a></p>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/q7uRkul5prI" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>How It Is Coded</h2>

<p>Webcams are great for interactivity.
  We will read the webcam thanks to <a href="http://www.webrtc.org/">WebRTC</a>,
  html5 API which can be used to do video/audio conferences like  Skype or Hangout.</p>

<p>In our case, we just get the video from the webcam
  with the <a href="https://w3c.github.io/mediacapture-main/getusermedia.html">getUserMedia() function</a>.
  we dont need all the network part.
  It is quite widespread according <a href="http://caniuse.com/#feat=stream">caniuse</a> which is great!
  You can learn more about it
  on <a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia">mdn</a>
  or <a href="http://www.html5rocks.com/en/tutorials/getusermedia/intro/">html5rocks</a></p>

<p>Now that we know how to get a video, which camera to pick ?
This demo is intended for phone. They often got multiple cameras nowsadays.
  typically a front camera for selfies
  a back camera for the normal photos.
<a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack">MediaStreamTrack</a> will list all the media source available in your browser.
  In webrtc vocabulary,
  front camera is called &#8216;user&#8217; facing video
  back camera is a &#8216;environment&#8217; facing .
  So we try to get the environment video camera if we can.</p>

<p>For the see-through effect to be convincing, we need to be careful.
  first we display the video stream in full screen, thus it
  is more real to the user.
  We display it in the background of the page with the proper css
Additionally we ensure we keep a proper
  <a href="http://en.wikipedia.org/wiki/Aspect_ratio_%28image%29">aspect ratio</a>,
  no matter the size of the browser window.
  So it isn&#8217;t streched.
So it must be robust to window resize and orientation change.
  All that makes the resize function more subtle than usual.
  but nothing dramatic</p>

<h2>Source</h2>

<p>Here is the full source of the effect.
It is in a <a href="https://github.com/jeromeetienne/demo.seethroughphone">github repo</a>.
Enjoy!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;viewport&quot;</span> <span class="na">content=</span><span class="s">&quot;width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;style&gt;</span>
</span><span class='line'><span class="nt">body</span><span class="o">,</span> <span class="nt">html</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">height</span> <span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nt">&lt;/style&gt;</span>
</span><span class='line'><span class="nt">&lt;body</span> <span class="na">style=</span><span class="s">&#39;margin: 0px;; overflow: hidden;&#39;</span><span class="nt">&gt;&lt;script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// shim</span>
</span><span class='line'><span class="nx">navigator</span><span class="p">.</span><span class="nx">getUserMedia</span> <span class="o">=</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">getUserMedia</span> <span class="o">||</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">webkitGetUserMedia</span> <span class="o">||</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">mozGetUserMedia</span> <span class="o">||</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">msGetUserMedia</span><span class="p">;</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nx">URL</span>      <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">URL</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">webkitURL</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">;(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>        <span class="s1">&#39;use strict;&#39;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// create video element</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">video</span>        <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;video&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">video</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;autoplay&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">video</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/**</span>
</span><span class='line'><span class="cm">         * Resize video element. </span>
</span><span class='line'><span class="cm">         * - Made complex to handle the aspect change </span>
</span><span class='line'><span class="cm">         * - it is frequent when the mobile is changing orientation</span>
</span><span class='line'><span class="cm">         * - after a search on the internet, it seems hard/impossible to prevent browser from changing orientation :(</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">onResize</span><span class="p">(){</span>
</span><span class='line'>                <span class="c1">// is the size of the video available ?</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="nx">video</span><span class="p">.</span><span class="nx">videoHeight</span> <span class="o">===</span> <span class="mi">0</span> <span class="p">)</span>   <span class="k">return</span>
</span><span class='line'>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">videoAspect</span> <span class="o">=</span> <span class="nx">video</span><span class="p">.</span><span class="nx">videoWidth</span> <span class="o">/</span> <span class="nx">video</span><span class="p">.</span><span class="nx">videoHeight</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">windowAspect</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span> <span class="o">/</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// var video = document.querySelector(&#39;video&#39;)</span>
</span><span class='line'>                <span class="nx">video</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="s1">&#39;absolute&#39;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span> <span class="nx">videoAspect</span> <span class="o">&lt;</span> <span class="nx">windowAspect</span> <span class="p">){</span>
</span><span class='line'>                        <span class="nx">video</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span>        <span class="o">=</span> <span class="s1">&#39;0%&#39;</span>
</span><span class='line'>                        <span class="nx">video</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">width</span>       <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span>
</span><span class='line'>                        <span class="nx">video</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">marginLeft</span>  <span class="o">=</span> <span class="s1">&#39;0px&#39;</span>
</span><span class='line'>
</span><span class='line'>                        <span class="nx">video</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span>         <span class="o">=</span> <span class="s1">&#39;50%&#39;</span>
</span><span class='line'>                        <span class="nx">video</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">height</span>      <span class="o">=</span>  <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="o">/</span><span class="nx">videoAspect</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span>
</span><span class='line'>                        <span class="nx">video</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">marginTop</span>   <span class="o">=</span> <span class="o">-</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="o">/</span><span class="nx">videoAspect</span><span class="p">)</span> <span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span>
</span><span class='line'>                <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                        <span class="nx">video</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span>         <span class="o">=</span> <span class="s1">&#39;0%&#39;</span>
</span><span class='line'>                        <span class="nx">video</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">height</span>      <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="o">+</span><span class="s1">&#39;px&#39;</span>
</span><span class='line'>                        <span class="nx">video</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">marginTop</span>   <span class="o">=</span>  <span class="s1">&#39;0px&#39;</span>
</span><span class='line'>
</span><span class='line'>                        <span class="nx">video</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span>        <span class="o">=</span> <span class="s1">&#39;50%&#39;</span>
</span><span class='line'>                        <span class="nx">video</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">width</span>       <span class="o">=</span>  <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="o">*</span><span class="nx">videoAspect</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span>
</span><span class='line'>                        <span class="nx">video</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">marginLeft</span>  <span class="o">=</span> <span class="o">-</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span><span class="o">*</span><span class="nx">videoAspect</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="s1">&#39;px&#39;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;resize&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>                <span class="nx">onResize</span><span class="p">()</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// just to be sure - resize on mobile is funky to say the least</span>
</span><span class='line'>        <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                <span class="nx">onResize</span><span class="p">()</span>
</span><span class='line'>        <span class="p">},</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// get the media sources</span>
</span><span class='line'>        <span class="nx">MediaStreamTrack</span><span class="p">.</span><span class="nx">getSources</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">sourceInfos</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">// define getUserMedia() constraints</span>
</span><span class='line'>                <span class="kd">var</span> <span class="nx">constraints</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">video</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>                        <span class="nx">audio</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="c1">// to mirror the video element when it isnt &#39;environment&#39;</span>
</span><span class='line'>                <span class="c1">// video.style.transform   = &#39;scaleX(-1)&#39;</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// it it finds the videoSource &#39;environment&#39;, modify constraints.video</span>
</span><span class='line'>                <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">!=</span> <span class="nx">sourceInfos</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                        <span class="kd">var</span> <span class="nx">sourceInfo</span> <span class="o">=</span> <span class="nx">sourceInfos</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>                        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;sourceInfo&#39;</span><span class="p">,</span> <span class="nx">sourceInfo</span><span class="p">)</span>
</span><span class='line'>                        <span class="k">if</span><span class="p">(</span><span class="nx">sourceInfo</span><span class="p">.</span><span class="nx">kind</span> <span class="o">==</span> <span class="s2">&quot;video&quot;</span> <span class="o">&amp;&amp;</span> <span class="nx">sourceInfo</span><span class="p">.</span><span class="nx">facing</span> <span class="o">==</span> <span class="s2">&quot;environment&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                <span class="nx">constraints</span><span class="p">.</span><span class="nx">video</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>                                        <span class="nx">optional</span><span class="o">:</span> <span class="p">[{</span><span class="nx">sourceId</span><span class="o">:</span> <span class="nx">sourceInfo</span><span class="p">.</span><span class="nx">id</span><span class="p">}]</span>
</span><span class='line'>                                <span class="p">}</span>
</span><span class='line'>                                <span class="c1">// not to mirror the video element when it is &#39;environment&#39;</span>
</span><span class='line'>                                <span class="c1">// video.style.transform   = &#39;&#39;</span>
</span><span class='line'>                        <span class="p">}</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// try to get user media</span>
</span><span class='line'>                <span class="nx">navigator</span><span class="p">.</span><span class="nx">getUserMedia</span><span class="p">(</span> <span class="nx">constraints</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stream</span><span class="p">){</span>
</span><span class='line'>                        <span class="c1">// set the video.src with the userMedia stream</span>
</span><span class='line'>                        <span class="nx">video</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">URL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
</span><span class='line'>                <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">){</span>
</span><span class='line'>                        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Cant getUserMedia()! due to &quot;</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
</span><span class='line'>                <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'><span class="p">})()</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three.js Online Meeting with JoclyGames]]></title>
    <link href="http://learningthreejs.com/blog/2015/02/16/three-dot-js-online-meeting-with-joclygames/"/>
    <updated>2015-02-16T11:24:00+00:00</updated>
    <id>http://learningthreejs.com/blog/2015/02/16/three-dot-js-online-meeting-with-joclygames</id>
    <content type="html"><![CDATA[<p>Hello everybody.</p>

<p>This is a new Three.js Online Meeting post. The idea is to interview people using <a href="http://threejs.org/">Three.js</a> in their projects. I think it is a great way to learn from each other and share our experiences.  You know me, I love three.js and I love talking about it. In this video of about 1 hour you are gonna see some interesting people really passionate about games and three.js</p>

<p>For this interview, i talked with
<a href="https://twitter.com/jcfrog">Jérôme CHOAIN</a> and
<a href="https://twitter.com/_mig_">Michel Gutierrez</a>
, the guys behind <a href="https://www.jocly.com">Jocly Games</a>.
They have over 113 web board games with very cool features as you will see.  You can play on and off line with your friends, or just you and your computer. They also have some mobile apps that make their games even more accessible. You can dowload their games from <a href="https://apps.facebook.com/joclyfb/">Facebook</a>, <a href="https://play.google.com/store/apps/developer?id=Jocly">Google Play</a> and <a href="https://itunes.apple.com/us/artist/aclap/id512525676">iTunes</a>. And good news for developers: you can create and embed your own games! It is tons of fun. Be sure to check it out.</p>

<!-- more -->


<p>I hope you enjoy it.</p>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/Di4Yomm530g" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Threex a Day Challenge: Phase 1 Completed!]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/26/one-threex-a-day-challenge-phase-1-completed/"/>
    <updated>2014-05-26T11:49:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/26/one-threex-a-day-challenge-phase-1-completed</id>
    <content type="html"><![CDATA[<p>Hello everybody!</p>

<p>It&#8217;s been nearly a month since I started publishing <a href="http://learningthreejs.com/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/">&#8220;One threex a day&#8221; challenge</a>. The idea was to share with you the many <a href="http://www.threejsgames.com/extensions/">three.js games extensions</a> that I had written over time. I wanted to show you how they could be useful, fun and easy to include in your very own three.js game. I came up with a motto &#8220;One threex a day gets your game on its way&#8221;. I was all set up and ready to go. This was a challenge inspired by John Resig&#8217;s article called <a href="http://ejohn.org/blo!/write-code-every-day/">&#8220;Write code everyday&#8221;</a>. I deeply agree with his theory for making progress, increasing productivity and getting the work done. I wished to try something similar on myself.</p>

<p>Let me tell you though&#8230; it WAS challenging! Keeping the publication rhythm was hard. It takes a lot of discipline and organization to get it done everyday. I had the best intentions, but unfortunately I got sick and I felt bad for most of last week. Additionally I had some day work on the side that I needed to get done. At this rate of publication, it was very hard to keep up! At first I wanted to publish the threex extensions for a period of two months but I think it is best to rest for a while. So a week ago I published the last three.js game extension of phase 1.</p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/p7xM5X7dkeI" frameborder="0" allowfullscreen></iframe>


<p>The good news is that I&#8217;ve had a very interesting experience. I&#8217;m pleased with the results. Obviously, some posts got more attention than others. I think this was because the three.js game extensions I published weren&#8217;t all for hard-core developers or game creators. Some were pretty basic, but still had educational value for people just starting with three.js. I wanted them to be directed to all kinds of audience, amateurs and experts alike. I really appreciated the process of sharing these extensions, and overall I had a great response. I got some <a href="https://plus.google.com/104300307601542851567/posts/RhabZY19TSq">very</a> <a href="https://plus.google.com/104300307601542851567/posts/RqDbZNeJEkW">cool</a> <a href="https://twitter.com/siggraph/status/464238273582211072">retweets</a> and a lot of positive echo from you guys. Thanks a lot! Don&#8217;t hesitate to contact me and give me some more feedback.</p>

<p>I stopped publication last week, but wait&#8230;I&#8217;m not saying I&#8217;m giving up though. Far from it. I have promised myself, and I promise my readers, to come back with more three.js extensions. Especially, because I still have a lot to publish, there are still some tricks up my sleeve ;)  For the moment I will concentrate on regaining my strength, writing more code and documenting it for the next threex batch. I hope to deliver and publish it soon.</p>

<p>Stay tuned! I&#8217;ll be back.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Personalized and Polished Text for Your Three.js Game With threex.text]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/16/personalized-and-polished-text-for-your-three-dot-js-game-with-threex-dot-text/"/>
    <updated>2014-05-16T17:55:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/16/personalized-and-polished-text-for-your-three-dot-js-game-with-threex-dot-text</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.text/examples/basic.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.text/master/examples/images/screenshot-threex-text-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="http://learningthreejs.com/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/">&#8216;one threex a day&#8217; challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.text">threex.text</a>.
threex.text is a <a href="http://jeromeetienne.github.io/threex/">threex game extension for three.js</a> which makes it easy to add 3d text in your game. You can use it to create a big logo on top of a shop or a big sign of any kind Las Vegas style. Up to you to see :) It is very flexible. You can fine tune lots of parameters to make it fit your needs. You can choose the fonts, the size, the bevel, the weight etc&#8230;</p>

<p><a href='http://jeromeetienne.github.io/threex.text/examples/basic.html' target='_blank'><input type="button" value='Try Threex.text Demo Now' /></a></p>

<p>To see the <a href="http://learningthreejs.com/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>&#8220;A THREEx extension a day, gets your game on its way!&#8221;</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/skjX1Dl7e0Y" frameborder="0" allowfullscreen></iframe>


<h1>Show Don&#8217;t Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.text/examples/basic.html">examples/basic.html</a>
[<a href="https://github.com/jeromeetienne/threex.text/blob/master/examples/basic.html">view source</a>] :
It shows a 3d text.</li>
<li><a href="http://jeromeetienne.github.io/threex.text/examples/requirejs.html">examples/requirejs.html</a>
[<a href="https://github.com/jeromeetienne/threex.text/blob/master/examples/requirejs.html">view source</a>] :
It show a 3d text and it is all loaded thru require.js</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;threex.text.js&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower install threex.text
</span></code></pre></td></tr></table></div></figure>


<h1>How To Use It</h1>

<p>Here is a very basic usage</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>var <span class="nv">mesh</span>    <span class="o">=</span> new THREEx.Text<span class="o">(</span><span class="s1">&#39;THREEx&#39;</span><span class="o">)</span>
</span><span class='line'>scene.add<span class="o">(</span>mesh<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is another example with more parameters. The options are passed directly
to  <code>THREE.TextGeometry</code>.
See <a href="http://threejs.org/docs/#Reference/Extras.Geometries/TextGeometry">three.js docs</a>
for details.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>var <span class="nv">mesh</span>    <span class="o">=</span> new THREEx.Text<span class="o">(</span><span class="s1">&#39;THREEx&#39;</span>, <span class="o">{</span>
</span><span class='line'>    font        : <span class="s2">&quot;droid serif&quot;</span>,
</span><span class='line'>    weight      : <span class="s2">&quot;bold&quot;</span>,
</span><span class='line'>    size        : 1,
</span><span class='line'>    height      : 0.4,
</span><span class='line'><span class="o">})</span>
</span><span class='line'>scene.add<span class="o">(</span>mesh<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perlin Terrain Procedural Generation For Your Game With threex.terrain]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/15/perlin-terrain-procedural-generation-for-your-game-with-threex-dot-terrain/"/>
    <updated>2014-05-15T20:21:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/15/perlin-terrain-procedural-generation-for-your-game-with-threex-dot-terrain</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.terrain/examples/planegeometry.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.terrain/master/examples/images/screenshot-threex-terrain-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="http://learningthreejs.com/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/">&#8216;one threex a day&#8217; challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.terrain">threex.terrain</a>.
threex.terrain is a <a href="http://www.threejsgames.com/extensions/">three.js games extension</a> which provides a procedural terrain generated from a simplex noise, the <a href="http://en.wikipedia.org/wiki/Perlin_noise">Perlin noise</a>. As you can see you have different zones that make the terrain more varied, the blue zone represents water, the green one represents trees or grass and the white zone at the mountain top is snow. Imagine your video game character walking on these 3D mountains or flying over them, pretty cool eh? You can take him through river, forest, wind and snow if you want ;)</p>

<p><a href='http://jeromeetienne.github.io/threex.terrain/examples/planegeometry.html' target='_blank'><input type="button" value='Try Threex.terrain Demo Now' /></a></p>

<p>To see the <a href="http://learningthreejs.com/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>&#8220;A THREEx extension a day, gets your game on its way!&#8221;</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/z_73WDzgBsA" frameborder="0" allowfullscreen></iframe>


<h1>Show Don&#8217;t Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.terrain/examples/canvas.html">examples/canvas.html</a>
[<a href="https://github.com/jeromeetienne/threex.terrain/blob/master/examples/canvas.html">view source</a>] :
It shows a perlin terrain in a canvas 2d.</li>
<li><a href="http://jeromeetienne.github.io/threex.terrain/examples/planegeometry.html">examples/planegeometry.html</a>
[<a href="https://github.com/jeromeetienne/threex.terrain/blob/master/examples/planegeometry.html">view source</a>] :
It displays the terrain in 3d with three.js.</li>
<li><a href="http://jeromeetienne.github.io/threex.terrain/examples/height.html">examples/height.html</a>
[<a href="https://github.com/jeromeetienne/threex.terrain/blob/master/examples/height.html">view source</a>] :
It show how to test the height in a 3d terrain</li>
<li><a href="http://jeromeetienne.github.io/threex.terrain/examples/minecraft.html">examples/minecraft.html</a>
[<a href="https://github.com/jeromeetienne/threex.terrain/blob/master/examples/minecraft.html">view source</a>] :
It show a minecraft character walking on perlin terrain</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;threex.terrain.js&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower install threex.terrain
</span></code></pre></td></tr></table></div></figure>


<h1>How To Use It</h1>

<p>To allocate a heightMap with a width of 100 and a depth of 200, do</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">heightMap</span>   <span class="o">=</span> <span class="nx">THREEx</span><span class="p">.</span><span class="nx">Terrain</span><span class="p">.</span><span class="nx">allocateHeightMap</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To generate some heights based on a simplex/perlin noise, do</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">THREEx</span><span class="p">.</span><span class="nx">Terrain</span><span class="p">.</span><span class="nx">simplexHeightMap</span><span class="p">(</span><span class="nx">heightMap</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to display it in three.js, built a <code>THREE.PlaneGeometry</code> for it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// build the geometry</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">geometry</span>    <span class="o">=</span> <span class="nx">THREEx</span><span class="p">.</span><span class="nx">Terrain</span><span class="p">.</span><span class="nx">heightMapToPlaneGeometry</span><span class="p">(</span><span class="nx">heightMap</span><span class="p">)</span>
</span><span class='line'><span class="c1">// init the material</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">material</span>    <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="p">();</span>
</span><span class='line'><span class="c1">// create the mesh and add it to the scene</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mesh</span>    <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span> <span class="nx">geometry</span><span class="p">,</span> <span class="nx">material</span> <span class="p">);</span>
</span><span class='line'><span class="nx">scene</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span> <span class="nx">mesh</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>To get the ground height of this mesh, use the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">THREEx</span><span class="p">.</span><span class="nx">Terrain</span><span class="p">.</span><span class="nx">planeToHeightMapCoords</span><span class="p">(</span><span class="nx">heightMap</span><span class="p">,</span> <span class="nx">mesh</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">z</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is possible to enhance the rendering of this heightmap with some vertexColor, and a
smoother shading if you want.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// build the geometry</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">geometry</span>    <span class="o">=</span> <span class="nx">THREEx</span><span class="p">.</span><span class="nx">Terrain</span><span class="p">.</span><span class="nx">heightMapToPlaneGeometry</span><span class="p">(</span><span class="nx">heightMap</span><span class="p">)</span>
</span><span class='line'><span class="c1">// set the vertexColor in the geometry</span>
</span><span class='line'><span class="nx">THREEx</span><span class="p">.</span><span class="nx">Terrain</span><span class="p">.</span><span class="nx">heightMapToVertexColor</span><span class="p">(</span><span class="nx">heightMap</span><span class="p">,</span> <span class="nx">geometry</span><span class="p">)</span>
</span><span class='line'><span class="c1">// init the material</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">material</span>    <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">shading</span>     <span class="o">:</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">vertexColors</span>    <span class="o">:</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexColors</span><span class="p">,</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">// create the mesh and add it to the scene</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mesh</span>    <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span> <span class="nx">geometry</span><span class="p">,</span> <span class="nx">material</span> <span class="p">);</span>
</span><span class='line'><span class="nx">scene</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span> <span class="nx">mesh</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>To get the height with heightMap coordinates, just use</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">y</span>   <span class="o">=</span> <span class="nx">THREEx</span><span class="p">.</span><span class="nx">Terrain</span><span class="p">.</span><span class="nx">heightMapToHeight</span><span class="p">(</span><span class="nx">heightMap</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">z</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to display the result in a canvas 2d, just do</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">canvas</span>  <span class="o">=</span> <span class="nx">THREEx</span><span class="p">.</span><span class="nx">Terrain</span><span class="p">.</span><span class="nx">heightMapToCanvas</span><span class="p">(</span><span class="nx">heightMap</span><span class="p">)</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">canvas</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Procedural Generated Pool Balls For Your Three.js Pool Game with threex.poolball]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/14/procedural-generated-pool-balls-for-your-three-dot-js-pool-game-with-threex-dot-poolball/"/>
    <updated>2014-05-14T20:21:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/14/procedural-generated-pool-balls-for-your-three-dot-js-pool-game-with-threex-dot-poolball</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.poolball/examples/demo.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.poolball/master/examples/images/screenshot-threex-poolball-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="http://learningthreejs.com/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/">&#8216;one threex a day&#8217; challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.poolball">threex.poolball</a>.
threex.poolball is a <a href="http://www.threejsgames.com/extensions/">three.js games extension</a> which helps you build pool balls. It provides dynamically generated models of pool balls, so no model download needed. It may be fun to play with when you start with three.js, funnier than a plain sphere for sure :) You can use it for your bar games, having  your characters bet when playing pool, or even your <a href="http://jeromeetienne.github.io/marbleTable/">Marble Table</a> games, as I did, adding cool granular sounds when the balls roll.</p>

<p><a href='http://jeromeetienne.github.io/threex.poolball/examples/demo.html' target='_blank'><input type="button" value='Try Threex.poolball Demo Now' /></a></p>

<p>To see the <a href="http://learningthreejs.com/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>&#8220;A THREEx extension a day, gets your game on its way!&#8221;</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/u_hjrVazLYo" frameborder="0" allowfullscreen></iframe>


<h1>Show Don&#8217;t Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.poolball/examples/basic.html">examples/basic.html</a>
[<a href="https://github.com/jeromeetienne/threex.poolball/blob/master/examples/basic.html">view source</a>] :
It shows a basic usage of this extension</li>
<li><a href="http://jeromeetienne.github.io/threex.poolball/examples/demo.html">examples/demo.html</a>
[<a href="https://github.com/jeromeetienne/threex.poolball/blob/master/examples/demo.html">view source</a>] :
It shows multiple pool balls setup like on a pool table :)</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;threex.poolball.js&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower install threex.poolball
</span></code></pre></td></tr></table></div></figure>


<h1>How To Use It</h1>

<p>Here is the default usages</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>var <span class="nv">mesh</span>    <span class="o">=</span> THREEx.createPoolBall<span class="o">()</span>;
</span><span class='line'>scene.add<span class="o">(</span>mesh<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>this is with custom arguments</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>var <span class="nv">mesh</span>    <span class="o">=</span> THREEx.createPoolBall<span class="o">({</span>
</span><span class='line'>    ballDesc    : <span class="s1">&#39;0&#39;</span>,  // the text which gonna be written on the ball
</span><span class='line'>    stripped    : <span class="nb">true</span>, // <span class="nb">true </span><span class="k">if </span>the ball must be stripped, <span class="nb">false </span>otherwise
</span><span class='line'>    textureW    : 512   // the width/height of the created texture <span class="k">for </span>this ball
</span><span class='line'><span class="o">})</span>;
</span><span class='line'>scene.add<span class="o">(</span>mesh<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some ball description are already done.</p>

<ul>
<li><code>cue</code> will return an unstripped white ball</li>
<li><code>black</code> will return an unstripped black ball</li>
<li><code>1</code> to <code>9</code> will assign the official colors for <a href="http://en.wikipedia.org/wiki/Nine-ball">nine-ball</a> pool</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy Way to Include Transparency In Your Three.js Game with threex.transparency]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/13/easy-way-to-include-transparency-in-your-three-dot-js-game-with-threex-dot-transparency/"/>
    <updated>2014-05-13T20:21:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/13/easy-way-to-include-transparency-in-your-three-dot-js-game-with-threex-dot-transparency</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.transparency/examples/basic.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.transparency/master/examples/images/screenshot-threex-transparency-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="http://learningthreejs.com/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/">&#8216;one threex a day&#8217; challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.transparency">threex.transparency</a>.
threex.transparency is a <a href="http://www.threejsgames.com/extensions/">three.js games extension</a> to easily handle transparency. Transparency is a tricky business in Webgl, but this extension makes it approachable. It is worth trying. Do you remember the transparency between the leaves of a tree in 3D games? Well, with this extension you will be able to add it to your own game. You can also make clouds appear transparent in the sky you have created for your game. It is easy to include and it gives a nice polish finish, a professional touch.</p>

<p><a href='http://jeromeetienne.github.io/threex.transparency/examples/basic.html' target='_blank'><input type="button" value='Try Threex.transparency Demo Now' /></a></p>

<p>To see the <a href="http://learningthreejs.com/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>&#8220;A THREEx extension a day, gets your game on its way!&#8221;</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/mP_8EHnZUTo" frameborder="0" allowfullscreen></iframe>


<h1>Show Don&#8217;t Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.transparency/examples/basic.html">examples/basic.html</a>
[<a href="https://github.com/jeromeetienne/threex.transparency/blob/master/examples/basic.html">view source</a>] :
It shows a basic usage of this extension.</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;threex.transparency.js&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower install threex.transparency
</span></code></pre></td></tr></table></div></figure>


<h2>How To Use It ?</h2>

<p>The algo is well described in this
<a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-10-transparency/">opengl tutorial about transparency</a>. We just adapt it to fit three.js.
First you setup all the objects that you want to be transparent</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>THREEx.Transparency.init<span class="o">(</span>objects<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will change the <code>THREE.Material</code> to make it support transparent.
Second you need to update all your objects at every frame.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>THREEx.Transparency.update<span class="o">(</span>objects, camera<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Live Cube Maps Reflections In Your Three.js Game With threex.cubecamera]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/12/live-cube-maps-reflections-in-your-three-dot-js-game-with-threex-dot-cubecamera/"/>
    <updated>2014-05-12T20:20:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/12/live-cube-maps-reflections-in-your-three-dot-js-game-with-threex-dot-cubecamera</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.cubecamera/examples/demo.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.cubecamera/master/examples/images/screenshot-threex-cubecamera-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="http://learningthreejs.com/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/">&#8216;one threex a day&#8217; challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.cubecamera">threex.cubecamera</a>.
threex.cubecamera is a <a href="http://www.threejsgames.com/extensions/">three.js games extension</a> which provides a helper for cube cameras. It is very useful when a given object must reflect a texture cube live. Just look at it, you can see the reflection as clear as a real life mirror! You can give your texture the color you want, for example in the demo I created a &#8220;gold&#8221; sphere to give it a shinier look. Be careful though, this requires 6 renderings of the scene every time you update it. It becomes expensive fast.</p>

<p><a href='http://jeromeetienne.github.io/threex.cubecamera/examples/demo.html' target='_blank'><input type="button" value='Try Threex.cubecamera Demo Now' /></a></p>

<p>To see the <a href="http://learningthreejs.com/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>&#8220;A THREEx extension a day, gets your game on its way!&#8221;</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/tUnyNECDgFE" frameborder="0" allowfullscreen></iframe>


<h1>Show Don&#8217;t Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.cubecamera/examples/basic.html">examples/basic.html</a>
[<a href="https://github.com/jeromeetienne/threex.cubecamera/blob/master/examples/basic.html">view source</a>] :
It shows the most basic usage of this extension.</li>
<li><a href="http://jeromeetienne.github.io/threex.cubecamera/examples/demo.html">examples/demo.html</a>
[<a href="https://github.com/jeromeetienne/threex.cubecamera/blob/master/examples/demo.html">view source</a>] :
It shows a little bit shinier demo.</li>
<li><a href="http://jeromeetienne.github.io/threex.cubecamera/examples/discoball.html">examples/discoball.html</a>
[<a href="https://github.com/jeromeetienne/threex.cubecamera/blob/master/examples/discoball.html">view source</a>] :
It shows a little bit shinier discoball.
TODO to port in its own demo.
It doesnt even use live rendering.
Use the &#8220;minecraft goes party&#8221; from nextgamefrontier talk.</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;threex.cubecamera.js&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower install threex.cubecamera
</span></code></pre></td></tr></table></div></figure>


<h1>How To Use It</h1>

<p>First you need to create a classic mesh, the one which gonna reflect the live texture cube.
In this example, we gonna create sphere with the color &#8216;gold&#8217; like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>var <span class="nv">geometry</span>    <span class="o">=</span> new THREE.SphereGeometry<span class="o">(</span>0.5, 32, 16<span class="o">)</span>
</span><span class='line'>var <span class="nv">material</span>    <span class="o">=</span> new THREE.MeshPhongMaterial<span class="o">({</span>
</span><span class='line'>    color   : <span class="s1">&#39;gold&#39;</span>
</span><span class='line'><span class="o">})</span>
</span><span class='line'>var <span class="nv">mesh</span>    <span class="o">=</span> new THREE.Mesh<span class="o">(</span>geometry, material<span class="o">)</span>
</span><span class='line'>scene.add<span class="o">(</span> mesh <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we needs to create the cube camera which gonna update the texture cube live.
We do that like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>var <span class="nv">cubeCamera</span>  <span class="o">=</span> new THREEx.CubeCamera<span class="o">(</span>mesh<span class="o">)</span>
</span><span class='line'>scene.add<span class="o">(</span>cubeCamera.object3d<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&#8217;t forget to update it when needed (likely at every frame)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cubeCamera.update<span class="o">(</span>renderer, scene<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we got the textureCube, we set the mesh material to reflect this texture cube.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>material.envMap <span class="o">=</span> cubeCamera.textureCube
</span></code></pre></td></tr></table></div></figure>


<p>This is it! Now you got the live texture cube on your sphere :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classical Suzanne Monkey From Blender To Get Your Game Started With threex.suzanne]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/09/classical-suzanne-monkey-from-blender-to-get-your-game-started-with-threex-dot-suzanne/"/>
    <updated>2014-05-09T20:20:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/09/classical-suzanne-monkey-from-blender-to-get-your-game-started-with-threex-dot-suzanne</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.suzanne/examples/basic.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.suzanne/master/examples/images/screenshot-threex-suzanne-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="http://learningthreejs.com/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/">&#8216;one threex a day&#8217; challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.suzanne">threex.suzanne</a>.
Suzanne is a classic. She is the blender famous model familiar to all blender users. It is also a <a href="http://www.threejsgames.com/extensions/">three.js games extension</a> extension which provides you with a monkey model. Blender wanted to create a less common test model, so Suzanne was born. She is more precisely a 3D model of a chimpanzee head. It is pretty basic but you can easily add it as a funky animal character and install it in your platform games!</p>

<p><a href='http://jeromeetienne.github.io/threex.suzanne/examples/basic.html' target='_blank'><input type="button" value='Try Threex.suzanne Demo Now' /></a></p>

<p>To see the <a href="http://learningthreejs.com/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>&#8220;A THREEx extension a day, gets your game on its way!&#8221;</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/RYrAktdkEUo" frameborder="0" allowfullscreen></iframe>


<h1>Show Don&#8217;t Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.suzanne/examples/basic.html">examples/basic.html</a>
[<a href="https://github.com/jeromeetienne/threex.suzanne/blob/master/examples/basic.html">view source</a>] :
It shows a basic usage of the extension.</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;threex.suzanne.js&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower install threex.suzanne
</span></code></pre></td></tr></table></div></figure>


<h1>How To Use It</h1>

<h3>How to load the geometry ?</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">new</span> <span class="nx">THREEx</span><span class="p">.</span><span class="nx">Suzanne</span><span class="p">.</span><span class="nx">GeometryLoader</span><span class="p">(</span><span class="kd">function</span> <span class="nx">onLoad</span><span class="p">(</span><span class="nx">geometry</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// this function is notified when the geometry is actually loaded</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// geometry is a THREE.Geometry of suzanne model</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3>How to create a mesh with it ?</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">new</span> <span class="nx">THREEx</span><span class="p">.</span><span class="nx">Suzanne</span><span class="p">.</span><span class="nx">GeometryLoader</span><span class="p">(</span><span class="kd">function</span> <span class="nx">onLoad</span><span class="p">(</span><span class="nx">geometry</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// create a mesh with the geometry</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">material</span>    <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="p">()</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">mesh</span>    <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span> <span class="nx">geometry</span><span class="p">,</span> <span class="nx">material</span> <span class="p">)</span>
</span><span class='line'>    <span class="c1">// attach mesh to the scene</span>
</span><span class='line'>    <span class="nx">scene</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">mesh</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sometime it is not desirable to wait for the loading to complete before
adding the object to the scene. To avoid this, we create a container
which will contains the model once loading is completed.
Thanks to the scene graph inheritance, any position/quaternion/scale
changes made on container, will be reported to the children meshes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// create the container</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">container</span>   <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">();</span>
</span><span class='line'><span class="c1">// add the container to the scene without waiting the end of loading</span>
</span><span class='line'><span class="nx">scene</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">container</span><span class="p">)</span>
</span><span class='line'><span class="c1">// start to load the geometry</span>
</span><span class='line'><span class="k">new</span> <span class="nx">THREEx</span><span class="p">.</span><span class="nx">Suzanne</span><span class="p">.</span><span class="nx">GeometryLoader</span><span class="p">(</span><span class="kd">function</span> <span class="nx">onLoad</span><span class="p">(</span><span class="nx">geometry</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// create a mesh with it</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">material</span>    <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="p">()</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">mesh</span>    <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span> <span class="nx">geometry</span><span class="p">,</span> <span class="nx">material</span> <span class="p">)</span>
</span><span class='line'>    <span class="c1">// attach mesh to the container</span>
</span><span class='line'>    <span class="nx">container</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">mesh</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Funky Deformation For The Geometry of Your Three.js Game With threex.vertexanimation]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/07/funky-deformation-for-the-geometry-of-your-three-dot-js-game-with-threex-dot-vertexanimation/"/>
    <updated>2014-05-07T20:20:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/07/funky-deformation-for-the-geometry-of-your-three-dot-js-game-with-threex-dot-vertexanimation</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.vertexanimation/examples/demo.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.vertexanimation/master/examples/images/screenshot-threex-vertexanimation-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="http://learningthreejs.com/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/">&#8216;one threex a day&#8217; challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.vertexanimation">threex.vertexanimation</a>.
threex.vertexanimation is a <a href="http://www.threejsgames.com/extensions/">three.js games extension</a> which provides easy vertex animation. You can see your object move as if it&#8217;s got a life of its own! You can use it to make the objects in your game bounce, dance or move in funky ways. You can add it in your games to get a <a href="http://en.wikipedia.org/wiki/Flubber_(film)">Flubber</a> effect. The best part about it is that you can get creative. You can morph or deform your objects to transform them into other objects. It is really fun to experiment with!</p>

<p><a href='http://jeromeetienne.github.io/threex.vertexanimation/examples/demo.html' target='_blank'><input type="button" value='Try Threex.vertexanimation Demo Now' /></a></p>

<p>To see the <a href="http://learningthreejs.com/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>&#8220;A THREEx extension a day, gets your game on its way!&#8221;</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/FjsMzOI3eRw" frameborder="0" allowfullscreen></iframe>


<h1>Show Don&#8217;t Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.vertexanimation/examples/basic.html">examples/basic.html</a>
[<a href="https://github.com/jeromeetienne/threex.vertexanimation/blob/master/examples/basic.html">view source</a>] :
It shows a basic usage of the module.</li>
<li><a href="http://jeromeetienne.github.io/threex.vertexanimation/examples/demo.html">examples/demo.html</a>
[<a href="https://github.com/jeromeetienne/threex.vertexanimation/blob/master/examples/demo.html">view source</a>] :
It simply add a more shiny example using reflexion and environment map.</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;threex.vertexanimation.js&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower install threex.vertexanimation
</span></code></pre></td></tr></table></div></figure>


<h1>How To Use It</h1>

<p>Here is a typical usage</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// instanciate the animation object</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">animation</span>   <span class="o">=</span> <span class="k">new</span> <span class="nx">THREEx</span><span class="p">.</span><span class="nx">VertexAnimation</span><span class="p">(</span><span class="nx">geometry</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">origin</span><span class="p">,</span> <span class="nx">position</span><span class="p">,</span> <span class="nx">delta</span><span class="p">,</span> <span class="nx">now</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// here you put your formula, something clever which fit your needs</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">angle</span>   <span class="o">=</span> <span class="nx">now</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="nx">position</span><span class="p">.</span><span class="nx">y</span>     <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">position</span><span class="p">.</span><span class="nx">x</span>  <span class="o">=</span> <span class="nx">origin</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">angle</span><span class="p">)</span><span class="o">*</span><span class="mf">0.1</span><span class="p">;</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="c1">// update the animation at every frame</span>
</span><span class='line'><span class="nx">updateFcts</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">delta</span><span class="p">,</span> <span class="nx">now</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">animation</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">delta</span><span class="p">,</span> <span class="nx">now</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three.js Interview: Online 3D Modeling And Rendering With Clara.io]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/07/threejs-interview-online-3d-modeling-and-rendering-with-claraio/"/>
    <updated>2014-05-07T10:16:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/07/threejs-interview-online-3d-modeling-and-rendering-with-claraio</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://learningthreejs.com/data/2014-05-07-threejs-interview-online-3d-modeling-and-rendering-with-claraio/images/image01.jpg" width="235" height="105"></p>

<p>Hello everybody! This is my first <em>Three.js Interview</em> video. The inspiration came from all those great people out there doing <a href="http://threejs.org">very cool projects with three.js</a>. I want to share their innovations with others. If you know me, you know that I love talking about three.js. So, I would like everybody to have the opportunity to enjoy and learn from these <a href="http://learningthreejs.com/blog/categories/threejsInterview/">three.js interviews</a>. So three.js interviews are videos of around one hour where people are talking about cool things they do with three.js . Maybe you could get some ideas for your own project or simply partake on a subject you&#8217;re passionate about.</p>

<p><a href='https://news.ycombinator.com/item?id=7709928' target='_blank'><input type="button" value='discuss it on hacker news' /></a></p>

<p><img class="left" src="http://learningthreejs.com/data/2014-05-07-threejs-interview-online-3d-modeling-and-rendering-with-claraio/images/image03.jpg" width="320" height="240"></p>

<p>The idea is to have interesting people come and talk about cool things that they&#8217;ve done with three.js. Like <a href="https://twitter.com/BenAtExocortex">Ben Houston</a>, who is our guest in this first video. Ben is the Team Leader for <a href="http://clara.io/">Clara.io</a>, a online 3D modeling and rendering tool that you can use inside you browser. Ben talks to us about the creation and the evolution of <a href="http://clara.io/">Clara.io</a> and about all the interesting features it&#8217;s got!</p>

<p>I hope you enjoy it and stay tuned for the next Three.js Interview :)</p>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/5pdxh9pjKzQ" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scary Monster For Your Next FPS Game in Three.js With threex.md2character]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/06/scary-monster-for-your-next-fps-game-in-three-dot-js-with-threex-dot-md2character/"/>
    <updated>2014-05-06T20:19:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/06/scary-monster-for-your-next-fps-game-in-three-dot-js-with-threex-dot-md2character</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.md2character/examples/select.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.md2character/master/examples/images/screenshot-threex-md2character-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="http://learningthreejs.com/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/">&#8216;one threex a day&#8217; challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.md2character">threex.md2character</a>.
threex.md2character is a
<a href="http://www.threejsgames.com/extensions/">three.js game extension</a>
which provides a model of a monster.
His name is &#8216;ratmahatta&#8217; and is from quake era.
It is animated, can hold a weapon, skin may be changed. Pretty sweet.
you got <strong>12 weapons to choose from</strong>, <strong>5 different skins</strong> and <strong>16 distinct animations</strong>. Pretty complete!
It is easy to include in your game, maybe in a cave or a dungeon :)
It is from
<a href="http://threejs.org/examples/webgl_morphtargets_md2.html">webgl_morphtargets_md2.html three.js example</a>.
The model is make by
<a href="http://planetquake.gamespy.com/View.php?view=Quake2.Detail&amp;id=368">Brian Collins</a> and converted by
<a href="https://twitter.com/#!/oosmoxiecode">@oosmoxiecode</a>&#8217;s
<a href="http://oos.moxiecode.com/blog/2012/01/md2-to-json-converter/">MD2 converter</a>.</p>

<p><a href='http://jeromeetienne.github.io/threex.md2character/examples/select.html' target='_blank'><input type="button" value='Try Threex.md2character Demo Now' /></a></p>

<p>To see the <a href="http://learningthreejs.com/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>&#8220;A THREEx extension a day, gets your game on its way!&#8221;</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/zOqxsorcyQk" frameborder="0" allowfullscreen></iframe>


<h1>Show Don&#8217;t Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.md2character/examples/select.html">examples/select.html</a>
[<a href="https://github.com/jeromeetienne/threex.md2character/blob/master/examples/select.html">view source</a>] :
It shows all the possibilities for the skins, the weapons and the animations.</li>
<li><a href="http://jeromeetienne.github.io/threex.md2character/examples/ratmahattaplayer.html">examples/ratmahattaplayer.html</a>
[<a href="https://github.com/jeromeetienne/threex.md2character/blob/master/examples/ratmahattaplayer.html">view source</a>] :
It shows how to controls the mesh as if it was a player in a game with input
in the keyboard wasd or arrows keys.</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;threex.md2character.js&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower install threex.md2character
</span></code></pre></td></tr></table></div></figure>


<h1>How To Use It</h1>

<h2>threex.md2characterratmahatta.js</h2>

<p>You typically create a ratamahatta like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>var <span class="nv">ratamahatta</span> <span class="o">=</span> new THREEx.MD2CharacterRatmahatta<span class="o">()</span>
</span><span class='line'>scene.add<span class="o">(</span>ratamahatta.character.object3d<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&#8217;t forget to update it when you render with <code>ratamahatta.update(delta)</code>.Internally, it create a character and a controls. You can use them directly.
* <code>ratamahatta.character</code> instance of <code>THREEx.MD2Character</code>
* <code>ratamahatta.controls</code> instance of <code>THREEx.MD2CharacterControls</code></p>

<p>It has simple functions to set the skin, weapon and animations.</p>

<ul>
<li><code>ratamahatta.skinNames</code> is the names of available skins. It has 5 different skins <code>["ratamahatta", "ctf_b", "ctf_r", "dead", "gearwhore"]</code></li>
<li><code>ratamahatta.setSkinName(skinName)</code> set the skin based on its name</li>
<li><code>ratamahatta.weaponsNames</code> is the names of available weapons. It has 12 animation <code>["none", "weapon", "w_bfg", "w_blaster", "w_chaingun", "w_glauncher", "w_hyperblaster", "w_machinegun", "w_railgun", "w_rlauncher", "w_shotgun", "w_sshotgun"]</code></li>
<li><code>ratamahatta.setWeaponName(weaponName)</code> set the weapon based on its name</li>
<li><code>ratamahatta.animationNames</code> is the names of available animation. It has 16 animations <code>["stand", "run", "attack", "pain", "jump", "flip", "salute", "taunt", "wave", "point", "crstand", "crwalk", "crattack", "crpain", "crdeath", "death"]</code></li>
<li><code>ratamahatta.setAnimationName(animationName)</code> set the animation based on its name</li>
</ul>


<h2>threex.md2charactercontrols.js</h2>

<p>First you create controls for your character like this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>var <span class="nv">controls</span>    <span class="o">=</span> new THREEx.MD2CharacterControls<span class="o">(</span>character.object3d<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dont forget to update it when you render with <code>controls.update(delta, now)</code>. The character is controlled by <code>controls.inputs</code> properties. You just have to set them to fit your need.</p>

<ul>
<li><code>control.inputs.right</code> is true if the character must go right</li>
<li><code>control.inputs.left</code> is true if the character must go left</li>
<li><code>control.inputs.up</code> is true if the character must go forward</li>
<li><code>control.inputs.down</code> is true if the character must go backward</li>
</ul>


<h2>threex.md2character.js</h2>

<p>It provide the base to play with the model.
It is a modified version of
<a href="https://github.com/mrdoob/three.js/blob/master/examples/js/MD2Character.js">MD2Character.js</a>
from this <a href="http://threejs.org/examples/webgl_morphtargets_md2.html">webgl_morphtargets_md2.html three.js example</a>.</p>

<p>First you create it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>var <span class="nv">character</span>   <span class="o">=</span> new THREEx.MD2Character<span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Dont forget to update it at every frame with a <code>character.update(delta)</code></p>

<ul>
<li><code>character.object3d</code> is the THREE.Object3D container</li>
<li><code>character.setWireframe(boolean)</code> set the model in wireframe.</li>
<li><code>character.setWeapon(weaponIndex)</code> add a weapon in the character hand. <code>weaponIndex</code> is between 0 and 11. if -1, it removes the weapon.</li>
<li><code>character.setSkin(skinIndex)</code> set the skin of the character. <code>skinIndex</code> is between 0 and 4</li>
<li><code>character.setAnimation(animationName)</code> set the animation for the character. The name is one of <code>["stand", "run", "attack", "pain", "jump", "flip", "salute", "taunt", "wave", "point", "crstand", "crwalk", "crattack", "crpain", "crdeath", "death"]</code>.</li>
<li><code>character.setPlaybackRate(rate)</code> set the playback rate of the animation.</li>
<li><code>character.load(config)</code> loads the characters

<ul>
<li><code>character.addEventListener('loaded', function(){})</code> to be notified when the model is loaded</li>
<li><code>character.isLoaded()</code> is true if the model is loaded, false otherwise</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
</feed>
