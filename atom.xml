<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Learning Three.js]]></title>
  <link href="http://learningthreejs.com/atom.xml" rel="self"/>
  <link href="http://learningthreejs.com/"/>
  <updated>2014-04-28T13:59:05+02:00</updated>
  <id>http://learningthreejs.com/</id>
  <author>
    <name><![CDATA[Jerome Etienne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Realistic Physics for Your 3D Game with THREEx.Oimo Game Extension For three.js]]></title>
    <link href="http://learningthreejs.com/blog/2014/04/28/realistic-physics-for-your-3d-game-with-threex-dot-oimo/"/>
    <updated>2014-04-28T17:12:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2014/04/28/realistic-physics-for-your-3d-game-with-threex-dot-oimo</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.oimo/examples/demo.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.oimo/master/examples/images/screenshot-threex-oimo-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="http://learningthreejs.com/blog/categories/threexaday/">&#8216;one threex a day&#8217; challenge</a>. This challenge is to publish every day one game extension for three.js! One per day, every day and that for 2month! In this post, we gonna talk about <a href="http://www.threejsgames.com/extensions/#threex.oimo">threex.oimo</a>.
threex.oimo is a <a href="http://www.threejsgames.com/extensions/">threex game extension for three.js</a>. It provides a <a href="http://en.wikipedia.org/wiki/Game_physics">realistic physics</a> easy to include in your own games. So you can take objects in your game and make them fall as if it was the real world! You can code a <a href="http://en.wikipedia.org/wiki/Pool_(cue_sports)">pool game</a> in a day!
You make rocks fall from the sky in a realistic fashion! Sky is the limit!
It is a warper over the excelent library <a href="https://github.com/lo-th/Oimo.js">oimo.js</a> physics library. <a href="https://plus.google.com/114170447432405103307/posts">lo-th</a>, the author does <a href="http://3dflashlo.wordpress.com/">a lot of crazy things</a>! Be sure to check it out!</p>

<p><a href='http://jeromeetienne.github.io/threex.oimo/examples/demo.html' target='_blank'><input type="button" value='Try Threex.oimo Demo Now'></a></p>

<p>To see the <a href="http://learningthreejs.com/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto! <strong>&#8220;A THREEx extension a day, gets your game on its way!&#8221;</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/wESF0NdMWBE" frameborder="0" allowfullscreen></iframe>


<h1>Show Don&#8217;t Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.oimo/examples/crates.html">examples/crates.html</a>
[<a href="https://github.com/jeromeetienne/threex.oimo/blob/master/examples/crates.html">view source</a>] :
It shows a slow motion demo of a football hitting a wall of crates.</li>
<li><a href="http://jeromeetienne.github.io/threex.oimo/examples/basic.html">examples/basic.html</a>
[<a href="https://github.com/jeromeetienne/threex.oimo/blob/master/examples/basic.html">view source</a>] :
It shows a bunch of cube and sphere falling on a ground.</li>
<li><a href="http://jeromeetienne.github.io/threex.oimo/examples/demo.html">examples/demo.html</a>
[<a href="https://github.com/jeromeetienne/threex.oimo/blob/master/examples/demo.html">view source</a>] :
It shows a more elaborate rendering. Planets falling down a pyramid in space.</li>
</ul>


<iframe width="100%" height="480" src="http://jeromeetienne.github.io/threex.oimo/examples/demo.html" frameborder="0" allowfullscreen></iframe>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;script src='threex.oimo.js'&gt;&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bower install threex.oimo</span></code></pre></td></tr></table></div></figure>


<h1>How To Use It</h1>

<p>Well first you need to create a oimo.js world. You do that like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var world   = new OIMO.World()</span></code></pre></td></tr></table></div></figure>


<p>Then, at every frame, update your mesh position/rotation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.step()</span></code></pre></td></tr></table></div></figure>


<p>Then you need to create physics bodies and make them move</p>

<h2>.createBodyFromMesh()</h2>

<p>It will create the <code>IOMO.Body</code> from a three.js mesh you give it.
Currently it support <code>THREE.CubeGeometry</code> and <code>THREE.SphereGeometry</code>. First create a normal <code>THREE.Mesh</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var geometry    = new THREE.CubeGeometry(1,1,1)
</span><span class='line'>var material    = new THREE.MeshNormalMaterial()
</span><span class='line'>var mesh    = new THREE.Mesh( geometry, material )
</span><span class='line'>scene.add(mesh)</span></code></pre></td></tr></table></div></figure>


<p>Then you create the <code>IOMO.Body</code> for it</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var body    = THREEx.Iomo.createBodyFromMesh(world, mesh)</span></code></pre></td></tr></table></div></figure>


<h2>.Body2MeshUpdater()</h2>

<p>It will update the position/rotation of a <code>THREE.Mesh</code>
based on a position/rotation of a <code>IOMO.Body</code>. You need
this to see your meshes moves according to oimo.js physics.
First you create the object</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var updater = new THREEx.Iomo.Body2MeshUpdater(body, mesh)</span></code></pre></td></tr></table></div></figure>


<p>Then, at every frame, update your mesh position/rotation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>updater.update()</span></code></pre></td></tr></table></div></figure>


<h2>.Stats()</h2>

<p>It will display statistic from oimo.js, it may be useful to know what is going on.
It acts very much like
<a href="">mrdoob&#8217;s stats</a>
or
<a href="">threex.rendererstats</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var oimoStats   = new THREEx.Iomo.Stats(world)
</span><span class='line'>document.body.appendChild(oimoStats.domElement)</span></code></pre></td></tr></table></div></figure>


<p>Then, at every frame, update it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>oimoStats.update()</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple and Easy To use Crates Models to Get Your Game Started with THREEx.Crates Game Extension For THREE.js]]></title>
    <link href="http://learningthreejs.com/blog/2014/04/25/simple-and-easy-to-use-crates-models-to-get-your-game-started-with-threex-dot-crates-game-extension-for-three-dot-js/"/>
    <updated>2014-04-25T13:44:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2014/04/25/simple-and-easy-to-use-crates-models-to-get-your-game-started-with-threex-dot-crates-game-extension-for-three-dot-js</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.crates/examples/basic.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.crates/master/examples/images/screenshot-threex-crates-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="http://learningthreejs.com/blog/categories/threexaday/">&#8216;one threex a day&#8217; challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.crates">threex.crates</a>.
threex.crates is a <a href="http://www.threejsgame.com/extensions/">threex game extension for three.js</a>.
It provides <a href="http://en.wikipedia.org/wiki/Crate">crates</a> models, 3 of them to be accurate.
Yeah you heard me, this is only boxes of wood. Why doing an extension for that?
Well, because crates are like a myth in 3d graphics, we put them everywhere.
So if you need crates to easily put in your game, you know where to find them now :)</p>

<p><a href='http://jeromeetienne.github.io/threex.crates/examples/basic.html' target='_blank'><input type="button" value='Try Threex.crates Demo Now' /></a></p>

<p>To see the <a href="http://learningthreejs.com/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>&#8220;A THREEx extension a day, gets your game on its way!&#8221;</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/zEmGzBc8nSY" frameborder="0" allowfullscreen></iframe>


<h1>Show Don&#8217;t Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.crates/examples/basic.html">examples/basic.html</a>
[<a href="https://github.com/jeromeetienne/threex.crates/blob/master/examples/basic.html">view source</a>] :
It shows all the balls on a single screen.</li>
</ul>


<iframe width="100%" height="480" src="http://jeromeetienne.github.io/threex.crates/examples/basic.html" frameborder="0" allowfullscreen></iframe>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;threex.crates.js&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower install threex.crates
</span></code></pre></td></tr></table></div></figure>


<h1>How To Use It</h1>

<p>To create a crate0, just do</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>var <span class="nv">mesh</span> <span class="o">=</span> THREEx.Crates.createCrate0<span class="o">()</span>
</span><span class='line'>scene.add<span class="o">(</span>mesh<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To create a crate1, just do</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>var <span class="nv">mesh</span> <span class="o">=</span> THREEx.Crates.createCrate1<span class="o">()</span>
</span><span class='line'>scene.add<span class="o">(</span>mesh<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>To create a crate2, just do</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>var <span class="nv">mesh</span> <span class="o">=</span> THREEx.Crates.createCrate2<span class="o">()</span>
</span><span class='line'>scene.add<span class="o">(</span>mesh<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crazy Post Processing Color Effects To Change Your Game Ambiance With Threex.coloradjust Game Extension For Three.js]]></title>
    <link href="http://learningthreejs.com/blog/2014/04/24/crazy-post-processing-color-effects-to-change-your-game-ambiance-with-threex-dot-coloradjust-game-extension-for-three-dot-js/"/>
    <updated>2014-04-24T13:47:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2014/04/24/crazy-post-processing-color-effects-to-change-your-game-ambiance-with-threex-dot-coloradjust-game-extension-for-three-dot-js</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.coloradjust/examples/demo.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.coloradjust/master/examples/images/screenshot-threex-coloradjust-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="http://learningthreejs.com/blog/categories/threexaday/">&#8216;one threex a day&#8217; challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.coloradjust">threex.coloradjust</a>.
threex.coloradjust is a
<a href="http://www.threejsgames.com/extensions/">threex game extension for three.js</a>.
It provides a color adjustement in post processing.
It happens on the whole screen and changes every colors giving a whole new ambiance to your games.
It includes smooth transitions between each ambiance.
There are 22 ambiances going from &#8216;sepia&#8217;, to &#8216;thermal&#8217;, or &#8216;radioactive&#8217;.
I highly recommend &#8216;nightvision&#8217; if your game is about fps shooting at night!
It is very flexible, you can build your own ambiance with any image editing software.
It is ported from
<a href="http://webglsamples.googlecode.com/hg/color-adjust/color-adjust.html">color-adjust demo</a>
by
<a href="http://greggman.com/">greggman</a>.
Here is a <a href="http://www.youtube.com/watch?v=rfQ8rKGTVlg#t=25m03s">video</a>
where you can see greggman explaining the underlying technic.
It explains how to do 3d texture in webgl! :)</p>

<p><a href='http://jeromeetienne.github.io/threex.coloradjust/examples/demo.html' target='_blank'><input type="button" value='Try Threex.coloradjust Demo Now' /></a></p>

<p>To see the <a href="http://learningthreejs.com/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>&#8220;A THREEx extension a day, gets your game on its way!&#8221;</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/jhCKQqVIcG0" frameborder="0" allowfullscreen></iframe>


<h1>Show Don&#8217;t Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.coloradjust/examples/basic.html">examples/basic.html</a>
[<a href="https://github.com/jeromeetienne/threex.coloradjust/blob/master/examples/basic.html">view source</a>] :
It shows how to use the <code>THREEx.ColorAdjust.Renderer</code>.
It changes the color cube randomly every 3-seconds just to put some animations</li>
<li><a href="http://jeromeetienne.github.io/threex.coloradjust/examples/demo.html">examples/demo.html</a>
[<a href="https://github.com/jeromeetienne/threex.coloradjust/blob/master/examples/demo.html">view source</a>] :
It show an video with the adjusted colors.
You can play with it to get a better feeling of what this effect can do for you.</li>
</ul>


<iframe width="100%" height="480" src="http://jeromeetienne.github.io/threex.coloradjust/examples/demo.html" frameborder="0" allowfullscreen></iframe>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;threex.coloradjust.js&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bower install threex.coloradjust
</span></code></pre></td></tr></table></div></figure>


<h1>How To Use It</h1>

<p>It build the passes for the color effect.
It exposes <code>colorPass.colorPass</code> for a <code>THREE.EffectComposer</code> instance.</p>

<p>Create an instance</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>var <span class="nv">colorPasses</span> <span class="o">=</span> new THREEx.ColorAdjust.Passes<span class="o">()</span>;
</span></code></pre></td></tr></table></div></figure>


<p>Everytime you render the scene, be sure to update it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>colorPasses.update<span class="o">(</span>delta, now<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you add those passes to an <code>THREE.EffectComposer</code> like that</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>colorPasses.addPassesTo<span class="o">(</span>composer<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Tuning</h3>

<p>This module comes with a set of predefined <em>color cubes</em> : 22 of them to be exact.
You can set the color cube you want: one of the 22 already provided, or your own.
It default to <code>default</code>.
Here is the full list of available colors adjustement : default,
monochrome,
sepia,
saturated,
posterize,
inverse,
color-negative,
high-contrast-bw,
funky-contrast,
nightvision,
thermal,
black-white,
hue-plus-60,
hue-plus-180,
hue-minus-60,
red-to-cyan,
blues,
infrared,
radioactive,
goolgey,
bgy.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// set color adjustement to &#39;nightvision&#39;</span>
</span><span class='line'><span class="nx">colorPasses</span><span class="p">.</span><span class="nx">setColorCube</span><span class="p">(</span><span class="s1">&#39;nightvision&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is a smooth linear transition between the old colorCube and the new colorCube.
You can tune the delay like this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// set the transition delay to 2 seconds</span>
</span><span class='line'><span class="nx">colorPasses</span><span class="p">.</span><span class="nx">delay</span>   <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://news.ycombinator.com/item?id=7639554">Discuss this post on Hacker News.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One THREEx a Day Gets Your Game On Its Way! A Challenge!]]></title>
    <link href="http://learningthreejs.com/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/"/>
    <updated>2014-04-22T17:51:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge</id>
    <content type="html"><![CDATA[<p>Hello everybody! I’m working on a new project that I want to share with you. But first, let me start by telling you what inspired me to do it.</p>

<p>Last week, I read an interesting article written by John Resig called <a href="http://ejohn.org/blog/write-code-every-day/">Write code everyday</a>. He explains how he succeed in efficiently accomplishing his side projects. This article opened my eyes. It was like a revelation, a procedure that I just had to apply to my own work. An answer to the questions I had been asking myself: How could I be more efficient? How could I be more disciplined and improve my execution?</p>

<p>The tactic that Resig decided to practice to improve his productivity was quite simple: He tried working on his side projects a little everyday, for a delimited amount of time, and it worked! He didn’t feel like a failure when he didn&#8217;t do enough &#8220;quality&#8221; work during the weekend anymore! He found a way to organize his schedule, do his work, while still devoting time to leisure activities. I find this amazingly intelligent!</p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/CShTdamWAzg" frameborder="0" allowfullscreen></iframe>


<p>Resig’s work inspired me. So, I wanna try to do something similar: I want to publish a three.js game extension every day! Yes I know, it’s a challenge! But I wanna see if Resig’s tactic helps me gain more discipline when publishing my code. The idea is to publish one every day of the week, from Monday to Friday, one per day for two months, except on the weekends, because well, one has to rest at some point :)</p>

<p>Ok, so you already know that I love three.js, a javascript 3D library that makes Webgl. Three.js is the new up and coming technology, it’s hot, cutting-edge, and it has been deployed worldwide. Well, now I would really love to help you write your own games with it! I think the best way to do this is by publishing one three.js game extension per day. I have an enormous amount of information, and code, to share with you. I just have to get it out there for you to see!</p>

<p>Three.js Game extensions will make the dream of developing your own 3d video game come true. My moto is <strong>“One threex per day, gets your game on it’s way!”</strong> I’ve got over <a href="http://www.threejsgames.com/extensions/">40 cool extensions</a> that could be used to facilitate the development of 3D games on the web. And I wanna share this knowledge with the world!</p>

<p><a href='http://jeromeetienne.github.io/stellar7/' target='_blank'><img class="right" src="http://learningthreejs.com/data/2014-04-22-one-threex-a-day-gets-your-game-on-its-way-a-challenge/images/stellar7-screenshot.png" width="444" height="250"></a>
Most of the three.js game extensions that I will publish support require.js and it would be very easy to add them to your own game. With these extensions you can actually learn to code 3D mini-games in less than an hour, like <a href="http://learningthreejs.com/blog/2014/01/10/flying-spaceship-minigame/">Flying Spaceships</a> or to create more detailed video games with a lot of cool post-processing effects, like <a href="http://jeromeetienne.github.io/stellar7/">Stellar7</a>. Just to give you an idea, I coded Stellar7 in only 2 weeks thanks to threex extensions! That&#8217;s a record :)</p>

<p>The three.js game extensions will teach you real skills and tools to help you develop cool stuff on 3D. The best part is that you can reproduce everything you learn cause it’s all open source and available to anyone!</p>

<p>The Three.Js Games mission is to ignite the spark of genius creativity that every developer has.</p>

<p>I hope you enjoy it :)</p>

<p>That’s all folks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Have You Seen YourSelf when You Are Drunk ? - making of a fun WebGL Demo]]></title>
    <link href="http://learningthreejs.com/blog/2014/02/08/have-you-seen-yourself-when-you-are-drunk/"/>
    <updated>2014-02-08T12:49:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/02/08/have-you-seen-yourself-when-you-are-drunk</id>
    <content type="html"><![CDATA[<p>This post is about a demo called <a href="https://github.com/jeromeetienne/demo.seenyourselfdrunk">&#8220;Have you seen yourself When you are Drunk ?&#8221;</a>. What is it all about ?
Well have you seen yourself when you are drunk ?</p>

<p><img class="right" src="http://learningthreejs.com/data/2014-02-08-have-you-seen-yourself-when-you-are-drunk/images/angryBoss.jpg" width="250" height="250"></p>

<p>You don&#8217;t look at your best, but you don&#8217;t remember the morning after, lucky you. So now you are sober, this demo will show you how you look when you are drunk…
Hopefully this will make you realize that <em>alcohol abuse is a bad thing</em>! And that we could
<em>save the world by stopping it</em>!</p>

<p><a href='http://jeromeetienne.github.io/demo.seenyourselfdrunk/' target='_blank'><input type="button" value='Try Demo Now' /></a></p>

<p>Or it will just show some cool webgl effects… Honnestly i wasnt that sure of its exact purpose. Well, up to you to pick :)
In other words, this is a webgl demo which reads your webcam, to show yourself on screen, then it does some screen deformations to give you an idea of what you look like when you are drunk.</p>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/yl2Qd9T3Lq4" frameborder="0" allowfullscreen></iframe>


<p>We will learn how to code that. So first the tools of the trade…</p>

<!-- more -->


<h2>Used Tools</h2>

<p>This demo is done with 2 threex extensions
<a href="https://github.com/jeromeetienne/threex.toxicpproc">threex.toxicpproc</a>
,
<a href="https://github.com/jeromeetienne/threex.videotexture">threex.videotexture</a>
and our lovely
<a href="http://threejs.org">three.js</a> obviously.
<a href="https://github.com/jeromeetienne/threex.videotexture">threex.videotexture</a>
is, according to <a href="http://jeromeetienne.github.io/threex/#threex.videotexture">threex page</a> :</p>

<blockquote><p>handles videos in texture. It is possible to put html5 video output in texture, even put the webcam in it, or to connect it to WebAudio API to get localized sounds.</p></blockquote>

<p>We will use it to read the webcam and display it full page.
<a href="https://github.com/jeromeetienne/threex.toxicpproc">threex.toxicpproc</a>
is, according to <a href="http://jeromeetienne.github.io/threex/#threex.toxicpproc">threex page</a> :</p>

<blockquote><p>an intoxicated post-processing effect. You can easily add it in your game to simulate the player is drunk. It provides various levels: sober, drunk, high and wasted.</p></blockquote>

<p>We will use it to deform the video from the webcam and makes you look drunk.</p>

<h2>Webcam For Texture</h2>

<p>So the first thing is to get webcam on fullpage.
For that we use <a href="https://github.com/jeromeetienne/threex.videotexture">threex.videotexture</a>.
It does video textures, either you take this video from a url, like this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// create the videoTexture
</span><span class='line'>var videoUrl  = 'sintel.ogv';
</span><span class='line'>var videoTexture= new THREEx.VideoTexture(videoUrl)
</span><span class='line'>// on every render, update it
</span><span class='line'>onRenderFcts.push(function(delta, now){
</span><span class='line'>      videoTexture.update(delta, now)
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>Or you take the video live from the webcam, like this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// create the webcamTexture
</span><span class='line'>var videoTexture  = new THREEx.WebcamTexture()
</span><span class='line'>// on every render, update it
</span><span class='line'>onRenderFcts.push(function(delta, now){
</span><span class='line'>      videoTexture.update(delta, now)
</span><span class='line'>})    </span></code></pre></td></tr></table></div></figure>


<p>Then use <code>videoTexture.texture</code> in your materials to
have the texture of the webcam. So let&#8217;s see how we will
compose our scene.</p>

<h2>Scene Composition</h2>

<p>We need a Plane which take the full page, and we will apply our webcam texture to it.
So first there is an orthographic camera. Perspective is useless in this case, and make computations much more complex :)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var camera = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2
</span><span class='line'>     ,  window.innerHeight / 2, window.innerHeight / -2, -100, 100);</span></code></pre></td></tr></table></div></figure>


<p>Then, there is a <code>THREE.PlaneGeometry</code> mesh
using full screen for this camera.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var geometry = new THREE.PlaneGeometry( window.innerWidth, window.innerHeight )
</span><span class='line'>var material  = new THREE.MeshBasicMaterial();
</span><span class='line'>var mesh  = new THREE.Mesh(geometry, material)
</span><span class='line'>scene.add(mesh)</span></code></pre></td></tr></table></div></figure>


<p>Then we apply our <code>videoTexture</code> to this material. Thus
we see the webcam on this plan :)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>material.map = videoTexture.texture</span></code></pre></td></tr></table></div></figure>


<p>So we got our face on full screen, cool for ego i guess :)
Now let&#8217;s apply some deformation to it!</p>

<h2>Post Processing and Rendering</h2>

<p>Usually to render a scene, we use the following code.
This is when we render the scene directly on screen.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>renderer.render( scene, camera )</span></code></pre></td></tr></table></div></figure>


<p>We will use a post processing chain with <code>THREE.EffectComposer</code>. It process the screen as a 2d texture.
More specifically, we will use <a href="https://github.com/jeromeetienne/threex.toxicpproc">threex.toxicpproc</a>, a three.js extension which provide post processing of drunk effects. It got 4 presets <em>sober</em>, <em>drunk</em>, <em>high</em> and <em>wasted</em>. There is a nice tweening when you switch between presets so transitions looks smooth.
Try it yourself in <a href="http://jeromeetienne.github.io/threex.toxicpproc/examples/basic.html">this demo</a>.</p>

<h3>THREEx.ToxicPproc</h3>

<p>So First lets instanciate a <code>THREEx.ToxicPproc.Passes</code>. It will setup the effect composers passes for our effect. We set it to the <code>drunk</code> preset.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var toxicPasses  = new THREEx.ToxicPproc.Passes('drunk')
</span><span class='line'>// on every render you update it
</span><span class='line'>onRenderFcts.push(function(delta, now){
</span><span class='line'>  toxicPasses.update(delta, now)
</span><span class='line'>})</span></code></pre></td></tr></table></div></figure>


<p>If you want to create other presets, it is entirely possible. There is even a <a href="https://code.google.com/p/dat-gui/">Dat.GUI</a> provided for you to tweak buttons until it fits your needs. You see it in <a href="http://jeromeetienne.github.io/threex.toxicpproc/examples/basic.html">the demo</a>.
You use it like this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var datGui   = new dat.GUI()
</span><span class='line'>THREEx.addToxicPasses2DatGui(toxicPasses, datGui)</span></code></pre></td></tr></table></div></figure>


<h3>THREE.EffectComposer</h3>

<p>Now that we got the toxicpproc passes, let&#8217;s create the <code>THREE.EffectComposer</code> to run it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var composer = new THREE.EffectComposer(renderer);</span></code></pre></td></tr></table></div></figure>


<p>We render the scene on a texture</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var renderPass   = new THREE.RenderPass( scene, camera );
</span><span class='line'>composer.addPass( renderPass );</span></code></pre></td></tr></table></div></figure>


<p>We send this texture to <code>threex.toxicpproc</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>toxicPasses.addPassesTo(composer)</span></code></pre></td></tr></table></div></figure>


<p>Now we just have to tell the composer the last pass is the one to be rendered on screen.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>composer.passes[composer.passes.length -1 ].renderToScreen   = true;</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Update on each Frame</h3>

<p>We got the rendering to do on each frame. Usually we do</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>renderer.render( scene, camera )</span></code></pre></td></tr></table></div></figure>


<p>But here we render thru the effect composer, so we do</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// render thru composer
</span><span class='line'>composer.render(delta)</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Ok so you have learn how to code a demo like
<a href="https://github.com/jeromeetienne/demo.seenyourselfdrunk">&#8220;Have you seen yourself When you are Drunk ?&#8221;</a>
Pretty Cool!
Now you can get more <a href="http://jeromeetienne.github.io/threex/">threex</a> extensions and
play with it to build your own demos.
This is All for Today Folks, have fun! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Game Workshop: Let's Do a Fighting Spaceship Minigame Together]]></title>
    <link href="http://learningthreejs.com/blog/2014/01/10/flying-spaceship-minigame/"/>
    <updated>2014-01-10T11:05:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/01/10/flying-spaceship-minigame</id>
    <content type="html"><![CDATA[<p>In this post, we are going to present how to do a mini-game called &#8220;Flying Spaceships&#8221;.
We are going to do it together in 40 minutes.
You can read the slides or watch the video to follow along!
Just look at this <a href="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/slides/step99.html">demo</a>.
It uses <a href="http://threejs.org">three.js</a> for the 3D,
<a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html">WebAudio API</a>
for the sound and several <a href="http://jeromeetienne.github.io/threex/">threex extensions</a>
for stuff like spaceships and planets.
I love the fact that now we can code mini-games in less than an hour!
All that on the web, and with open source, so cool!</p>

<p><a href='http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/slides/slides/' target='_blank'><input type="button" value='Slides of the talk' /></a>
<a href='http://www.youtube.com/watch?v=s9pxStYvqrQ' target='_blank'><input type="button" value='Video of the talk' /></a>
<a href='http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/slides/step99.html' target='_blank'><input type="button" value='the result!' /></a></p>

<iframe width="425" height="349" src="http://www.youtube.com/embed/EEvEw5n1iEo" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>The Talk</h2>

<p>Here is the promised 40min video. Sit back and relax :)</p>

<iframe width="425" height="349" src="http://www.youtube.com/embed/s9pxStYvqrQ" frameborder="0" allowfullscreen></iframe>


<h2>The Slides</h2>

<p>Here are a screenshot of every slides.
Or you can directly look at the
<a href="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/slides/slides/">slides</a>.</p>

<p><img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide00.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide01.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide02.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide03.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide04.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide05.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide06.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide07.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide08.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide09.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide10.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide11.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide12.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide13.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide14.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide15.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide16.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide17.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide18.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide19.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide20.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide21.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide22.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide23.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide24.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide25.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide26.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide27.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide28.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide29.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide30.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide31.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide32.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide33.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide34.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide35.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide36.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide37.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide38.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide39.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide40.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide41.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide42.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide43.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide44.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide45.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide46.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide47.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide48.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide49.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide50.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide51.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide52.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide53.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide54.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide55.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide56.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide57.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide58.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide59.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide60.png" width="100%"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zero To Nyancat in 30 Seconds Flat!]]></title>
    <link href="http://learningthreejs.com/blog/2013/12/31/zero-to-nyancat-in-30-seconds-flat/"/>
    <updated>2013-12-31T11:05:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2013/12/31/zero-to-nyancat-in-30-seconds-flat</id>
    <content type="html"><![CDATA[<p>So, today we are gonna learn how to use Yeoman for
<a href="http://threejs.org">three.js</a>.
We are gonna create a Nyancat in WebGL, starting from nothing in only 30 seconds.
It was a challenge to see how fast we could reach using the yeoman tools.
Here is the
<a href="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/slides/demo/index.html">demo</a>
 we gonna build in 30 seconds :)
You are gonna see how easy it is through a talk i made at
<a href="http://parisjs.org/">parisjs</a>!
But first&#8230; what is yeoman? Well,
<a href="http://yeoman.io">yeoman</a>
is a &#8220;Modern Workflow for WebApps&#8221;.
It is composed of 3 tools:
<a href="http://bower.io">bower</a>, <a href="http://gruntjs.com">grunt</a> and <a href="http://yeoman.io/generators.html">yo</a>.</p>

<p>Let&#8217;s see how
<a href="http://yeoman.io">yeoman</a>
will help us ease up and speed up the work when we’re doing
<a href="http://threejs.org">three.js</a>.
You can look at the
<a href="www.youtube.com/watch?v=zeR_cpupZcQ">screencast</a>
of me doing the talk, or directly at the
<a href="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/slides/">slides</a> below.
If you are in a rush, here is the TL;DR executive summary. Have Fun :)</p>

<p><a href='http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/slides/' target='_blank'><input type="button" value='Slides of the talk' /></a>
<a href='http://www.youtube.com/watch?v=zeR_cpupZcQ' target='_blank'><input type="button" value='Video of the talk' /></a>
<a href='http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/slides/demo/index.html' target='_blank'><input type="button" value='the result!' /></a>
<a href='https://www.udemy.com/yeoman-for-threejs/' target='_blank'><input type="button" value='udemy course' /></a></p>

<p><strong>Update:</strong> I am experimenting with <a href="https://www.udemy.com">udemy</a> and made a course from this post. Check it out <a href="https://www.udemy.com/yeoman-for-threejs/">&#8220;Yeoman For Three.js&#8221;</a>. More than 30min of video :)</p>

<iframe width="425" height="349" src="http://www.youtube.com/embed/UNuRxyEm6qU" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2><strong>TL;DR;</strong></h2>

<p>To generate the boilerplate, just do</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yo threejs-boilerplate</span></code></pre></td></tr></table></div></figure>


<p>To install any <a href="http://jeromeetienne.github.io/threex/">threex extension for three.js</a>,
and
<a href="http://github.com/jeromeetienne/threex.nyancat/">threex.nyancat</a> in particular, do</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bower install threex.nyancat</span></code></pre></td></tr></table></div></figure>


<h2>Video Of The Talk</h2>

<iframe width="425" height="349" src="http://www.youtube.com/embed/zeR_cpupZcQ" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>Slides</h2>

<p>Here are a screenshot of every slides.
Or you can directly look at the
<a href="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/slides/">slides</a>.</p>

<p><img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide01.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide02.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide03.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide04.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide05.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide06.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide07.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide08.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide09.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide10.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide11.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide12.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide13.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide14.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide15.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide16.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide17.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide18.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide19.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide20.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide21.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide22.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide23.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide24.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide25.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide26.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide27.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide28.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide29.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide30.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide31.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide32.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide33.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide34.png" width="100%"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Make The Earth In WebGL?]]></title>
    <link href="http://learningthreejs.com/blog/2013/09/16/how-to-make-the-earth-in-webgl/"/>
    <updated>2013-09-16T10:13:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2013/09/16/how-to-make-the-earth-in-webgl</id>
    <content type="html"><![CDATA[<p>So today we gonna learn how to display the earth in webgl.
That will be a nice introduction to material and textures.
I got the idea while coding
<a href="http://github.com/jeromeetienne/threex.planets/">threex.planets</a>,
a three.js extension to easily display all the planets from the solar system based on
<a href="http://planetpixelemporium.com/planets.html">planetpixelemporium</a>. With this post, you will be able to feel like astronauts conquering the outer space for the day and creating your own galaxy. :)</p>

<iframe width="425" height="349" src="http://www.youtube.com/embed/-3ZCZUgvmo0" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<p>So we want to render the earth with three.js&#8230; It is surprisingly easy to code.
We gonna use the textures
from
<a href="http://planetpixelemporium.com/planets.html">planetpixelemporium</a>
and proceed step by step.
But first let me show you the
<a href="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/index.html">demo we gonna write</a> below.</p>

<iframe width="100%" height="349" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/index.html" frameborder="0" allowfullscreen></iframe>


<p>First the geometry with a sphere, then each texture and their various effects.
We will even add animations to make it more realistic and put it in context with
a star field background.</p>

<h2>Let&#8217;s Do a Plain Sphere</h2>

<p><img class="right" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/earth-color.png" width="320" height="240"></p>

<p>Well we first create a geometry for the sphere, then
we add a phong material,
create a mesh from them
and add it to the scene.
The first parameter, <code>0.5</code> is the radius.
The second parameter, <code>32</code>, is the segments in width
and
the third, <code>32</code>, is the segments in height.
We make it quite detailed for it to be nicer.
We pick <code>THREE.MeshPhongMaterial</code> to get
<a href="http://en.wikipedia.org/wiki/Phong_shading">phong shading</a>.
It provides <a href="http://en.wikipedia.org/wiki/Specular_reflection">specular reflection</a>
which will be used to get a shiny sea.</p>

<br clear='both'/>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">geometry</span>   <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SphereGeometry</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">material</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="p">()</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">earthMesh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">geometry</span><span class="p">,</span> <span class="nx">material</span><span class="p">)</span>
</span><span class='line'><span class="nx">scene</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">earthMesh</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cool but rather flat&#8230; What about a diffuse texture to add some colors to our sphere.</p>

<h2>Let&#8217;s Add a Diffuse Texture</h2>

<p><img class="right" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/earth-diffuse.png" width="320" height="240">
<img class="left" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/bower_components/threex.planets/images/earthmap1k.jpg" width="410" height="240"></p>

<p>Above you can see the
<a href="http://wiki.splashdamage.com/index.php/Basic_Texture_Overview">diffuse texture</a>
from
<a href="http://planetpixelemporium.com/planets.html">planetpixelemporium</a> to set the main color
of the surface.
When we apply it to a sphere, we get the image on the right.
Here is the code to produce it.</p>

<br clear='both'/>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">material</span><span class="p">.</span><span class="nx">map</span>    <span class="o">=</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageUtils</span><span class="p">.</span><span class="nx">loadTexture</span><span class="p">(</span><span class="s1">&#39;images/earthmap1k.jpg&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hmm rather cool but more relief on the earth would be cool. What about a bump texture now ?</p>

<h2>Let&#8217;s Add a Bump Texture</h2>

<p><img class="right" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/earth-bump.png" width="320" height="240">
<img class="left" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/bower_components/threex.planets/images/earthbump1k.jpg" width="410" height="240"></p>

<p>Above is the bump map we use.
According to <a href="http://en.wikipedia.org/wiki/Bump_mapping">wikipedia definition</a>,
a bump map &#8220;perturbates the surface normals of the object
using the perturbed normal during lighting calculations&#8221;.
Each of its pixels acts as a height on the surface.
See the result on the right.
The mountains appear more clearly thanks to their shadow.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">material</span><span class="p">.</span><span class="nx">bumpMap</span>    <span class="o">=</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageUtils</span><span class="p">.</span><span class="nx">loadTexture</span><span class="p">(</span><span class="s1">&#39;images/earthbump1k.jpg&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">material</span><span class="p">.</span><span class="nx">bumpScale</span> <span class="o">=</span> <span class="mf">0.05</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is possible to change how much the map affects lighting with <code>bumpScale</code> parameter.
Play with it to fit your needs. Now that we change the heights on various parts of the
earth, let&#8217;s change its shininess with a specular texture.</p>

<h2>Let&#8217;s Add a Specular Texture</h2>

<p><img class="right" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/earth-specular.png" width="320" height="240">
<img class="left" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/bower_components/threex.planets/images/earthspec1k.jpg" width="410" height="240"></p>

<p>Above is the <a href="http://wiki.splashdamage.com/index.php/Specular_Maps">specular map</a> we use.
Each pixel determines the intensity of
<a href="http://en.wikipedia.org/wiki/Specularity">specularity</a>.
In this case, only the sea is specular because water reflects water more than earth.
You can see it on the left with the white halo in the Gulf of Mexico.
You can control the specular color with <code>.specular</code> parameter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">material</span><span class="p">.</span><span class="nx">specularMap</span>    <span class="o">=</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageUtils</span><span class="p">.</span><span class="nx">loadTexture</span><span class="p">(</span><span class="s1">&#39;images/earthspec1k.jpg&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">material</span><span class="p">.</span><span class="nx">specular</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="s1">&#39;grey&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yeah but all this water, where does it go when it is hot ? It evaporates in the sky
and becomes clouds.</p>

<h2>Let&#8217;s Add a Cloud Layer</h2>

<p><img class="left" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/bower_components/threex.planets/images/earthcloudmap.jpg" width="320" height="240">
<img class="right" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/earth-cloud.png" width="320" height="240">
<img class="left" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/bower_components/threex.planets/images/earthcloudmaptrans.jpg" width="360" height="240"></p>

<br clear='both'/>


<p>We build <code>canvasCloud</code> and use it as texture.
It is based on the jpg images you see above:
one for the color and the other for the transparency.
We do that because
<a href="http://en.wikipedia.org/wiki/JPEG">jpg</a>
doesn&#8217;t handle an alpha channel.
So you need to make the code to build the texture based on those images.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">geometry</span>   <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SphereGeometry</span><span class="p">(</span><span class="mf">0.51</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">material</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">map</span>     <span class="o">:</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">(</span><span class="nx">canvasCloud</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">side</span>        <span class="o">:</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DoubleSide</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">opacity</span>     <span class="o">:</span> <span class="mf">0.8</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">transparent</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">depthWrite</span>  <span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">cloudMesh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">geometry</span><span class="p">,</span> <span class="nx">material</span><span class="p">)</span>
</span><span class='line'><span class="nx">earthMesh</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">cloudMesh</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We attach the cloudMesh to the earthMesh, thus they will move together.
Notice the parameters of the material.
We disable <code>depthWrite</code> and set <code>transparent</code> to warn three.js the
cloud mesh is transparent.
We set <code>side</code> to <code>DoubleSide</code> thus both sides will be visible.
This avoids artefacts to be on the edge of the earth.
Finaly we set <code>opacity</code> to make them more translucide.
The output is quite convincing but rather static. Let&#8217;s see what we can do about that!</p>

<h2>&#8220;And Yet it Moves&#8221;</h2>

<p>This is what
<a href="http://en.wikipedia.org/wiki/Galileo_Galilei">Galileo Galilei</a> said
about the earth. This sentence has a
<a href="http://en.wikipedia.org/wiki/And_yet_it_moves">interesting story</a>.
So i am thinking it would be cool to make our earth move too.
In your render loop, you simply do this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">onRenderFcts</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">delta</span><span class="p">,</span> <span class="nx">now</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">earthMesh</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span>  <span class="o">+=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">32</span> <span class="o">*</span> <span class="nx">delta</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>As a last step, we gonna animate the cloud layer too, to make it more realistic.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">onRenderFcts</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">delta</span><span class="p">,</span> <span class="nx">now</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">cloudMesh</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span>  <span class="o">+=</span> <span class="mi">1</span><span class="o">/</span><span class="mi">16</span> <span class="o">*</span> <span class="nx">delta</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Definitely better, but still we feel there is something missing.
What do we see in space ? Stars! duh :)</p>

<h2>Let&#8217;s Add a Star Field</h2>

<p><img class="right" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/galaxy_starfield.png" width="320" height="240"></p>

<p>We will see how to render the galaxy starfield.
The star field as you see it in the demo is an &#8220;environment sphere&#8221;,
aka it is a large sphere, we are in the center and we see what&#8217;s inside.
So we ask three.js to show the backside of the faces.
And we use the texture above as diffuse.
The above image is smaller than the actual one so you barely see the stars.</p>

<br clear='both'/>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// create the geometry sphere</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">geometry</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SphereGeometry</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
</span><span class='line'><span class="c1">// create the material, using a texture of startfield</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">material</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">()</span>
</span><span class='line'><span class="nx">material</span><span class="p">.</span><span class="nx">map</span>   <span class="o">=</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageUtils</span><span class="p">.</span><span class="nx">loadTexture</span><span class="p">(</span><span class="s1">&#39;images/galaxy_starfield.png&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">material</span><span class="p">.</span><span class="nx">side</span>  <span class="o">=</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">BackSide</span>
</span><span class='line'><span class="c1">// create the mesh based on geometry and material</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mesh</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">geometry</span><span class="p">,</span> <span class="nx">material</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>threex.planets - All Solar System&#8217;s Planets Done For You</h2>

<p>While i was at it, i made
<a href="https://github.com/jeromeetienne/threex.planets/">threex.planets</a>,
a
<a href="http://jeromeetienne.github.io/threex/">threex</a>
extension for
<a href="http://threejs.org">three.js</a>.
It provides all the planets from the solar system to be easily usable in your own demo or games.
It is based on
<a href="http://planetpixelemporium.com/planets.html">planetpixelemporium</a>
textures using the same technics described in this post.
You can see it live
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html">here</a>.
First, the mythical
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Sun">sun</a>,
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Mercury">mercury</a> and
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Venus">venus</a>.</p>

<p><img class="left" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-sun.png" width="230" height="172">
<img class="left" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-mercury.png" width="230" height="172">
<img class="left" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-venus.png" width="230" height="172"></p>

<br clear='both'/>


<p>Now the best known, the
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Earth">earth</a>
with its cloud that we previously detailed in this post, the
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Moon">moon</a>
which isn&#8217;t
an actual planet but still we could not do without, and
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Mars">mars</a>
with the little green people.</p>

<p><img class="left" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-earth.png" width="230" height="172">
<img class="left" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-moon.png" width="230" height="172">
<img class="left" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-mars.png" width="230" height="172"></p>

<br clear='both'/>


<p>Follow,
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Jupiter">jupiter</a>,
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Saturn">saturn</a> and
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Uranus">uranus</a>.
I love the rings there. I added shadow casting to enhance realism.</p>

<p><img class="left" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-jupiter.png" width="230" height="172">
<img class="left" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-saturn.png" width="230" height="172">
<img class="left" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-uranus.png" width="230" height="172"></p>

<br clear='both'/>


<p>And the last two, the furthest ones,
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Neptune">neptune</a>
and
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Pluto">pluto</a></p>

<p><img class="left" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-neptune.png" width="230" height="172">
<img class="left" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-pluto.png" width="230" height="172"></p>

<br clear='both'/>


<h2>Conclusion</h2>

<p>In this post, we saw how to make a nice looking earth with animated clouds with a star field in
the background. I think it is a nice result for the amount of work.
I hope it was useful to discuver the various roles of textures.
Now you can use this to make even nicer demos, like
<a href="http://jeromeetienne.github.io/threex.planets/examples/earth.html">this one</a>.
It shows the same Earth, that we just saw how to do, with the moon close to it.
We add shadow casting and a nice atmosphere shader and the result is quite convincing.</p>

<p>That&#8217;s all for today folks. Have Fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Do A Procedural City In 100 Lines]]></title>
    <link href="http://learningthreejs.com/blog/2013/08/02/how-to-do-a-procedural-city-in-100lines/"/>
    <updated>2013-08-02T12:47:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2013/08/02/how-to-do-a-procedural-city-in-100lines</id>
    <content type="html"><![CDATA[<p>This post explains how to code
<a href="http://www.mrdoob.com/lab/javascript/webgl/city/01/">&#8220;city&#8221;</a>
, a  demo <a href="https://twitter.com/mrdoob/status/350730133319073792">recently released</a> by
<a href="http://mrdoob.com">@mrdoob</a>.
He built a fully procedural city in 100-lines of javascript.
I found the algorithm very elegant, a simple and efficient solution.
So I made a post explaining it.</p>

<iframe width="425" height="349" src="http://www.youtube.com/embed/huTF047XVvQ" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>A Few Remarks on the Algorithm</h2>

<p>It always helps to get a big picture before going down to the details.
The used algorithm is <a href="http://en.wikipedia.org/wiki/Procedural_generation">fully procedural</a>.
This means the whole city is built dynamically, so no download.
It is quite elegant as well.
The algorithm to generate the city in 3d is less than 100 lines long.
What is this algo in a nutshell?
Every building is a cube, they got random size and position.
Simple enough ?
It may seem far from realism but it is ok.
The illusion is surprisingly convincing if you fly over at low altitude.</p>

<p>From a performance point of view, all buildings are merged into a single geometry,
with a single material.
As a cherry on the cake, we remove the bottom face as it is never seen.
It is very efficient as there is no shader swap and a single draw call.</p>

<p>To improve realism, we simulate ambient occlusion thru a cheap trick
using <code>vertexColor</code>.
In the city, at the street level you got shadow from the other buildings.
So the bottom of the buildings are darker than the top.
We can reproduce this effect with <code>vertexColor</code>.
We take the bottom vertices of the building and make them darker than the top.</p>

<h2>Let&#8217;s get started</h2>

<p>To explain those 100 lines, we will explain it step by step:
First, we <em>&#8220;generate the base geometry for the building&#8221;</em>.
Then we use this geometry to know <em>&#8220;where to place buildings in the city&#8221;</em>.
We use some clever trick <em>&#8220;using vertexColor for ambient occlusion&#8221;</em>.
Then we <em>&#8220;merge all buildings to make a city&#8221;</em>, thus the whole city may
be drawn in a single draw call.
At the end we detail the <em>&#8220;procedural generation of building’s texture&#8221;</em>.</p>

<p>Ok so let&#8217;s get started!!</p>

<h2>Generate the base Geometry for the building</h2>

<p>We build a base geometry of our building.
It will be reused several time while building the whole city.
So we build a simple CubeGeometry</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">geometry</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeGeometry</span><span class="p">(</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We change the pivot point to be at the bottom of the cube, instead of its center.
So we translate the whole geometry.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">geometry</span><span class="p">.</span><span class="nx">applyMatrix</span><span class="p">(</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">().</span><span class="nx">makeTranslation</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we remove the bottom face.
This is an optimisation.
The bottom face of a building is never seen by the viewer as it is always on the ground.
It is useless and we remove it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">geometry</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we fix the <a href="http://en.wikipedia.org/wiki/UV_mapping">UV mapping</a> for the roof face.
We set them to the single coordinate <code>(0,0)</code>.
So the roof will be the same color as a floor row.
As each face of the building is using a single texture, it can be drawn in a single draw call.
Sweet trick for optimisation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">geometry</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'><span class="nx">geometry</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'><span class="nx">geometry</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">2</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'><span class="nx">geometry</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">3</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok now that we got the geometry of a single building, let&#8217;s assemble buildings together to make a city!</p>

<h2>Where to place buildings in the city</h2>

<p>Well&#8230; to be honest we put them anywhere.
All is random ;)
Obviously, there are collisions but the illusion is nice if you fly at low altitude.
So first, we put the building at random position.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">buildingMesh</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">200</span> <span class="o">-</span> <span class="mi">100</span> <span class="p">)</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="nx">buildingMesh</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">200</span> <span class="o">-</span> <span class="mi">100</span> <span class="p">)</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we put a random rotation in Y.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">buildingMesh</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we change the mesh.scale to change the building size.
First how wide and deep a building can be.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">buildingMesh</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span>  <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">50</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="nx">buildingMesh</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">z</span>  <span class="o">=</span> <span class="nx">buildingMesh</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then how high it is.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">buildingMesh</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span>  <span class="o">=</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">buildingMesh</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">+</span> <span class="mi">8</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&#8217;s the deal with all those multiplication of <code>Math.random()</code> ?
Well it is a way to change the statistic distribution of the result
and center it closer to 0. <code>Math.random()</code> is between 0 and 1
and got an average of 0.5. <code>Math.random() * Math.random()</code> is
between 0 and 1 but got an average of 0.25. <code>Math.random() * Math.random() * Math.random()</code>
got an average of 0.125 and so on.
That&#8217;s it :)
We got the position/rotation/scale of our building all set.
Now let&#8217;s set its color, and how to use it to simulate shadows.</p>

<h3>Using VertexColor for Ambient Occlusion</h3>

<p><img class="right" src="http://learningthreejs.com/data/2013-08-02-how-to-do-a-procedural-city/screenshots/screenshot-building-with-vertexcolor-small.png"></p>

<p>In a city with lots of buildings, the bottom of the building tends to be darker than the top.
This is because the sun light hits the top harder than the bottom, at the bottom you have the shadow of another building.
This is what we call
<a href="http://http.developer.nvidia.com/GPUGems/gpugems_ch17.html">ambient occlusion</a> in graphic programming.
This concept may be implemented in various ways:
for example in screen space with <a href="http://en.wikipedia.org/wiki/Screen_space_ambient_occlusion">screen space ambient occlusion or ssao</a>
or in this
<a href="http://threejs.org/examples/webgl_geometry_minecraft_ao.html">minecraft example from three.js</a></p>

<p><img class="left" src="http://learningthreejs.com/data/2013-08-02-how-to-do-a-procedural-city/screenshots/screenshot-building-without-vertexcolor-small.png"></p>

<p>With three.js, it is is possible to assign a color to a vertice.
It will alter the final color of the face.
We gonna use that to simulate shadows at the bottom of building.
First we define the base colors for the part which receives lights, and the ones
which get shadows.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">light</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span> <span class="mh">0xffffff</span> <span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">shadow</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span> <span class="mh">0x303050</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Those are constants for each building. Now we need to get a color
for this particular building. We put some randomness for variety.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">baseColor</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">().</span><span class="nx">setRGB</span><span class="p">(</span> <span class="nx">value</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mf">0.1</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">value</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mf">0.1</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to assign the .vertexColor every vertex of every face.
If the face is a top face, we use <code>baseColor</code> of the building.
If it is a side face, we use <code>baseColor</code> multiplied by our <code>light</code>
for the top vertices and <code>shaddow</code> for the bottom vertices,
as cheap ambient occlusion.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// set topColor/bottom vertexColors as adjustement of baseColor</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">topColor</span>  <span class="o">=</span> <span class="nx">baseColor</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">multiply</span><span class="p">(</span> <span class="nx">light</span> <span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">bottomColor</span> <span class="o">=</span> <span class="nx">baseColor</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">multiply</span><span class="p">(</span> <span class="nx">shadow</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// set .vertexColors for each face</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">geometry</span>  <span class="o">=</span> <span class="nx">buildingMesh</span><span class="p">.</span><span class="nx">geometry</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">jl</span> <span class="o">=</span> <span class="nx">geometry</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">jl</span><span class="p">;</span> <span class="nx">j</span> <span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="nx">j</span> <span class="o">===</span> <span class="mi">2</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// set face.vertexColors on root face</span>
</span><span class='line'>    <span class="nx">geometry</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span> <span class="nx">j</span> <span class="p">].</span><span class="nx">vertexColors</span> <span class="o">=</span> <span class="p">[</span> <span class="nx">baseColor</span><span class="p">,</span> <span class="nx">baseColor</span><span class="p">,</span> <span class="nx">baseColor</span><span class="p">,</span> <span class="nx">baseColor</span> <span class="p">];</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// set face.vertexColors on sides faces</span>
</span><span class='line'>    <span class="nx">geometry</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span> <span class="nx">j</span> <span class="p">].</span><span class="nx">vertexColors</span> <span class="o">=</span> <span class="p">[</span> <span class="nx">topColor</span><span class="p">,</span> <span class="nx">bottomColor</span><span class="p">,</span> <span class="nx">bottomColor</span><span class="p">,</span> <span class="nx">topColor</span> <span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We got a single building fully setup. Now let&#8217;s make a city with many buildings.</p>

<h2>Merge all buildings to make a city</h2>

<p>To make our city, we gonna merge 20000 buildings together.
So we gonna loop and apply the above formulas for each building we add.
We have already seen that reducing draw calls is good for performance.
see <a href="http://learningthreejs.com/blog/2011/10/05/performance-merging-geometry/">&#8220;Performance: Merging Geometry&#8221;</a> post.
Here all buildings share the same material, so we gonna merge them all
in a single geometry.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">cityGeometry</span><span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">();</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">20000</span><span class="p">;</span> <span class="nx">i</span> <span class="o">++</span> <span class="p">){</span>
</span><span class='line'>  <span class="c1">// set the position/rotation/color the building in the city</span>
</span><span class='line'>  <span class="c1">// ... </span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// merge it with cityGeometry - very important for performance</span>
</span><span class='line'>  <span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">merge</span><span class="p">(</span> <span class="nx">cityGeometry</span><span class="p">,</span> <span class="nx">buildingMesh</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we got a single large geometry for the whole city, let&#8217;s build
a mesh from it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// build the mesh</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">material</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">map</span>           <span class="o">:</span> <span class="nx">texture</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">vertexColors</span>  <span class="o">:</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexColors</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mesh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">cityGeometry</span><span class="p">,</span> <span class="nx">material</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This mesh is a whole city.
Rather cool!
Now one last step, let&#8217;s explain how to make this texture.</p>

<h2>Procedural Generation of Building&#8217;s Texture</h2>

<p>Here we want to generate the texture for the side of each building.
In a nutshell, it will show the floors for realism and variety.
So it alternates between row of window and row of floor.
Window rows are dark with a small noise to simulate light variations in each room.
Then we upscale texture carefully avoiding filtering.</p>

<p>First you build a canvas. Make it small, 32x64.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">canvas</span>  <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span> <span class="s1">&#39;canvas&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span>  <span class="o">=</span> <span class="mi">32</span><span class="p">;</span>
</span><span class='line'><span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span> <span class="o">=</span> <span class="mi">64</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span> <span class="s1">&#39;2d&#39;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you paint it in white</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">context</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="s1">&#39;#ffffff&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">context</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">64</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we need to draw on this white surface. We gonna draw floors on it.
one windows row, then a floor row and we loop.
In fact, as the face is already white, we just have to draw the window rows.
To draw the window row, we add some random to simulate lights variations in each windows.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">for</span><span class="p">(</span> <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">y</span> <span class="o">&lt;</span> <span class="mi">64</span><span class="p">;</span> <span class="nx">y</span> <span class="o">+=</span> <span class="mi">2</span> <span class="p">){</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span> <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="mi">32</span><span class="p">;</span> <span class="nx">x</span> <span class="o">+=</span> <span class="mi">2</span> <span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">64</span> <span class="p">);</span>
</span><span class='line'>    <span class="nx">context</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="s1">&#39;rgb(&#39;</span> <span class="o">+</span> <span class="p">[</span><span class="nx">value</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">value</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span> <span class="s1">&#39;,&#39;</span> <span class="p">)</span>  <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">context</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="right" src="http://learningthreejs.com/data/2013-08-02-how-to-do-a-procedural-city/screenshots/screenshot-texture-smoothing-small.png"></p>

<p>Now we got the texture&#8230; just it is super small, 32, 64
We need to increase its resolution. But lets be careful.
By default when you increase the resolution, you get a smoothed result, so it may easily appears blurry.
See on the right side, it doesn&#8217;t look good&#8230;
To avoid this artefact, we disable <code>.imageSmoothedEnabled</code> on each plateform.
You can see the result on the left.
The blurry effect is no more.
It is as sharp as the original but with a better resolution.
Ok now lets code exactly that. First we create the large canvas of 1024 by 512.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">canvas2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span> <span class="s1">&#39;canvas&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="nx">canvas2</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="mi">512</span><span class="p">;</span>
</span><span class='line'><span class="nx">canvas2</span><span class="p">.</span><span class="nx">height</span>  <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="nx">canvas2</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span> <span class="s1">&#39;2d&#39;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>We disable the smoothing</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">context</span><span class="p">.</span><span class="nx">imageSmoothingEnabled</span>   <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="nx">context</span><span class="p">.</span><span class="nx">webkitImageSmoothingEnabled</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="nx">context</span><span class="p">.</span><span class="nx">mozImageSmoothingEnabled</span>  <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we just have to copy the small canvas into the big one.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">context</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span> <span class="nx">canvas</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">canvas2</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">canvas2</span><span class="p">.</span><span class="nx">height</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then all we need to do is to actually build the <code>THREE.Texture</code>.
We set the anisotropie to a high number to get better result.
see <a href="http://blog.tojicode.com/2012/03/anisotropic-filtering-in-webgl.html">tojiro on anisotropy</a> for detail.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">texture</span>   <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">(</span> <span class="nx">generateTexture</span><span class="p">()</span> <span class="p">);</span>
</span><span class='line'><span class="nx">texture</span><span class="p">.</span><span class="nx">anisotropy</span>  <span class="o">=</span> <span class="nx">renderer</span><span class="p">.</span><span class="nx">getMaxAnisotropy</span><span class="p">();</span>
</span><span class='line'><span class="nx">texture</span><span class="p">.</span><span class="nx">needsUpdate</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was the last step. Now, you know how to do a procedural city
in webgl with three.js. Rather cool!
As a summary here is the whole code put together.</p>

<h2>The Whole Code</h2>

<p>Let&#8217;s put all that together. Here is the whole code commented.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// build the base geometry for each building</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">geometry</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeGeometry</span><span class="p">(</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// translate the geometry to place the pivot point at the bottom instead of the center</span>
</span><span class='line'><span class="nx">geometry</span><span class="p">.</span><span class="nx">applyMatrix</span><span class="p">(</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">().</span><span class="nx">makeTranslation</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// get rid of the bottom face - it is never seen</span>
</span><span class='line'><span class="nx">geometry</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'><span class="nx">geometry</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">splice</span><span class="p">(</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// change UVs for the top face</span>
</span><span class='line'><span class="c1">// - it is the roof so it wont use the same texture as the side of the building</span>
</span><span class='line'><span class="c1">// - set the UVs to the single coordinate 0,0. so the roof will be the same color</span>
</span><span class='line'><span class="c1">//   as a floor row.</span>
</span><span class='line'><span class="nx">geometry</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'><span class="nx">geometry</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'><span class="nx">geometry</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">2</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'><span class="nx">geometry</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">2</span><span class="p">][</span><span class="mi">3</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// buildMesh</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">buildingMesh</span><span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span> <span class="nx">geometry</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// base colors for vertexColors. light is for vertices at the top, shaddow is for the ones at the bottom</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">light</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span> <span class="mh">0xffffff</span> <span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">shadow</span>    <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span> <span class="mh">0x303050</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">cityGeometry</span><span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">();</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">20000</span><span class="p">;</span> <span class="nx">i</span> <span class="o">++</span> <span class="p">){</span>
</span><span class='line'>  <span class="c1">// put a random position</span>
</span><span class='line'>  <span class="nx">buildingMesh</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span>   <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">200</span> <span class="o">-</span> <span class="mi">100</span> <span class="p">)</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">buildingMesh</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span>   <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">200</span> <span class="o">-</span> <span class="mi">100</span> <span class="p">)</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// put a random rotation</span>
</span><span class='line'>  <span class="nx">buildingMesh</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span>   <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">*</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// put a random scale</span>
</span><span class='line'>  <span class="nx">buildingMesh</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span>  <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">50</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">buildingMesh</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span>  <span class="o">=</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nx">buildingMesh</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">+</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">buildingMesh</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">z</span>  <span class="o">=</span> <span class="nx">buildingMesh</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// establish the base color for the buildingMesh</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">value</span>   <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">baseColor</span>   <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">().</span><span class="nx">setRGB</span><span class="p">(</span> <span class="nx">value</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mf">0.1</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">value</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mf">0.1</span> <span class="p">);</span>
</span><span class='line'>  <span class="c1">// set topColor/bottom vertexColors as adjustement of baseColor</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">topColor</span>    <span class="o">=</span> <span class="nx">baseColor</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">multiply</span><span class="p">(</span> <span class="nx">light</span> <span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">bottomColor</span> <span class="o">=</span> <span class="nx">baseColor</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">multiply</span><span class="p">(</span> <span class="nx">shadow</span> <span class="p">);</span>
</span><span class='line'>  <span class="c1">// set .vertexColors for each face</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">geometry</span>    <span class="o">=</span> <span class="nx">buildingMesh</span><span class="p">.</span><span class="nx">geometry</span><span class="p">;</span>       
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">jl</span> <span class="o">=</span> <span class="nx">geometry</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">jl</span><span class="p">;</span> <span class="nx">j</span> <span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="nx">j</span> <span class="o">===</span> <span class="mi">2</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// set face.vertexColors on root face</span>
</span><span class='line'>          <span class="nx">geometry</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span> <span class="nx">j</span> <span class="p">].</span><span class="nx">vertexColors</span> <span class="o">=</span> <span class="p">[</span> <span class="nx">baseColor</span><span class="p">,</span> <span class="nx">baseColor</span><span class="p">,</span> <span class="nx">baseColor</span><span class="p">,</span> <span class="nx">baseColor</span> <span class="p">];</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// set face.vertexColors on sides faces</span>
</span><span class='line'>          <span class="nx">geometry</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span> <span class="nx">j</span> <span class="p">].</span><span class="nx">vertexColors</span> <span class="o">=</span> <span class="p">[</span> <span class="nx">topColor</span><span class="p">,</span> <span class="nx">bottomColor</span><span class="p">,</span> <span class="nx">bottomColor</span><span class="p">,</span> <span class="nx">topColor</span> <span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="c1">// merge it with cityGeometry - very important for performance</span>
</span><span class='line'>  <span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">merge</span><span class="p">(</span> <span class="nx">cityGeometry</span><span class="p">,</span> <span class="nx">buildingMesh</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// generate the texture</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">texture</span>       <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">(</span> <span class="nx">generateTexture</span><span class="p">()</span> <span class="p">);</span>
</span><span class='line'><span class="nx">texture</span><span class="p">.</span><span class="nx">anisotropy</span> <span class="o">=</span> <span class="nx">renderer</span><span class="p">.</span><span class="nx">getMaxAnisotropy</span><span class="p">();</span>
</span><span class='line'><span class="nx">texture</span><span class="p">.</span><span class="nx">needsUpdate</span>    <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// build the mesh</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">material</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">map</span>     <span class="o">:</span> <span class="nx">texture</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">vertexColors</span>    <span class="o">:</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexColors</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">cityMesh</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">cityGeometry</span><span class="p">,</span> <span class="nx">material</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">generateTexture</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// build a small canvas 32x64 and paint it in white</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">canvas</span>  <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span> <span class="s1">&#39;canvas&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">canvas</span><span class="p">.</span><span class="nx">width</span> <span class="o">=</span> <span class="mi">32</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">canvas</span><span class="p">.</span><span class="nx">height</span>    <span class="o">=</span> <span class="mi">64</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span> <span class="s1">&#39;2d&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="c1">// plain it in white</span>
</span><span class='line'>  <span class="nx">context</span><span class="p">.</span><span class="nx">fillStyle</span>    <span class="o">=</span> <span class="s1">&#39;#ffffff&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">context</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">64</span> <span class="p">);</span>
</span><span class='line'>  <span class="c1">// draw the window rows - with a small noise to simulate light variations in each room</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span> <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">y</span> <span class="o">&lt;</span> <span class="mi">64</span><span class="p">;</span> <span class="nx">y</span> <span class="o">+=</span> <span class="mi">2</span> <span class="p">){</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span> <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">x</span> <span class="o">&lt;</span> <span class="mi">32</span><span class="p">;</span> <span class="nx">x</span> <span class="o">+=</span> <span class="mi">2</span> <span class="p">){</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">value</span>   <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">64</span> <span class="p">);</span>
</span><span class='line'>          <span class="nx">context</span><span class="p">.</span><span class="nx">fillStyle</span> <span class="o">=</span> <span class="s1">&#39;rgb(&#39;</span> <span class="o">+</span> <span class="p">[</span><span class="nx">value</span><span class="p">,</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">value</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span> <span class="s1">&#39;,&#39;</span> <span class="p">)</span>  <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">context</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// build a bigger canvas and copy the small one in it</span>
</span><span class='line'>  <span class="c1">// This is a trick to upscale the texture without filtering</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">canvas2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span> <span class="s1">&#39;canvas&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">canvas2</span><span class="p">.</span><span class="nx">width</span>    <span class="o">=</span> <span class="mi">512</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">canvas2</span><span class="p">.</span><span class="nx">height</span>   <span class="o">=</span> <span class="mi">1024</span><span class="p">;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="nx">canvas2</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span> <span class="s1">&#39;2d&#39;</span> <span class="p">);</span>
</span><span class='line'>  <span class="c1">// disable smoothing</span>
</span><span class='line'>  <span class="nx">context</span><span class="p">.</span><span class="nx">imageSmoothingEnabled</span>        <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">context</span><span class="p">.</span><span class="nx">webkitImageSmoothingEnabled</span>  <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">context</span><span class="p">.</span><span class="nx">mozImageSmoothingEnabled</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">// then draw the image</span>
</span><span class='line'>  <span class="nx">context</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span> <span class="nx">canvas</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">canvas2</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span> <span class="nx">canvas2</span><span class="p">.</span><span class="nx">height</span> <span class="p">);</span>
</span><span class='line'>  <span class="c1">// return the just built canvas2</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">canvas2</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>threex.proceduralcity extension</h2>

<p>As usual, this code is gathered in easy-to-reuse threex package,
<a href="https://github.com/jeromeetienne/threex.proceduralcity">threex.proceduralcity</a>.
It makes stuff super simple, just create an instance and it will return a <code>THREE.Mesh</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">city</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">THREEx</span><span class="p">.</span><span class="nx">ProceduralCity</span><span class="p">()</span>
</span><span class='line'><span class="nx">scene</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">city</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="http://jeromeetienne.github.io/threex.proceduralcity/examples/demo.html">demo live</a>
contains this city plus a ground, a first person control and a fog.
This is rather cool result for such a small effort.</p>

<h2>Conclusion</h2>

<p>So now you know how to generate a whole city in 100 lines.
No download.
Rather clever algorithm.
I hope you learned from it,
it contains many tricks that you can reused in your own demos.</p>

<p>That&#8217;s all for today! Have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitor Rendering Performance Within Three.js]]></title>
    <link href="http://learningthreejs.com/blog/2013/06/25/monitor-rendering-performance-within-threejs/"/>
    <updated>2013-06-25T10:58:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2013/06/25/monitor-rendering-performance-within-threejs</id>
    <content type="html"><![CDATA[<p>This post is about monitoring rendering performance within three.js.
It presents a small standalone extension called <code>threex.rendererstats</code>.
It collect information from three.js renderer and display it live.
It is very usefull to diagnose performance issues while developping.
The API is exactly the same as <a href="http://github.com/mrdoob/stats.js">stats.js</a>
so it is easy for you to include in your own stuff.</p>

<iframe width="425" height="349" src="http://www.youtube.com/embed/UXWpnANajDk" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>What Is It ?</h2>

<p><img class="right" src="http://learningthreejs.com/data/2013-06-13-monitor-rendering-performance-within-threejs/screenshot-rendererstats.png"></p>

<p><a href="http://github.com/jeromeetienne/threex.rendererstats">threex.rendererstats</a> collects information
about three.js renderer and display it realtime on your screen.
It is released under MIT license and is available on
<a href="http://github.com/jeromeetienne/threex.rendererstats">github</a>.
See a screenshot on the right.</p>

<p><a href='http://jeromeetienne.github.io/threex.rendererstats/examples/basic.html' target='_blank'><input type="button" value='Try Live Demo!' /></a></p>

<p><img class="left" src="http://learningthreejs.com/data/2013-06-13-monitor-rendering-performance-within-threejs/screenshot-stats.png" width="240"></p>

<p>It is inpired from
<a href="http://github.com/mrdoob/stats.js">stats.js</a> by
<a href="http://mrdoob.com">mrdoob</a>.
See a screenshot on the left.
Webgl renderer keeps some internal statistics on the scene being renderered and update it at every frame.
It is accessible in a property <code>.info</code>.
threex.rendererstats just gather this information and display it nicely on your screen.</p>

<h2>How Is It Useful ?</h2>

<p>It is a very nice tool to monitor performances of WebGL rendering.
As it is updated realtime, you can identify performance issues at various moments within your game
We have seen canvas inspection recently in
<a href="http://learningthreejs.com/blog/2013/04/05/debugging-with-chromes-canvas-inspection/">Debugging With Chrome’s Canvas Inspection</a>.
<a href="http://learningthreejs.com/blog/2013/04/05/debugging-with-chromes-canvas-inspection/">canvas inspection</a>
is directly at webgl level. threex.rendererstats remains at three.js level to give you another kind
of information on the renderer.</p>

<p>Lets details those information
There is 2 sections one for the memory, another for the renderer.
For the memory, you got</p>

<ul>
<li><code>info.memory.geometry</code> : number of geometry currently in memory</li>
<li><code>info.memory.programs</code> : number of shaders currently in memory</li>
<li><code>info.memory.texture</code> : number of texture currently in memory</li>
</ul>


<p>For the render, you got</p>

<ul>
<li><code>info.render.calls</code> : number of draw calls currently used to render</li>
<li><code>info.render.vertices</code> : number of vertices currently rendered</li>
<li><code>info.render.faces</code> : number of triangles currently renderered</li>
<li><code>info.render.points</code> : number of particles currently rendered</li>
</ul>


<h2>How To Use It ?</h2>

<p>first, include <code>threex.rendererstats.js</code> with the usual <code>&lt;script&gt;</code> tag.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;threex.rendererstats.js&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>then you initialize the object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">rendererStats</span>  <span class="o">=</span> <span class="k">new</span> <span class="nx">THREEx</span><span class="p">.</span><span class="nx">RendererStats</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>You likely need to position it on the page with css.
You may use something along this line</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">rendererStats</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">position</span>   <span class="o">=</span> <span class="s1">&#39;absolute&#39;</span>
</span><span class='line'><span class="nx">rendererStats</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span>  <span class="o">=</span> <span class="s1">&#39;0px&#39;</span>
</span><span class='line'><span class="nx">rendererStats</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">bottom</span>    <span class="o">=</span> <span class="s1">&#39;0px&#39;</span>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span> <span class="nx">rendererStats</span><span class="p">.</span><span class="nx">domElement</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>finally you update it at every frame in your rendering loop or when you do <code>renderer.render()</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">rendererStats</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">renderer</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And you are done. Quite easy to include! Now you can monitor your own three.js scenes.</p>

<h2>Conclusion</h2>

<p>We have seen how to monitor performance information withing three.js.
How to display and use the statistics collected by <code>THREE.WebGLRenderer</code>
itself.
The information may appear a bit raw but it is live.
So unexpected performance changes can be detected very early.</p>

<p>That&#8217;s all for today! have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Discovering Leap Device]]></title>
    <link href="http://learningthreejs.com/blog/2013/06/11/discovering-leap-device/"/>
    <updated>2013-06-11T10:58:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2013/06/11/discovering-leap-device</id>
    <content type="html"><![CDATA[<p>Imagine controlling your computer without needing a mouse or a keyboard but only with the
movement of your hands! That is what the Leap motion device is all about! It was
all over the net a few months back. This device is not unlike the kinect, however it is
designed to be used at a shorter range. The leap device is a new way of motion on your
screen and it is able to trace your fingers. Quite sci-fi, don&#8217;t you think?
Especially when you see the accuracy, even the slightest movement of your fingers is tracked.
They have been nice enough to send me one so that I could play with it and get an idea of
what it does and why it is such a cool device.</p>

<iframe width="425" height="349" src="http://www.youtube.com/embed/aP_4KPXjDpM" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<p>Here are some applications that I found cool. You can easily install them.</p>

<h3>Visualizer</h3>

<p>First the Visualizer. This application is installed when you install the leap itself.
It is a basic display of what the leap detects. It helps you discover what the leap
can do and diagnose potential issues.</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/D2oKfAnEaPQ" frameborder="0" allowfullscreen></iframe>


<h3>Flocking</h3>

<p>Then a <a href="https://developer.leapmotion.com/blog/new-demo-available-flocking">flocking application</a>.
In this beautifully realized application you interact with a swarm of fishes in the deep sea.
It is computed over GPU, so you play with an impressive number of fishes.
Each of your finger tips is visualized with a nice incandescent fire.
Fishes are attracted by your fingers. But as soon as you move it you scare them away.
Just excelent!</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/e--L3pArf-c" frameborder="0" allowfullscreen></iframe>


<h3>Google Earth</h3>

<p>Google modified its famous application Google Earth to support leap device.
Now you can fly above the earth with your hands in the air.
See the <a href="http://www.theverge.com/2013/4/22/4246612/google-will-release-google-earth-app-for-leap-motion">announcement for details</a>.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/RebX7YEn3GQ" frameborder="0" allowfullscreen></iframe>


<h3>LeapDJ</h3>

<p>Then there is <a href="https://developer.leapmotion.com/downloads/leap-motion/leap-dj-demo">LeapDJ</a>.
Leap device goes well with the music field. One can create virtual instruments and play them thru the leap.
It is instinctive and reactive. Quite fit for a musician&#8217;s state of mind :) here is leapdj demo.
You mix live music with 2 platines, sliders for volume and balance.
You can push buttons to create sounds effects. And you can do that with all your fingers at the same time.
Definitely a fun application ;)</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/cFOYHmRab_Q" frameborder="0" allowfullscreen></iframe>


<h3>Flying Demo</h3>

<p><a href="https://developer.leapmotion.com/downloads/leap-motion/leap-flying-demo">flying demo</a> is an example where
the leap is used as a game controller.
You put your hand side to side and move them as if they were the wings of a plane.</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/ACEE4yddgQ0" frameborder="0" allowfullscreen></iframe>


<p>To stay updated on what is new and interesting about developing on Leap, you may follow <a href="https://twitter.com/LeapMotionDev">@LeapMotionDev</a> on twitter</p>

<h2>How To Get One</h2>

<p>So, where can you get the Leap motion?
You can have it shipped to your place by <a href="https://www.leapmotion.com/preorder/new">preordering it</a> on their site.
The current <a href="http://blog.leapmotion.com/post/48872742284/release-date-update">release date is July 22nd of this year</a>.
The device is announced at 79.99$us.
They will also be available at the <a href="http://www.bestbuy.com/">BestBuy nearest you</a>.</p>

<p>Additionnaly they have
<a href="https://developer.leapmotion.com/blog/leap-motion-to-embed-3-d-motion-control-through-hp-collaboration">parterships with HP</a>
and
<a href="http://uk.ign.com/articles/2013/01/03/kinect-like-motion-tracking-coming-to-asus-pcs">asus PCs</a>
to include it directly in some of their models.
With all that, we can expect this device will go beyond the geek circle and reach the masses.
For further information, you can go to the <a href="https://www.leapmotion.com/">official website</a></p>

<h2>How To Code It</h2>

<p>They got an API than they have ported in multiple langages:
<a href="https://developer.leapmotion.com/documentation/guide/Sample_C++_Tutorial">c++</a>,
<a href="https://developer.leapmotion.com/documentation/guide/Sample_C%23_Tutorial">C#</a>,
<a href="https://developer.leapmotion.com/documentation/guide/Sample_ObjectiveC_Tutorial">Objective C</a>,
<a href="https://developer.leapmotion.com/documentation/guide/Sample_Java_Tutorial">Java</a>,
<a href="https://developer.leapmotion.com/documentation/guide/Sample_Python_Tutorial">Python</a>
and
<a href="https://developer.leapmotion.com/documentation/guide/Sample_JavaScript_Tutorial">javascript</a>.
Obviously we will focus on the javascript one :) It is called <a href="https://github.com/leapmotion/leapjs">leapjs on github</a>.
It is very simple. There is a driver running as daemon doing the work and providing you information via websocket.
I just started to code on it. I will talk more about this later.</p>

<h2>Conclusion</h2>

<p>So we’ve seen that the Leap  motion is a very small device (less than half the size of an Iphone)
that tracks the movement of your hands and fingers.
It’s so precise it’s scary!
The Leap is very reactive and accurate, it is designed to work at a very close range.
I have tried it out and it is pretty cool.
You can move elements in your computer with your fingers, with the palm of your hand
or even by pointing them with a pen.
And good news&#8230;.You can code it with javascript and you can find it on github!</p>

<p>We have also seen some cool applications that have been done with this device.
Trust me you don’t want to miss that so take a look at the demos!
Stay tuned for the release date and for more information about Leap Motion.</p>

<p>That’s all for now, folks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mixing HTML pages inside your WebGL]]></title>
    <link href="http://learningthreejs.com/blog/2013/04/30/closing-the-gap-between-html-and-webgl/"/>
    <updated>2013-04-30T11:11:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2013/04/30/closing-the-gap-between-html-and-webgl</id>
    <content type="html"><![CDATA[<p>Wouldn&#8217;t that be cool if we were able to mix normal web pages in our webgl? To interact with them as we usually do? to view them,  to click on them&#8230; To scroll, to hover or even to type in input tags.
Oh yeah it would be so great! We, webgl people, are currently an isolated Island in the web world.  Being able to mix with normal page would give us access to so much interactive content.
In this post,  we gonna see how to do exactly this: how to seamlessly mix normal DOM elements in our webgl scene.  They will actually  appear as part of the 3d scene. Don&#8217;t worry it is surprisingly easy with three.js.</p>

<center>
  <iframe width="425" height="349" src="http://www.youtube.com/embed/ScZcUEDGjJI" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<h2>Demo of a youtube browser mixed in WebGL</h2>

<p><img class="right" src="http://learningthreejs.com/data/2013-04-30-closing-the-gap-between-html-and-webgl/screenshots/navigation-bar-small.png"></p>

<p>First let&#8217;s see the result in action. Here is a demo I did to show all the videos I have done for this blog.
<a href="http://jeromeetienne.github.io/videobrowser4learningthreejs">Try it out</a>!
It shows a 3d scene with a tv set and three characters sitting on grass.</p>

<p><a href='http://jeromeetienne.github.io/videobrowser4learningthreejs/' target='_blank'><input type="button" value='Try Learningthree.js video browser!' style='font-size:200%' /></a>
<a href='http://learningthreejs.com/data/2013-04-30-closing-the-gap-between-html-and-webgl/index.html' target='_blank'><input type="button" value='Try Demo!' style='font-size:200%' /></a></p>

<p>The key point is on the tvset screen. This is an actual YouTube player. Not me emulating it, this is the real thing! You can access it anytime from the blog navigation bar as
you can see on the right.
This
<a href="http://jeromeetienne.github.io/videobrowser4learningthreejs">demo</a>
is pretty cool no? Now let&#8217;s see how to do this.</p>

<h2>Let&#8217;s Get Started</h2>

<p>DOM elements are all about flat 2d rectangles. In
<a href="http://threejs.org/">three.js</a>
, such a thing is called a
<a href="https://github.com/mrdoob/three.js/blob/master/src/extras/geometries/PlaneGeometry.js">THREE.PlaneGeometry</a>.
So let&#8217;s try to map a
<a href="https://developer.mozilla.org/en/docs/DOM/element">dom element</a>
to a
<a href="https://github.com/mrdoob/three.js/blob/master/src/extras/geometries/PlaneGeometry.js">THREE.PlaneGeometry</a>.
Their position and rotation must match.
The goal is to make them appear as one thus the viewer can&#8217;t distinguish them.</p>

<p>So first, how to orientate a dom element, would you ask?
Simple we gonna use a feature introduced by HTML5, called
<a href="http://www.w3.org/TR/css3-transforms/">css 3D transformation</a>.
Here are some <a href="http://www.html5rocks.com/en/tutorials/3d/css/">tutorials</a>
<a href="http://desandro.github.io/3dtransforms/">about</a>
<a href="https://developer.mozilla.org/en-US/docs/CSS/Tutorials/Using_CSS_transforms">it</a>.
css3d is done for this exact purpose, to position and rotate a DOM element in 3d.</p>

<p><img class="right" src="http://learningthreejs.com/data/2013-04-30-closing-the-gap-between-html-and-webgl/screenshots/grid-only-small.png"></p>

<p>Good News! three.js can already render things using this technology.
 It is called <a href="https://github.com/mrdoob/three.js/blob/master/examples/js/renderers/CSS3DRenderer.js">THREE.CSS3DRenderer</a>.
See <a href="http://threejs.org/examples/css3d_molecules.html">various</a>
<a href="http://threejs.org/examples/css3d_periodictable.html">examples</a>
of
<a href="http://threejs.org/examples/css3d_youtube.html">its</a>
<a href="http://threejs.org/examples/css3d_panorama.html">usage</a>
in three.js <code>/examples</code>.
Now we need to put the same plane on both renderers, WebGL Renderer and CSS3D Renderer.
Here is the code for the plane in
<a href="https://github.com/mrdoob/three.js/blob/master/src/renderers/WebGLRenderer.js">WebGLRenderer</a>
, wireframe with segments to see thru.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// create the plane mesh</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">material</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">({</span> <span class="nx">wireframe</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">geometry</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PlaneGeometry</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">planeMesh</span><span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span> <span class="nx">geometry</span><span class="p">,</span> <span class="nx">material</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// add it to the WebGL scene</span>
</span><span class='line'><span class="nx">glScene</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">planeMesh</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we got the plane in place, here is the code for the DOM element in css 3d.
Notice how we reference the same position and rotation as the <code>planeMesh</code>, thus
they will move together.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// create the dom Element</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span> <span class="s1">&#39;img&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="nx">element</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="s1">&#39;textures/sprites/ball.png&#39;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// create the object3d for this element</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">cssObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CSS3DObject</span><span class="p">(</span> <span class="nx">element</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// we reference the same position and rotation </span>
</span><span class='line'><span class="nx">cssObject</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="nx">planeMesh</span><span class="p">.</span><span class="nx">position</span><span class="p">;</span>
</span><span class='line'><span class="nx">cssObject</span><span class="p">.</span><span class="nx">rotation</span> <span class="o">=</span> <span class="nx">planeMesh</span><span class="p">.</span><span class="nx">rotation</span><span class="p">;</span>
</span><span class='line'><span class="c1">// add it to the css scene</span>
</span><span class='line'><span class="nx">cssScene</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">cssObject</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="right" src="http://learningthreejs.com/data/2013-04-30-closing-the-gap-between-html-and-webgl/screenshots/grid-css-small.png"></p>

<p>All seems to go well.
We got the same plane in css and webgl. Now we need to see the dom element behind the webgl plane.
To do this, let&#8217;s use webgl renderer and css3d renderer together on the same page.</p>

<p>We use stylesheet to put css renderer exactly behind the webgl one.
Thus they look the same to the viewer, as you can see on the right.
Use the following line to obtain the same result.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">cssRenderer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CSS3DRenderer</span><span class="p">();</span>
</span><span class='line'><span class="nx">cssRenderer</span><span class="p">.</span><span class="nx">setSize</span><span class="p">(</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerWidth</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">innerHeight</span> <span class="p">);</span>
</span><span class='line'><span class="nx">cssRenderer</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">position</span> <span class="o">=</span> <span class="s1">&#39;absolute&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">cssRenderer</span><span class="p">.</span><span class="nx">domElement</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="right" src="http://learningthreejs.com/data/2013-04-30-closing-the-gap-between-html-and-webgl/screenshots/object-inmiddle-small.png">
<img class="left" src="http://learningthreejs.com/data/2013-04-30-closing-the-gap-between-html-and-webgl/screenshots/object-infront-small.png"></p>

<p>We are in good shape but not yet done. We still need to make both react as if they were one.
What happens if we add a torus 3d object in front of webgl plane? As you can see on the
left, it looks Ok.
What if we put this object behind it? Hmm not so good. As you can see on the right, the object
is behind the Plane,
but it is in front of the dom element. It should appear as if the torus were behind but it doesn&#8217;t.
Why&#8217;s that? It is due to the webgl
<a href="http://en.wikipedia.org/wiki/Z-buffering">z-buffer</a>.</p>

<p>It displays our torus because it thinks the torus is closer to the camera than the DOM element.
It&#8217;s not aware that our webgl plane should act as a see-thru to make our css3d visible.
So nothing behind our webgl plane should be displayed.
How to fix this, you would ask? We&#8217;re gonna use a tricky part of webgl: the blending.</p>

<h2>Blending them together</h2>

<p>What is blending ? It is the way to determine the color of a pixel when you add a
new pixel (fragment in technical terms).
So when doing blending, we use a blend function to combine the colors from both the
existing and the new fragments to make an entirely new fragment.</p>

<p>It is a weird beast using several WebGL calls and many equations. The total number of possibilities is scary :)
A complete explanation of blending is way out of scope of this post. For more detail, see
<a href="http://www.amazon.com/WebGL-Beginners-Guide-Diego-Cantor/dp/184969172X">&#8220;WebGL Beginner&#8217;s Guide&#8221;</a>
from
<a href="http://blog.tojicode.com/">Brandon Jones</a>, a great book to start with raw WebGL.
To get a feel of blending,  you can play with them in
<a href="http://threejs.org/examples/webgl_materials_blending_custom.html">this example</a>.</p>

<p><img class="right" src="http://learningthreejs.com/data/2013-04-30-closing-the-gap-between-html-and-webgl/screenshots/object-behind-small.png"></p>

<p>The one which interest us is called <code>THREE.NoBlending</code>.
When drawing the face, it will completely ignore the color below and set it to the color of the face.
So if we put our face color to black aka <code>(0, 0, 0)</code> and opacity to <code>0</code>, we gonna obtained what we want.
The plane will act as a see-thru to the dom element below. Here is how you initialize your material.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">material</span>   <span class="o">=</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">();</span>
</span><span class='line'><span class="nx">material</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;black&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">material</span><span class="p">.</span><span class="nx">opacity</span>   <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nx">material</span><span class="p">.</span><span class="nx">blending</span>  <span class="o">=</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">NoBlending</span><span class="p">;</span>
</span><span class='line'><span class="c1">// any mesh using this material will act as a see-thru to the css renderer</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then we are done ! We got a actual dom element seamlessly integrated in our webgl scene!  Let&#8217;s pet our back,  i think this is an important step!</p>

<h2>HTML And WebGL Sitting Together In A Tree ?</h2>

<p>Well, not quite unfortunatly&#8230;
WebGL is 3d inside a <a href="http://en.wikipedia.org/wiki/Canvas_element">canvas element</a>
and a canvas is a black box from the html page point of view.
You can&#8217;t bind <a href="http://en.wikipedia.org/wiki/DOM_events">DOM events</a> inside canvas.
You can&#8217;t have
<a href="http://en.wikipedia.org/wiki/Style_sheet_(web_development)">stylesheet</a>
to change canvas content.
You can&#8217;t put dom elements inside your canvas.
Those two don&#8217;t talk to each other.</p>

<p>Unfortunatly it isn&#8217;t all pink, WebGL and HTML aren&#8217;t really merged.
This is only a nice trick. It has some limitations.
For example, the dom element is rotated using <a href="http://example.com/TODO">css 3d</a>.
This is a fairly new technology.
So you may hit bugs.</p>

<p>Moreover, it only appears as a part of 3d&#8230; but this remains plain DOM.
So it doesn&#8217;t benefit from webgl specific display.
For example, it is impossible to get
<a href="http://example.com/TODO">post processing</a>
on the dom element.
Indeed, this technic is applied in 2d on the rendered scene and the DOM element is not in it.
Additionally the dom element won&#8217;t share the lighting as the rest of your webgl scene.
Nevertheless, <a href="http://example.com/TODO">css shader</a> allows you to apply shader on normal DOM element,
so it may be possible to make a coherent lighting.
The web is so beautiful nowadays!</p>

<h3>Conclusion</h3>

<p>Congratulations guys! You can now mix html pages with your webgl content. You have learned how to close the gap between HTML and WebGL. It is a new way to experience and to interact with webgl 3d.</p>

<p>I love this new trick.
I&#8217;ve been trying to make webgl easier for while now.
My strategy has been to make it closer to what webdevs know today,
copying <a href="http://jeromeetienne.github.com/tquery/">jQuery API on top of three.js</a>,
emulating <a href="http://learningthreejs.com/blog/2012/01/17/dom-events-in-3d-space/">dom events inside webgl scene</a>
or even making <a href="http://learningthreejs.com/blog/2012/02/27/linkify-tquery-extension/">3d text act as web links</a>.
To integrate actual web pages inside webgl scene definitly matches this vibe!</p>

<p>That&#8217;s all for today, have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging With Chrome's Canvas Inspection]]></title>
    <link href="http://learningthreejs.com/blog/2013/04/05/debugging-with-chromes-canvas-inspection/"/>
    <updated>2013-04-05T09:15:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2013/04/05/debugging-with-chromes-canvas-inspection</id>
    <content type="html"><![CDATA[<p>This post will present to you how to debug your webgl with  chrome&#8217;s canvas inspection.
This is an experimental feature available in chrome devtools.
It gives you all the WebGL calls which are done in your webgl scene.
So it helps if you actually know some raw WebGL :)
In anycase you can see it being replayed call by calls, which is uber cool.</p>

<center>
  <iframe width="425" height="349" src="http://www.youtube.com/embed/837O1YloCRc" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<h2>Let&#8217;s get started</h2>

<p>As it is an experimental feature, you first need to enable it.
First let&#8217;s enable devtool experiment: enter &#8220;chrome://flags&#8221; url
in your chrome location bar. There you enable &#8220;Enable Developer Tools experiments&#8221;
and relaunch chrome.</p>

<p><img src="http://learningthreejs.com/data/2013-04-05-debugging-with-chromes-canvas-inspection/screenshots/devtools-enable-experiments.png"></p>

<p><img class="right" src="http://learningthreejs.com/data/2013-04-05-debugging-with-chromes-canvas-inspection/screenshots/devtools-settings-gear.png" width="160" height="120"></p>

<p>Now that you got the Developer Tools Experiments enabled, let&#8217;s enable
&#8216;Canvas Inpection&#8217; in particular. Click on the little gear on bottom right
of devtools. The one you can see on the right.</p>

<p><img src="http://learningthreejs.com/data/2013-04-05-debugging-with-chromes-canvas-inspection/screenshots/devtools-settings-panel.png"></p>

<p>It will open the settings panel you see above.
Now, select experiment from the left menu, enable &#8216;Canvas Inpection&#8217; and you are done.
Rather clumsy but this is an experiment after all :)</p>

<h2>How to use it</h2>

<p>Now that it is enabled, let&#8217;s see how to use it.
First let&#8217;s go on the &#8220;profile&#8221; tab of devtools. We can see &#8220;Capture Canvas Frame&#8221;, this is the one we gonna use.</p>

<p><img src="http://learningthreejs.com/data/2013-04-05-debugging-with-chromes-canvas-inspection/screenshots/devtools-capture-canvas-frame.png"></p>

<p>Let&#8217;s enable it and load a page with WebGL.
As an example, i will use <a href="http://mmo3d.jit.su/montains">mmo3d</a>. It is a multiplayer game
in webgl. It is very hackable so other people can easily do their own world. Let&#8217;s talk about
that later. For now, lets click &#8216;start&#8217; and capture a frame :)</p>

<h2>Captured frames</h2>

<p>After that you should obtain the following. You got the actual game on the left.
and you recognise developer tools on the right.</p>

<p><img src="http://learningthreejs.com/data/2013-04-05-debugging-with-chromes-canvas-inspection/screenshots/devtools-capture-example-resized.png"></p>

<p>For every frame you capture, you will get a trace log of each webgl call which has been done during this frame.
Above there is a replay window where you can actually see the scene as it is drawn step by step.
Thus you can check the order of your calls. It can be usefull when you debug transparency for example.
Watch for the draw calls, they got huge overhead and should be limited if possible.</p>

<h2>Conclusion</h2>

<p>As it is pure webgl, and not at three.js level, it helps if you know raw WebGL. For that, i suggest
you to read a book on the subject. Personnaly i
like
<a href="http://www.amazon.com/WebGL-Beginners-Guide-Diego-Cantor/dp/184969172X">&#8220;WebGL Beginner&#8217;s Guide&#8221;</a>
by
<a href="http://blog.tojicode.com/">Brandon Jones</a>.
WebGL may be complex at times, and having cool debug tools help being more efficient.
You can see the excelent paul irish doing a
<a href="http://www.youtube.com/watch?v=FY5iiuQRyEE&amp;feature=youtu.be&amp;t=8m23s">presentation</a>
what you can do with canvas inspector.</p>

<p>That&#8217;s all folks. Have Fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Load Your Game Faster with AppCache]]></title>
    <link href="http://learningthreejs.com/blog/2013/03/22/load-your-game-faster-with-appcache/"/>
    <updated>2013-03-22T05:31:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2013/03/22/load-your-game-faster-with-appcache</id>
    <content type="html"><![CDATA[<p>This post is about loading your game faster.
Appcache may be great help on this.
In this post, i will use a little game of mine called
<a href="http://jeromeetienne.github.com/demo.poollabyrinth/">&#8216;Marble Labyrinth&#8217;</a>
as an example to show how i got from 2.4mbyte to 0byte of download in 5min of work.
Appcache provides faster access to your users, and less bandwidth cost to you. A well used time :)</p>

<center>
  <iframe width="425" height="349" src="http://www.youtube.com/embed/FY4UQpu1ijM" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<h3>What Is Appcache</h3>

<p>This is a way to cache the files more efficiently and with support for offline.
Other already explained it better that i could.
<a href="http://www.html5rocks.com/en/tutorials/appcache/beginner/">&#8220;A Beginner&#8217;s Guide to Using the Application Cache&#8221;</a>
by
<a href="https://twitter.com/ebidel">Eric Bidelman</a>
on
<a href="http://www.html5rocks.com/">html5rocks</a> is a very nice intro.
This site got plenty of data about <a href="http://www.html5rocks.com/en/features/offline">offline support</a>.
Here is a <a href="http://appcachefacts.info/">appcache factsheet</a>
and the <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/offline.html#appcache">specification</a>.</p>

<h3>In The Rought</h3>

<p>How to generate an appcache file without hassle ?
Something which support dynamic stuff like xhr ? It is surprisingly easy.</p>

<ul>
<li><em>Step 1:</em> Do &#8216;Copy ALL as HAR&#8217; in chrome devtools network</li>
<li><em>Step 2:</em> in js console, do &#8216;var har = &#8217; and there you paste it</li>
<li><em>Step 3:</em> generate teh appcache file with the following javascript</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>console.log('CACHE MANIFEST\n\nCACHE:');
</span><span class='line'>har.log.entries.forEach(function(entry){ console.log(entry.request.url) });
</span><span class='line'>console.log('\nNETWORK:\n*');</span></code></pre></td></tr></table></div></figure>


<p>Simple no ? Well unfortunatly even a basic har file is large.
The one for
<a href="http://jeromeetienne.github.com/demo.poollabyrinth/">&#8216;Marble Labyrinth&#8217;</a>
is more than 7000 lines long. So i wrote a little tool to ease up the process
on large project.</p>

<h3>Let&#8217;s Get Started</h3>

<p>First, we install a little utility which gonna generate the appcache for us.
It is called <em>har2appcache</em>.
It is available on a
<a href="https://github.com/jeromeetienne/har2appcache">github repository</a> as usual.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo npm install -g har2appcache
</span></code></pre></td></tr></table></div></figure>


<p>This one got the advantage to use the info from the HAR file.
So you will get all the dynamic request too. All the models that
you load with <code>THREE.OBJMTLLoader</code> or your textures
with <code>THREE.ImageUtils.loadTexture</code> are all loaded dynamically
without insertion in the DOM.</p>

<p>btw HAR stands for &#8216;HTTP Archive&#8217;.
You can read <a href="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/HAR/Overview.html">HTTP Archive specification</a>
if you are so inclined.
To get this HAR file, we will use Chrome.</p>

<h3>Let&#8217;s Play With Chrome Devtools</h3>

<p><img class="right" src="http://learningthreejs.com/data/2013-03-22-load-your-game-faster-with-appcache/devtool-network-small.png"></p>

<p>So first, you open chrome devtool, go in the network tab and reload your game.
You press right button of your mouse and you should see &#8216;Copy ALL as HAR&#8217;
in the popup menu.
Then you take your <a href="http://www.sublimetext.com/2">favorite editor</a>,
create a file named <code>sample.har</code>
and paste the HAR you just copied.
This is a rather large JSON structure.</p>

<h3>Let&#8217;s Generate This File</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>har2appcache sample.har &gt; manifest.appcache
</span></code></pre></td></tr></table></div></figure>


<p>There you got your appcache file, rather easy no ?
You may need to edit it a bit to fit your needs,
e.g. to remove the url of dynamic content.
Now you just need to change the html tag of your page
and you are <strong>DONE!</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'> <span class="nt">&lt;html</span> <span class="na">manifest=</span><span class="s">&#39;manifest.appcache&#39;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Smooth Workflow</h3>

<p>Appcache is so efficient to cache that it may become hard to disable it :)
When the page load, the browser will check if <code>manifest.appcache</code> has changed.
If there is no update, it won&#8217;t reload what has been cached, not even the original HTML page.
It may be bothering while your develop.
Personnaly, i rename the file during developement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mv manifest.appcache manifest.appcache.dev
</span></code></pre></td></tr></table></div></figure>


<p>and comment the attribute in the html.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- &lt;html manifest=&#39;manifest.appcache&#39;&gt; --&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It does the job smoothly.</p>

<h3>Conclusion</h3>

<p>With this technic, you gain a lot of time to download.
So your user got faster access and you get less bandwidth cost.
A nice win-win situation! All that in 5min top. It definitly worth it.</p>

<p>That&#8217;s all for today, have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Move a Cube With Your Head or Head-Tracking with WebGL]]></title>
    <link href="http://learningthreejs.com/blog/2013/03/12/move-a-cube-with-your-head/"/>
    <updated>2013-03-12T13:28:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2013/03/12/move-a-cube-with-your-head</id>
    <content type="html"><![CDATA[<p>This post is about head tracking and how to use it in 3D.
It is surprisingly easy to do with the suitable libraries.
We will experiment with
<a href="https://github.com/auduno/headtrackr">headtrackr.js</a> and
<a href="http://github.com/mrdoob/three.js/">three.js</a>.
<a href="https://github.com/auduno/headtrackr">headtrackr.js</a>
is a nice library from
<a href="https://github.com/auduno">auduno</a> to do head tracking in the browser.
You will learn how to do head tracking in webgl in only 20lines of javascript.
I love the web and how easy it is :)</p>

<h2>tl;dr; links</h2>

<ul>
<li>For a simple example. see the <a href="http://jeromeetienne.github.com/tquery/plugins/headtrackr/examples/index.html">&#8220;move a cube with your head&#8221;</a> demo</li>
<li>To mess with the code now without any installation, see this <a href="http://jsfiddle.net/jetienne/tSQQ8/">jsfiddle example</a></li>
<li>for an attempt to make 3d more immersive by using head tracking, see this <a href="http://jeromeetienne.github.com/tquery/plugins/headtrackr/examples/demo.html">demo</a></li>
</ul>


<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/gnVfqfjXxmM" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<h2>WebRTC is great!</h2>

<p>WebRTC starts to get traction. I love that! We have seen
<a href="http://www.webrtc.org/">WebRTC</a>
and
<a href="http://dev.w3.org/2011/webrtc/editor/getusermedia.html">getUserMedia</a>
several times in the past: in
<a href="http://learningthreejs.com/blog/2012/05/15/punch-a-doom-character-in-augmented-reality/">&#8220;Punch a Doom Character in Augmented Reality&#8221;</a>
post, in
<a href="http://learningthreejs.com/blog/2012/02/07/live-video-in-webgl/">&#8220;Fun With Live Video in WebGL&#8221;</a>
post and
<a href="http://learningthreejs.com/blog/2012/05/02/augmented-reality-3d-pong/">&#8220;Augmented Reality 3D Pong&#8221;</a>
post.
It is
<a href="http://www.webrtc.org/blog/seeyouontheweb">already in chrome stable</a>
, and will be in firefox
<a href="https://hacks.mozilla.org/2012/11/progress-update-on-webrtc-for-firefox-on-desktop/">real soon</a>.
They already
<a href="https://hacks.mozilla.org/2013/02/hello-chrome-its-firefox-calling/">talk to each other</a>.
Here we don&#8217;t need the network part of webrtc.
We only need get the webcam video, so
<a href="http://dev.w3.org/2011/webrtc/editor/getusermedia.html">getUserMedia</a>
is enougth. It is in
<a href="http://www.opera.com/browser/">opera 12</a>
too as you can read
<a href="http://dev.opera.com/articles/view/head-tracking-with-webrtc/">here</a>.</p>

<p><a href="https://github.com/auduno">auduno</a> is part of
<a href="http://opera.com">Opera</a> team.
He wrote it as a demo for
<a href="http://www.opera.com/browser/">opera 12</a>
release  which contained
<a href="http://dev.w3.org/2011/webrtc/editor/getusermedia.html">getUserMedia</a>.
For more info on the library, <a href="https://github.com/auduno">auduno</a>
blogged
about internals of
<a href="https://github.com/auduno/headtrackr">his library</a>. You can find details in his
<a href="http://auduno.tumblr.com/post/25125149521/head-tracking-with-webrtc">blog post</a>.
Additionnal info are available in the
<a href="http://auduno.github.com/headtrackr/documentation/reference.html">reference documentation</a>.
Some examples are already in three.js, like
<a href="http://auduno.github.com/headtrackr/examples/targets.html">targets</a>
or
<a href="http://www.shinydemos.com/facekat/">facekat</a>.</p>

<h2>Demo Time !!</h2>

<p><img class="left" src="http://learningthreejs.com/data/2013-03-12-playing-with-headtrackr-dot-js/screenshots/screenshot-box3d-small.png">
As usual we did a plugin for
<a href="http://jeromeetienne.github.com/tquery">tQuery API</a>
to make it easy to use in our environement.
One can find 2 examples for it:
A <a href="http://jeromeetienne.github.com/tquery/plugins/headtrackr/examples/index.html">educational example</a>
where your heads controls a box in 3d.
For best result, <em>make sure your face is well and evenly lighted</em></p>

<p><img class="right" src="http://learningthreejs.com/data/2013-03-12-playing-with-headtrackr-dot-js/screenshots/screenshot-demo-small.png">
Another <a href="http://jeromeetienne.github.com/tquery/plugins/headtrackr/examples/demo.html">demo</a>
where the camera follows your head.
The whole scene moves as you move your head, providing quite an immersive experience.
You can play with it <a href="http://jsfiddle.net/jetienne/tSQQ8/">thru jsfiddle</a> too.</p>

<iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/jetienne/tSQQ8/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h2>Let&#8217;s Get Started</h2>

<p>Ok now lets see how to use this library with
<a href="http://jeromeetienne.github.com/tquery">tQuery API</a>.
First, we include the <code>tquery.headtrackr</code> files in your code.
tQuery plugins supports
<a href="http://requirejs.com">require.js</a>.
It makes dependancies much easier to handle. <code>tquery.headtrackr</code> is no exception, so to include it you can do</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">require</span><span class="p">([</span><span class="s1">&#39;tquery.headtrackr&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">// Your code ...   </span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or if you use the good old <code>&lt;script&gt;</code>, do something like that
to include
<a href="https://github.com/auduno/headtrackr">headtrackr.js</a> itself, the library which handle the head tracking. Then you just include the plugin itself, and you are done.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;headtrackr.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;tquery.headtrackr.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Start Tracking Heads</h3>

<p>First, you instanciate the object with this simple line.
You can pass various options to <code>.createHeadtrackr(opts)</code>.
Here, <code>opts</code> is an
<a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object">Object</a>
with those properties</p>

<ul>
<li><strong>opts.width :</strong> width of the image containing the face. default to 320px</li>
<li><strong>opts.height :</strong> height of the image containing the face. default to 240px</li>
<li><strong>opts.headtrackrOpts :</strong> options passed directly to headtrackr.js. default to <code>{}</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">headTracker</span>    <span class="o">=</span> <span class="nx">tQuery</span><span class="p">.</span><span class="nx">createHeadtrackr</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Default are reasonable, so chances are you dont need to specify anything. To start tracking the head on the webcam, just do the following</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">headTracker</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is possible to stop it with <code>.stop()</code> or to reset it via <code>.reset()</code>.</p>

<h3>Debug View is Cool For User Feedback</h3>

<p><img class="right" src="http://learningthreejs.com/data/2013-03-12-playing-with-headtrackr-dot-js/screenshots/screenshot-debugview-small.png">
If you wish enable the debugView, aka the little visualisation the headtracker result.
It gives feedback to the user on what is happening.
Thus the user can move his head accordingly or to change lighting of the room.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">headTracker</span><span class="p">.</span><span class="nx">debugView</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Face Position Notified thru Events</h3>

<p>When a face is found, events are dispatched to notify the detected positions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">headTracker</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;found&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// Your code ...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>event</code> contains normalized coordinates of the detected face.
They use the same axis as WebGL.
If the head is on the center, <code>event.x</code> and <code>event.y</code> will be 0.
And if the head is vertical, <code>event.angle</code> is 0. More precisely</p>

<ul>
<li><code>.x</code> and <code>.y</code> : It is the center position. it varies from [-1,+1], from left to right
and bottom to top.</li>
<li><code>.width</code> and <code>.height</code>: the width and height :) If it is half of whole image, it is equal to 1.</li>
<li><code>.angle</code>: the Z rotation of the detected head. It is in radian as usual.</li>
<li><code>.headtrackrEvent</code>: the original facetrackingEvent event from
<a href="https://github.com/auduno/headtrackr">headtrackr.js</a>
(see
<a href="http://auduno.github.com/headtrackr/documentation/reference.html">reference</a>
)</li>
</ul>


<h2>Head tracking&#8230; Kesaco ?</h2>

<p>Head tracking is a <a href="http://example.com">well known concept</a>. One can find
<a href="http://www.youtube.com/watch?v=bBQQEcfkHoE">head tracking on ipad</a>.
One can find <a href="http://www.youtube.com/watch?v=Jd3-eiid-Uw">head tracking on wii</a>.
They got impressive result using the informations from the <a href="http://en.wikipedia.org/wiki/Wii_Remote">wiimote</a> or even the <a href="http://example.com">device orientation</a>.
With the <a href="http://en.wikipedia.org/wiki/Kinect">kinect</a>, they even
track the <a href="http://example.com">features</a> of the face itself (e.g. mouth, noze, eyes etc&#8230;)</p>

<p>In our case, we use the image from the webcam.
Unfortunatly face localisation from an image isn&#8217;t exactly 100% accurate to say the least :)
See <a href="http://auduno.github.com/headtrackr/examples/targets.html">here</a>,
this is the same demo as the
<a href="http://www.youtube.com/watch?v=Jd3-eiid-Uw">wii one</a>
or the
<a href="http://www.youtube.com/watch?v=bBQQEcfkHoE">ipad one</a>.
Yet the result isn&#8217;t as convincing.
With <a href="https://github.com/auduno/headtrackr">headtrackr.js</a> and
<a href="http://webrtc.org">webrtc</a>
, we use only the webcam in a uncontrolled environement.
So the accuracy is in consequences.</p>

<p>You can improve efficiency by following a few simples advices:
Avoid hats or a too crazy haircut. Being bold with a beard doesn&#8217;t help :)
Make sure your face is well and evenly lighted and you should be fine.</p>

<h2>Conclusion</h2>

<p>In this post, we have seen it is now possible to do head tracking in a web browser !!
Impressive if you ask me!
Even better, it is easy if you use suitable libraries. Coupled with
<a href="http://github.com/mrdoob/three.js/">three.js</a>
and
<a href="http://jeromeetienne.github.com/tquery">tQuery API</a>,
it is possible provide new immersive experience in
<a href="http://jsfiddle.net/jetienne/tSQQ8/">20lines of javascript</a>.
Im so excited.
This kind of things was academic research 5 years ago, and now everybody can easily use it.
We will likely do more with
<a href="https://github.com/auduno/headtrackr">headtrackr.js</a>.
This is a very nice library with lots of possibilities.
For example, one can use it the head as a game controller, or in a artistic exposition. Stay tuned!</p>

<p>That&#8217;s all folks, have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minecraft Character in WebGL]]></title>
    <link href="http://learningthreejs.com/blog/2012/07/05/minecraft-character-in-webgl/"/>
    <updated>2012-07-05T10:22:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2012/07/05/minecraft-character-in-webgl</id>
    <content type="html"><![CDATA[<p>This post is about Minecraft Character.
We will play with the minecraft character, learn how to do your own and make it move.
I recently saw this excelent <a href="http://djazz.mine.nu/lab/minecraft_items/">minecraft items demo</a>
by <a href="https://twitter.com/#!/daniel_hede">@daniel_hede</a>. It triggered a switch in my head :)
I felt in love with minecraft style of 3d.
It makes modeling so simple.
You don&#8217;t need to learn how to use 3d modeling software like
<a href="http://www.blender.org/">blender</a>,
<a href="http://usa.autodesk.com/maya/">maya</a> and such.
It is easy to create new model based on this style.</p>

<p>Try the <a href="http://learningthreejs.com/data/2012-07-05-minecraft-character-in-webgl/">minecraft plugin demo</a>. This is the
one we gonna build. I used <a href="https://twitter.com/#!/daniel_hede">@daniel_hede</a>&#8217;s code
and did many plugins to make it all simple and fun :)
In this demo, i introduce
<a href="https://github.com/mrdoob/three.js/tree/master/examples/js/postprocessing">three.js post processing</a>
for the first time.
This is the
<a href="http://en.wikipedia.org/wiki/Vignetting">Vignetting</a>
and
<a href="http://en.wikipedia.org/wiki/Sepia_(color)">sepia color</a>
that you see.
Additionnaly, you can easily change the skins with the UI within the demo.
Now let&#8217;s get started!</p>

<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/eg0qshn4VC0" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<h2>Let&#8217;s start coding</h2>

<p>We start to create our world as usual. This initialize the renderer, the camera,
its controls and a rendering loop.
We setup the
<a href="http://learningthreejs.com/blog/2012/01/19/boilerplate-builder-for-three-js/">boilerplate for three.js</a>
and add a page title with some info on our little 3D demo.
We just put the camera a little closer to scene center. Thus the character
will be bigger on screen. We just can&#8217;t get enougth of it, can we ;)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var world    = tQuery.createWorld().boilerplate().pageTitle('#info').start();
</span><span class='line'>world.tCamera().position.z    = 1.8;</span></code></pre></td></tr></table></div></figure>


<p>Now we add a bit of post processing. It is the first time
we talk about this, so let&#8217;s details it a bit.
What is post processing (in a 3d context) ?
Post processing is performed after rendering the 3D, hence the name.
It applies on the screen as a whole. So the effects are in 2D.
What&#8217;s it not ?
It isn&#8217;t for 3d effect on specific objects in your world.</p>

<p> <code>tquery.effectcomposer.js</code> plugin provides a simple api to add
postprocessing to our world. It is a chained API on top of
<a href="https://github.com/mrdoob/three.js/tree/master/examples/js/postprocessing">three.js effect composer</a>.
In our case, we first apply <code>.sepia()</code> to change the colors toward
<a href="http://en.wikipedia.org/wiki/Sepia_(color)">sepia color</a>.
Then we apply <code>.vignette()</code> for
<a href="http://en.wikipedia.org/wiki/Vignetting">Vignetting</a>
and mark the effects list
as finished.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.addEffectComposer().sepia().vignette().finish();</span></code></pre></td></tr></table></div></figure>


<p>Not too hard hey ;)</p>

<h2>Hello Steve!</h2>

<p>Now that we go a world. We will create a minecraft character.
In fact, minecraft main character is called <a href="http://www.minecraftwiki.net/wiki/The_Player">&#8216;steve&#8217;</a>.
 <code>tQuery.MinecraftChar</code> is the main class. It will create
a character model and expose all its limbs too e.g right legs or right arms.
More on that later.
As you can see, we specify <code>skinUrl</code> parameter. It should point to the
image of the skin texture. You can change it anytime with <code>character.loadSkin(skinUrl)</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var character    = new tQuery.MinecraftChar({
</span><span class='line'>  skinUrl : 'images/3djesus.png'
</span><span class='line'>}); </span></code></pre></td></tr></table></div></figure>


<p>Now that we got our character setup, we just need to include it in our 3D world.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>character.model.addTo(world);</span></code></pre></td></tr></table></div></figure>


<h2>Make this model move</h2>

<p>So we talked about exposed limbs&#8230; kinda gross, almost disturbing :)
In fact it just means each part of our model is exposed for you to
play with. It has the head, legs right and left, and the same for the arms.
It is all in <code>character.parts</code>.</p>

<p>So the first step is to hook a function in the world rendering loop.
two parameters are passed <code>delta</code> and <code>now</code>. <code>delta</code> is the number
of seconds since the last iteration of the rendering loop. <code>now</code> is the absolute
time in seconds.
We use those values to tune the animation. Thus it will be animated at the same
speed no matter the <a href="http://en.wikipedia.org/wiki/Frame_rate">fps</a> rate of your computer.
Here is simple animation of the head. So we hook the function and change
the <code>headGroup</code> rotation to fit our taste.
We will make it do an
<a href="http://en.wikipedia.org/wiki/8_(number)">eight</a>
or
<a href="http://en.wikipedia.org/wiki/Infinity#Infinity_symbol">infinite synbol</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.loop().hook(function(delta, now){
</span><span class='line'>  character.parts.headGroup.rotation.x    = Math.sin(now*1.5)/3;
</span><span class='line'>  character.parts.headGroup.rotation.y    = Math.sin(now)/3;
</span><span class='line'>}); </span></code></pre></td></tr></table></div></figure>


<p>This is nice but the body would appear rather static if we move only the head.
Let&#8217;s make see how to make it walk.
When people walks or run, they swing theirs arm and legs.
So we need to change the rotation X of each of those limbs. First we get
an angle relative to current time. It will determine the position of the arms/legs.
The amplitude of the move has been tuned to <code>1.4</code>, play with it and find the
value you like. Then you move the legs and arms by setting the rotation.
Just take care of balancing legs and arms thus his can keep his balance :)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.loop().hook(function(delta, now){
</span><span class='line'>  var angle   = 1/2 * now*Math.PI*2;
</span><span class='line'>  // move the arms
</span><span class='line'>  character.parts.armR.rotation.x = 1.4 * Math.cos(angle + Math.PI);
</span><span class='line'>  character.parts.armL.rotation.x = 1.4 * Math.cos(angle);
</span><span class='line'>  // move the legs
</span><span class='line'>  character.parts.legR.rotation.x = 1.4 * Math.cos(angle);
</span><span class='line'>  character.parts.legL.rotation.x = 1.4 * Math.cos(angle + Math.PI);
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>And we are done! Pretty cool no ? :)</p>

<h3>Conclusion</h3>

<p>So we did a little character ala minecraft.
We got a basic animations of it. Nevertheless it would be neat to make animations
more robusts and generic. A new post will likely focus on this.
I so love this field and how it make things easier.</p>

<p>That&#8217;s all folks. Have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3D Physics With Three.js and Physijs]]></title>
    <link href="http://learningthreejs.com/blog/2012/06/05/3d-physics-with-three-js-and-physijs/"/>
    <updated>2012-06-05T12:13:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2012/06/05/3d-physics-with-three-js-and-physijs</id>
    <content type="html"><![CDATA[<p>This is yet another post about physics.
This one is about
<a href="https://github.com/chandlerprall/Physijs">physijs</a>
by
<a href="https://twitter.com/#!/chandlerprall">Chandler Prall</a>.
It easily bind
<a href="https://github.com/kripken/ammo.js/">ammo.js</a>
and
<a href="http://mrdoob.github.com/three.js/">three.js</a>.
We will walk thru an example using it.
Physics is always important in 3D graphics.
It makes scenes more realistic.
Additionally, if you simple put your object into the scene, it will move nicely and realisticly.
So you spend less time tuning each moves. I am quite lazy so it matters :)
The <a href="http://www.youtube.com/watch?v=THI82Q-P8Fo">screencast</a>
presents the <a href="http://learningthreejs.com/data/2012-06-05-3d-physics-with-three-js-and-physijs/">demo we gonna code</a>
and various examples of what is possible with
<a href="https://github.com/kripken/ammo.js/">ammo.js</a>.</p>

<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/THI82Q-P8Fo" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<h2>What About Physics Engines ?</h2>

<p>We already did physics with three.js.
It was with <a href="https://github.com/jeromeetienne/microphysics.js">microphysics.js</a> for <a href="http://marblesoccer.com">marblesoccer</a> minigame.
It is a micro library implementing 3D physics.
We talked quite a bit about it in
<a href="http://learningthreejs.com/blog/2011/10/17/lets-make-a-3d-game-microphysics-js/">&#8220;Lets Make a 3D Game: microphysics.js&#8221;</a>
and
<a href="http://learningthreejs.com/blog/2011/11/02/lets-make-a-3d-game-helper-for-microphysics-js/">&#8220;Lets Make a 3D Game: microphysics.js, Even Easier&#8221;</a>.
It is only 500lines!
Unfortunatly, this tiny size comes limitations.</p>

<p>Today we gonna use <a href="https://github.com/chandlerprall/Physijs">physijs</a> by <a href="https://twitter.com/#!/chandlerprall">Chandler Prall</a>.
This is a nice library which make it easy to use
<a href="https://github.com/kripken/ammo.js/">ammo.js</a>
with
<a href="http://mrdoob.github.com/three.js/">three.js</a>.
ammo.js is &#8220;Direct port of the Bullet physics engine to JavaScript using
<a href="https://github.com/kripken/emscripten">Emscripten</a>.
The source code is translated directly to JavaScript, without human rewriting, so functionality should be identical to the original Bullet.&#8221;</p>

<p><a href="http://bulletphysics.org/">bullet</a> is a full-blown physics engine well-known in the 3D community.
It can do a lot as you can see in its <a href="http://bulletphysics.com/Bullet/BulletFull/">docs</a>.
<a href="https://github.com/kripken/ammo.js/">ammo.js</a>
supports all the features you can expect from a mature 3D physics engine.
Charles J. Cliffe, aka <a href="https://twitter.com/#!/ccliffe">@ccliffe</a>,
did several demos using ammo.js.
This one is a <a href="http://cjcliffe.github.com/CubicVR.js/cubicvr/samples/physics/physics_heightfield.html">heighfield</a>
And look at this <a href="http://cjcliffe.github.com/CubicVR.js/cubicvr/samples/vehicle_physics_demo/stunt_track1.html">stunt track</a>!
Both are on top of <a href="http://www.cubicvr.org/">cubicvr</a>, <a href="https://twitter.com/#!/ccliffe">@ccliffe</a> own library.</p>

<p><a href="https://github.com/chandlerprall/Physijs">physijs</a> has been written with performance in mind.
<a href="https://github.com/kripken/ammo.js/">ammo.js</a> is running in a
<a href="https://developer.mozilla.org/En/Using_web_workers">webworker</a>.
So it most likely run on a second CPU. This is twice more cpu power for your javascript!
Coordinates are exchanged with
<a href="http://updates.html5rocks.com/2011/12/Transferable-Objects-Lightning-Fast">transferable objects</a>
when available.
Transferable objects is a special type of object which can be transfered between the main thread and the worker <strong>without copying</strong>
the data. Thus no matter how large the data are, it will be very low latency.</p>

<h2>Lets Get Started</h2>

<p>The code of today is a copy of the
<a href="http://chandlerprall.github.com/Physijs/examples/collisions.html">collision example</a>
from
<a href="http://chandlerprall.github.com/Physijs/">physijs</a>
using it thru tQuery API.
It may usefull to reimplement the same thing, just to be sure they both perform the same way. :)
<a href="http://learningthreejs.com/data/2012-06-05-3d-physics-with-three-js-and-physijs/">Try it out</a>.
So we got object falling on the ground and slightly bouncing on it. Let&#8217;s do just that.</p>

<center>
    <iframe width="100%" height="420" src="http://learningthreejs.com/data/2012-06-05-3d-physics-with-three-js-and-physijs/" frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe>
</center>


<p>First a classic. We create a tQuery.World. So you immediatly got
a scene, a renderer, camera and its controls. All that already
setup according to reasonable default.
 <code>.boilerplate()</code> adds
the <a href="http://learningthreejs.com/blog/2011/12/20/boilerplate-for-three-js/">&#8220;three.js boilerplate&#8221;</a>
we did last year. We disable the camera controls as it will stay still in this scene.
Then we <code>.start()</code> to launch the render loop.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var world    = tQuery.createWorld().boilerplate({cameraControls: false}).start();</span></code></pre></td></tr></table></div></figure>


<p>Now we setup the camera to be a bit far from the scene center. Thus
we got room to display larger objects</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.tCamera().position.set( 70, 40, 70 );
</span><span class='line'>world.tCamera().lookAt( world.tScene().position );</span></code></pre></td></tr></table></div></figure>


<p>Now we need to tell the renderer that shadow has to be casted. This is done by the simple lines below.
We saw the details in <a href="http://learningthreejs.com/blog/2012/01/20/casting-shadows/">&#8220;Casting Shadows&#8221;</a> post.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.tRenderer().shadowMapEnabled   = true;
</span><span class='line'>world.tRenderer().shadowMapSoft       = true;
</span><span class='line'>world.tRenderer().setClearColorHex( 0xffffff, 1 );</span></code></pre></td></tr></table></div></figure>


<p>Now we enable the physics into the world.
this is important. From now on, all the physics-enabled object
of this world will move according to realistic physics rules.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.enablePhysics();</span></code></pre></td></tr></table></div></figure>


<h2>Enlight your world</h2>

<p>Here we setup the lights. For simplicity sake, we will use only one directional light.
First we tune the position and color to fit our tastes. Dont be shy, play with those parameters to get a feel of it.
Then we tune shadow parameters.
Those can be tricky to tune.
You can find more details in <a href="http://learningthreejs.com/blog/2012/01/20/casting-shadows/">&#8220;Casting Shadow&#8221;</a> post.
It helps if you make the shaddow camera visible. You can do so with <code>.shadowCameraVisible(true)</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tQuery.createDirectionalLight().addTo(world)
</span><span class='line'>  .position(20, 40, -15).color(0xffffff)
</span><span class='line'>  .castShadow(true).shadowMap(512*2,512*2)
</span><span class='line'>  .shadowCamera(60, -60, 60, -60, 20, 200)
</span><span class='line'>  .shadowDarkness(0.7).shadowBias(.002)</span></code></pre></td></tr></table></div></figure>


<h2>Let&#8217;s create a ground to stand on</h2>

<p>First we create the texture for our ground. We use <code>rocks.jpg</code> to have like a rock
effect. We use <code>.RepeatWrapping</code> to repeat the texture on the faces and get a
proper scale.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var texture  = THREE.ImageUtils.loadTexture( "images/rocks.jpg" );
</span><span class='line'>texture.wrapS = texture.wrapT = THREE.RepeatWrapping;
</span><span class='line'>texture.repeat.set( 3, 3 );</span></code></pre></td></tr></table></div></figure>


<p>In fact, the ground is only a cube which is wide and flat, a bit like
the <a href="http://en.wikipedia.org/wiki/Flat_Earth">old-vision of earth</a> :)
It is usual now, we setup the position, material and shadow.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var ground   = tQuery.createCube(100, 1, 100).addTo(world)
</span><span class='line'>  .position(0, -10, 0)
</span><span class='line'>  .setLambertMaterial().map(texture).back()
</span><span class='line'>  .receiveShadow(true)</span></code></pre></td></tr></table></div></figure>


<p>Now we just have to setup the physics for the ground. This is done
by <code>.enablePhysics()</code>. The <code>mass</code> parameter define the mass
of the object in the physics.
By default, it is automatically computed depending on the volume of the object.
Here zeroing the mass is a special case, which say
&#8220;the mass is infinite, dont move, ever&#8221; :)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ground.enablePhysics({
</span><span class='line'>  mass    : 0
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h2>Spawning object in a 3D world</h2>

<p>Spawning is always a delicate matter in our world.
But first let&#8217;s load the texture for the spawned objects.
It is done outside of the loop thus it get reused. Aka it is sent
only once to the GPU for all the objects. This is an important
point from performance point of view. Last year,
<a href="http://learningthreejs.com/blog/2011/09/16/performance-caching-material/">&#8220;Performance: Caching Material&#8221;</a>
post was about this very topic.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var cTexture = THREE.ImageUtils.loadTexture( "images/plywood.jpg" );</span></code></pre></td></tr></table></div></figure>


<p>Now we declare <code>spawnObject()</code> which gonna take care of spawning one object.
So we create a cube, setup its position, rotation and material. This is all good. Oh dont
forget to use <code>.castShadow()</code> as got <a href="http://en.wikipedia.org/wiki/Shadow_mapping">shadow mapping</a> going on :)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var spawnObject  = function(){
</span><span class='line'>  var object  = tQuery.createCube(4,4,4).addTo(world)
</span><span class='line'>      .rotation(Math.random()*Math.PI*2, Math.random()*Math.PI*2, Math.random()*Math.PI*2)
</span><span class='line'>      .position(Math.random()*15-7.5, 25, Math.random()*15-7.5)
</span><span class='line'>      .setLambertMaterial().map(cTexture).back()
</span><span class='line'>      .castShadow(true)</span></code></pre></td></tr></table></div></figure>


<p>Here we enable the physics on this object. So the world will handle all its move from now on.
It will object to physics laws according to the parameters you setup.
<a href="http://en.wikipedia.org/wiki/Friction">friction</a> is the force resisting when 2 objects slides against each other.
<a href="http://en.wikipedia.org/wiki/Coefficient_of_restitution">resititution</a> is how bouncy the object is.
For scientific definition, go read a book :)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> object.enablePhysics({
</span><span class='line'>      friction    : 0.4,
</span><span class='line'>      restitution : 0.6
</span><span class='line'>  });</span></code></pre></td></tr></table></div></figure>


<p>Now we gonna play with the &#8216;collision&#8217; event. Physijs is able to notify
you when an object collide with another. Just use <code>.addEventListener()</code> on &#8216;collision&#8217;.
Here we gonna change the color of the object depending on the number of collisions
they got.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> var nCollisions = 0;
</span><span class='line'>  object.physics().addEventListener('collision', function(){
</span><span class='line'>      var colliColors = [0xcc8855, 0xbb9955, 0xaaaa55, 0x99bb55, 0x88cc55, 0x77dd55];
</span><span class='line'>      if( ++nCollisions &lt; colliColors.length ){
</span><span class='line'>          var color   = colliColors[nCollisions];
</span><span class='line'>          object.get(0).material.color.setHex( color );
</span><span class='line'>      }
</span><span class='line'>  })
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now we simply use <a href="https://developer.mozilla.org/en/DOM/window.setInterval"><code>setInterval()</code></a> to
spawn an object every seconds.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setInterval(spawnObject, 1000);</span></code></pre></td></tr></table></div></figure>


<p>And we are DONE! We got a realistic physics in our 3D world! not bad hey :)</p>

<h2>Conclusion</h2>

<p>So, thanks to <a href="https://github.com/chandlerprall/Physijs">physijs</a>,
it is now possible to get full blown realistic physics
using
<a href="https://github.com/mrdoob/three.js/">three.js</a>
and
<a href="https://github.com/jeromeetienne/tquery">tQuery</a>.
It is a simple way to make scene more realistic. It is nice to experiment with.
I will do more on this very soon!</p>

<p>Thanks all folks! have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three.js Sport Car on iOS at 40fps]]></title>
    <link href="http://learningthreejs.com/blog/2012/05/29/three-js-sportcar-on-ios/"/>
    <updated>2012-05-29T13:48:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2012/05/29/three-js-sportcar-on-ios</id>
    <content type="html"><![CDATA[<p>This post is about iOS and three.js.
It may seem surprising, but <a href="http://en.wikipedia.org/wiki/iOS">iOS</a> supports WebGL since version 4.2.
There is a tough limitation tho, it is available only in their advertisment plateform,
<a href="http://en.wikipedia.org/wiki/IAd">iAds</a>, not in safari browser.
I got a ipad2 so i experimented a bit with three.js on iOS to see what is going on.
Most WebGL examples from
<a href="https://github.com/mrdoob/three.js/">three.js</a> and
<a href="https://github.com/jeromeetienne/tquery">tQuery</a>
are working nicely on iOS.</p>

<p>The
<a href="http://www.youtube.com/watch?v=3yc4qhP87oY">screencast</a>
below shows an ipad2 running the car demo we did last week in
<a href="http://learningthreejs.com/blog/2012/05/21/sport-car-in-webgl/">&#8220;Sport Car in WebGL&#8221;</a> post.
It runs at 40fps on the video. Rather good!
Especially when you know the demo isn&#8217;t optimized.
This car is way too detailed.
One could reduce the size of this model by half without loosing much.
So on mobile, the Good part is that <em>fps are good</em>.
The Bad part is that <em>speed is slower</em> and <em>balanced differently</em>.
This unbalanced part worries me a bit i admit. We need to better understand the mobile plateform.
But hey, 40fps is quite good, way enougth to make a game!</p>

<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/3yc4qhP87oY" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<h2>Experimenting with WebGL on iOS</h2>

<p>Yesterday,
<a href="http://news.ycombinator.com/user?id=daeken">daeken</a>
published a
<a href="http://demoseen.com/webglenabler/#">WebGL Enabler</a>
for iOS.
It enables WebGL in the browser for jailbroken iOS devices.
Or if you prefere a less invasive solution, not requiring to jailbreak your devices.
You can use
<a href="https://github.com/benvanik/WebGLBrowser">WebGL Browser</a>
made by
<a href="http://noxa.org/">Ben Vanik</a>
, aka <a href="https://twitter.com/#!/benvanik">@benvanik</a> on twitter.
He is wellknow for <a href="https://github.com/benvanik/WebGL-Inspector">WebGL Inspector</a>.</p>

<p>By the way,
<a href="https://github.com/benvanik/WebGLBrowser">WebGL Browser</a>
and
<a href="http://demoseen.com/webglenabler/#">WebGL Enabler</a>,
are both based on a similar trick.
It has been discovered by
<a href="https://twitter.com/#!/atnan">Nathan de Vries</a>
who told about it in this
<a href="http://atnan.com/blog/2011/11/03/enabling-and-using-webgl-on-ios/">excelent post</a>.
A very good read to understand the underlying details!
Unfortuntly this is using an unofficial API&#8230; so it is
impossible to get it for the apps store unfortunatly.</p>

<h2>WebGL Status on Mobile</h2>

<p>WebGL is starting to be hot on mobile.
<a href="http://www.blackberry.com/playbook">blackberry playbook2</a>
got it
<a href="http://devblog.blackberry.com/2012/02/playbook-native-webgl-development/">by default</a>.
<a href="http://www.mozilla.org/en-US/b2g/">boot on gecko</a> got it too with firefox mobile.
It isn&#8217;t enabled on android and iOS tho, the 2 majors.
Maybe we will have more info in june with
<a href="https://developers.google.com/events/io/">google.io</a>
and
<a href="https://developer.apple.com/wwdc/">apple event</a>.
google got <a href="http://www.google.com/intl/en/chrome/android/">chrome on android</a>.
iOS already got <a href="http://atnan.com/blog/2011/11/03/enabling-and-using-webgl-on-ios/">support</a>, this is more a matter of policy.
So lets hope google will announce WebGL support for chrome mobile.
and apple will announce they accepts WebGL on apps store applications.
I am an optimist personn, i hope :)</p>

<h2>Conclusion</h2>

<p>WebGL is coming hard on mobile.
<a href="https://github.com/mrdoob/three.js/">three.js</a> and
<a href="https://github.com/jeromeetienne/tquery">tQuery</a>
already work on it.
We need the 2 majors mobile OS to support it tho.
It think having it on android and ios would significantly change WebGL landscape.
Meanwhile you can already play with it, and do minigames with it, thus be ready when needed :)</p>

<p>That&#8217;s all to today folks. Have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sports Car in WebGL]]></title>
    <link href="http://learningthreejs.com/blog/2012/05/21/sport-car-in-webgl/"/>
    <updated>2012-05-21T12:16:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2012/05/21/sport-car-in-webgl</id>
    <content type="html"><![CDATA[<p>This post is about sports cars and how cool they can be!
Once again, we gonna expose gems from three.js examples.
It contains several sport cars which are fun to play with.
You can drive them around and all.
This is a good base for a game.
We made tQuery plugins on top to make them easily reusable.
Our scene will be a nice sport car, a grass ground, a sunset sky with shadow casting.
All that in 40-lines of javascript.</p>

<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/KxRfFd9SM5s" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<h2>What We Gonna Build ?</h2>

<p>What you see below is what we gonna build. Pretty nice no ?
<a href="http://learningthreejs.com/data/2012-05-21-sport-car-in-webgl/">Try it out</a>.</p>

<center>
    <iframe width="100%" height="420" src="http://learningthreejs.com/data/2012-05-21-sport-car-in-webgl/" frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe>
</center>


<p>It shows what is possible with <code>tquery.car.js</code>.
It is a plugin provides rendering and controls of sport cars.
It is heavily based on some examples by <a href="http://alteredqualia.com/">alteredq</a> in
<a href="http://github.com/mrdoob/three.js/">three.js</a>.
You can find them
<a href="http://mrdoob.github.com/three.js/examples/webgl_materials_cars.html">here</a>
and
<a href="http://mrdoob.github.com/three.js/examples/webgl_materials_cubemap_dynamic.html">here</a>.
The car is a Bugatti Veyron model by
<a href="http://artist-3d.com/free_3d_models/dnm/model_disp.php?uid=1129">Troyano</a>.
Now let&#8217;s get started.</p>

<h2>Let&#8217;s start coding</h2>

<p>We start to create our world as usual. We enable the
<a href="http://learningthreejs.com/blog/2011/12/20/boilerplate-for-three-js/">boilerplate for three.js</a>.
It is a fast way start, avoids repetitive tasks, following DRY principles and includes all those good practices which are so easy to forget.
Then we just have to <code>.start()</code> the rendering loop on this world.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var world    = tQuery.createWorld().boilerplate().start();</span></code></pre></td></tr></table></div></figure>


<p>Now we setup the renderer.
In this scene, we want to cast shadows as if it cames from the sun.
This is a nice way to improve the realism in our 3D scene
We already talked about it in <a href="http://learningthreejs.com/blog/2012/01/20/casting-shadows/">&#8220;Casting Shadow&#8221;</a>
The renderer needs to be notified so we set <code>.shadowMapEnabled</code> and <code>.shadowMapSoft</code> to true.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.renderer().shadowMapEnabled    = true;
</span><span class='line'>world.renderer().shadowMapSoft        = true;</span></code></pre></td></tr></table></div></figure>


<h2>The Sky</h2>

<p>Now we add a sky to the 3D scene.
It will fill the space and make the scene more realistic.
We use a skymap for that. It is WebGL trick which take a cube, make it so large that it seems infinite.
On it, we map a 360degeree texture shaped as a cube, and use a special shader to display it. All is in this
shader, it makes the cube appear as if we were in a gigantic sphere. Exactly like we would feel with a sky above
our head.
We already saw skymaps in <a href="http://learningthreejs.com/blog/2011/08/15/lets-do-a-sky/">&#8220;let&#8217;s do a sky&#8221;</a> post.
We just added a new plugins <code>tquery.skymap.js</code>.
It avoids repeative code when you do skymap or environement map.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tQuery.createSkymap('skybox').addTo(world);</span></code></pre></td></tr></table></div></figure>


<h2>The Lights</h2>

<p>Here we setup the lights. We put one ambient and 2 directional lights.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tQuery.createAmbientLight().addTo(world).color(0xFFFFFF);
</span><span class='line'>tQuery.createDirectionalLight().addTo(world).position(1,1,-1).color(0xffffff).intensity(2);</span></code></pre></td></tr></table></div></figure>


<p>It is rather simple so lets focus on the last one, the one casting shadow.
We want it to appear as coming from the sun.
So we look at the skymap and approximatly localized the sun at <code>(-10, 20, 30)</code>.
Then we tune shadow parameters to fit our tastes.
You can find more details in <a href="http://learningthreejs.com/blog/2012/01/20/casting-shadows/">&#8220;Casting Shadow&#8221;</a> post.
Those parameters can be tricky to tune. It helps if you make the shaddow
camera visible. You can do so with <code>.shadowCameraVisible(true)</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tQuery.createDirectionalLight().addTo(world).position(-10, 20, 30).color(0xffffff).intensity(4)
</span><span class='line'>  .castShadow(true).shadowDarkness(0.8)
</span><span class='line'>  .shadowMap(512*2,512*2)
</span><span class='line'>  .shadowCamera(10, -10, 20, -20, 0.1, 50);</span></code></pre></td></tr></table></div></figure>


<h2>The Ground</h2>

<p>Now we add the ground. A car needs a ground to stand on :)
For that, we got a little helper <code>tquery.grassground.js</code>.
This is just building a <code>THREE.Plane</code> and mapping a grass
texture into it.
It does the job for a simple and fast ground.
We have seen something similar with <code>tquery.checkerboard.js</code> in
<a href="http://learningthreejs.com/blog/2012/05/04/tquery-md2character-a-plugin-for-doom-characters/">&#8220;tQuery Plugin for Doom Characters&#8221;</a>
post.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var ground   = tQuery.createGrassGround({
</span><span class='line'>  textureUrl  : '../../grassground/images/grasslight-big.jpg',
</span><span class='line'>  textureRepeatX  : 30,
</span><span class='line'>  textureRepeatY  : 30,       
</span><span class='line'>}).addTo(world).receiveShadow(true).scaleBy(100);</span></code></pre></td></tr></table></div></figure>


<h2>The Car</h2>

<p>First we instanciate a <code>tQuery.Car</code> object with <code>tQuery.createCar()</code>.
It will load the models, then material will be setup.
 <code>tQuery.Car</code> handles the displacement of the car too.
You can make the car turn, go forward and backward, using <code>car.controls()</code>.
you can even switch on/off the lights with <code>.flareVisible()</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var car  = tQuery.createCar();</span></code></pre></td></tr></table></div></figure>


<p>Then we had the car model in our world scene. Important if you want to see it :)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.add(car.model())</span></code></pre></td></tr></table></div></figure>


<p>Now we got the car on the scene, this is all good.
But we need the camera to follow this car. We create a camera controls specific
to mimic the usual camera in car game. The camera is placed a bit behind the car and looks forward.
The faster you go, the further you look. This is always nice to see what is coming at you :)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tQuery.Car.createCameraControls(car, world);</span></code></pre></td></tr></table></div></figure>


<h2>Car Controls</h2>

<p>Now we hook the controls to the car. This determines how the player will control the
car. It can be controlled by the keyboard, so users press arrows on keyboard
and the car moves.
It can be controlled by the <a href="http://dev.w3.org/geo/api/spec-source-orientation.html">device orientation</a>.
We already talked device orientation in game in
<a href="http://learningthreejs.com/blog/2011/09/20/lets-make-a-3D-game-device-orientation/">this post</a>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var hasTouchEvent    = "ontouchstart" in window;
</span><span class='line'>if( hasTouchEvent )   car.hookDeviceOrientation();
</span><span class='line'>else          car.hookKeyboard();</span></code></pre></td></tr></table></div></figure>


<p>Now maybe you wonder &#8220;why this devices orientation&#8221; ?
I ported tQuery to IOS. So since tQuery r49.1, it is possible to run
tquery on your iphones or ipads.
It is possible to render with <a href="http://www.w3.org/TR/2dcontext/">canvas 2D</a> in the regular browser.
Even possible to render WebGL using
<a href="https://github.com/benvanik/WebGLBrowser">WebGL Browser</a> by <a href="https://twitter.com/#!/benvanik">Ben Vanik</a>.</p>

<h2>The Road</h2>

<p>In a scene, it is cool to create a goal, something for the user to do.
A road seems like a perfect goal for a car :)
First we create the material we gonna use. This is a <a href="http://en.wikipedia.org/wiki/Lambertian_reflectance">lambert</a>
with a <a href="http://en.wikipedia.org/wiki/Reflection_mapping">reflection</a>. You put a cube texture in the
 <code>envMap</code> parameter and you got your reflection :) Here again, we use tquery.skymap.js to create the cube texture.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var material = new THREE.MeshLambertMaterial({
</span><span class='line'>  ambient : 0x444444,
</span><span class='line'>  color   : 0x666666,
</span><span class='line'>  envMap  : tQuery.createCubeTexture('skybox')
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Now we add the arches. In fact, they are torus which are half in the ground, so the
visible part looks like an arche.
We put 5 of them along the Z axis.
They are all aligned to give a kindof road.
 <code>.castShadow(true)</code> make the 3D object as casting shadow. Always a nice trick to enhance realism.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for(var i = 0; i &lt; 5; i++){
</span><span class='line'>  tQuery.createTorus(1.25-0.25, 0.25, 8, 6*4, material).addTo(world)
</span><span class='line'>      .castShadow(true).translateZ( 2 + i * 5 );      
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>And we are <strong>DONE</strong>! We got a nice looking car, driving on grass with a sun set. It is
controlled by keyboard and the camera controls is suitable for a game. Not bad
for 40 lines of javascript.</p>

<h2>Conclusion</h2>

<p>In this post, i walked you thru a example of <code>tQuery.car.js</code>. It builds a rather
cool scene in 40lines of js. It seems a nice base for a game. Like the
<a href="http://learningthreejs.com/blog/2012/05/15/punch-a-doom-character-in-augmented-reality/">two</a>
<a href="http://learningthreejs.com/blog/2012/05/08/sound-visualisation-vuemeter-in-webgl/">previous</a>
walk through, we got very short code. I like this, it makes it easier to understand
and learn. WebGL for All!! :)</p>

<p>That&#8217;s all folks! have fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Punch A Doom Character in Augmented Reality]]></title>
    <link href="http://learningthreejs.com/blog/2012/05/15/punch-a-doom-character-in-augmented-reality/"/>
    <updated>2012-05-15T11:59:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2012/05/15/punch-a-doom-character-in-augmented-reality</id>
    <content type="html"><![CDATA[<p>Did you ever dreamed of punching a doom character ? They look evil and killed
you so many time while you were playing the game. It is revenge time! This
post will help you realize your dream :)
It is about a minigame called &#8220;Punch A Doom Character in Augmented Reality&#8221;
because in this game, the player can punch Doom Character in augmented reality :)</p>

<p>The character is displayed in 3D with WebGL with <a href="http://github.com/mrdoob/three.js/">three.js</a>.
The player gestures are recognized thru the webcam by <a href="https://github.com/jeromeetienne/augmentedgesture.js">augmentedgesture.js</a> library.
It uses <a href="http://webrtc.org">WebRTC</a> <a href="http://dev.w3.org/2011/webrtc/editor/getusermedia.html">getUserMedia</a> to get the webcam
using open standards.
You can play this minigame <a href="http://learningthreejs.com/data/2012-05-15-punch-a-doom-character-in-augmented-reality">here</a>.
In fact, it is an example of <a href="https://github.com/jeromeetienne/augmentedgesture.js">augmentedgesture.js</a> library.
We will walk you thru the code. Only 60 lines of Javascript.</p>

<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/Aa9945MGRL0" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<p>We have seen augmented gesture in <a href="http://learningthreejs.com/blog/2012/05/02/augmented-reality-3d-pong/">&#8220;Augmented Reality 3D Pong&#8221;</a> post
and MD2 Characters in <a href="http://learningthreejs.com/blog/2012/05/04/tquery-md2character-a-plugin-for-doom-characters/">&#8220;tQuery Plugin for Doom Characters&#8221;</a> post.
Now we gonna associate them together in our mini game :)
I presented it at <a href="www.web-5.org">Web-5</a> conference in april.
At the time, i recorded a preview <a href="http://www.youtube.com/watch?v=hUYM93xaIgg">&#8220;Doom: a new workout for geek?&#8221;</a>.
Now let&#8217;s get started!</p>

<h2>The 3D World</h2>

<p>First we initialize the world in 3D.
With <code>tQuery.createWorld()</code>, we create a <code>tQuery.World</code>.
With <code>.boilerplate()</code>, we setup a boilerplate on this world. A boilerplate is
a fast way to get you started on the right foot. It is the
<a href="http://learningthreejs.com/blog/2011/12/20/boilerplate-for-three-js/">learningthreejs boilerplate for three.js</a>.
With <code>.start()</code>, we start the rendering loop. So from now on, the world scene
gonna be rendered periodically, typically 60time per seconds.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var world    = tQuery.createWorld().boilerplate().start();</span></code></pre></td></tr></table></div></figure>


<p>We setup the camera now. We remove the default camera controls from the boilerplate.
Then we put the camera at <code>(0,1.5,5)</code> and looking toward <code>(0,1,-1)</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.removeCameraControls()
</span><span class='line'>world.camera().position.set(0,1.5, 4);
</span><span class='line'>world.camera().lookAt(new THREE.Vector3(0,1,-1));</span></code></pre></td></tr></table></div></figure>


<p>Now we change the background color. This confusing line ensure the background of the
3D scene will be rendered as <code>0x000000</code> color, aka black. We set a black
background to give an impression of night.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.renderer().setClearColorHex( 0x000000, world.renderer().getClearAlpha() );</span></code></pre></td></tr></table></div></figure>


<p>We had a fog to the scene. For that, we use <code>tquery.world.createfog.js</code> plugins.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.addFogExp2({density : 0.15});</span></code></pre></td></tr></table></div></figure>


<h3>The Lights</h3>

<p>Here we setup the lights of our scene. This is important as it determine how
your scene looks. We add a ambient light and a directional light.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tQuery.createAmbientLight().addTo(world).color(0x444444);
</span><span class='line'>tQuery.createDirectionalLight().addTo(world).position(-1,1,1).color(0xFFFFFF).intensity(3);</span></code></pre></td></tr></table></div></figure>


<h3>The Ground</h3>

<p>We create a large checkerboard with <code>tquery.checkerboard.js</code> plugin.
We scale the checkerboard to 100 per 100 units in the 3D world. Thus it is
quite large and disappears into the fog. It gives the cheap impression of
an infinite checkerboard.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tQuery.createCheckerboard({
</span><span class='line'>  segmentsW   : 100,  // number of segment in width
</span><span class='line'>  segmentsH   : 100   // number of segment in Height
</span><span class='line'>}).addTo(world).scaleBy(100);</span></code></pre></td></tr></table></div></figure>


<h3>The Character</h3>

<p>We use <code>tQuery.RatamahattaMD2Character</code> plugin. Its inherits from
 <code>tQuery.MD2Character</code> plugin. All the configuration for this particular
character <code>ratamahatta</code> is already done for you.
We attach it to tQuery world.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var character    = new tQuery.RatamahattaMD2Character().attach(world);</span></code></pre></td></tr></table></div></figure>


<p>When an animation is completed, switch to animation &#8216;stand&#8217;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>character.bind('animationCompleted', function(character, animationName){
</span><span class='line'>  console.log("anim completed", animationName);
</span><span class='line'>  this.animation('stand');
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h2>Recognize Augmented Gestures</h2>

<p>First we instanciate an object of <strong>AugmentedGesture</strong> class.
 <code>.enableDatGui()</code> will add a <a href="http://workshop.chromeexperiments.com/examples/gui">Dat.GUI</a>.
This is a nice library to tune parameters. We use it to tune augmentedgesture pointers.
You can read more about it in <a href="http://learningthreejs.com/blog/2011/08/14/dat-gui-simple-ui-for-demos/">&#8220;Dat-gui - Simple UI for Demos&#8221;</a> post.
 <code>.start()</code> asks it to begin monitoring the webcam and see if it finds markers.
 <code>.domElementThumbnail()</code> put the webcam view as a thumbnail on the screen. This is what you
see on top-left.
This is usefull for the user, it is used as feedback to know what is happening</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var aGesture = new AugmentedGesture().enableDatGui().start().domElementThumbnail();</span></code></pre></td></tr></table></div></figure>


<h3>The Pointers</h3>

<p>Now that we got our AugmentedGesture instance, we gonna configure the pointers.
One for the right hand, one for the left hand. For each, we setup the options
to adapt each hand colors.
In my case, the right hand is containing a green ball and the left hand contains a red ball.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var pointerOpts  = new AugmentedGesture.OptionPointer();
</span><span class='line'>pointerOpts.pointer.crossColor    = {r:    0, g: 255, b:   0};
</span><span class='line'>pointerOpts.colorFilter.r = {min:   0, max:  95};
</span><span class='line'>pointerOpts.colorFilter.g = {min: 115, max: 255};
</span><span class='line'>pointerOpts.colorFilter.b = {min:  25, max: 150};
</span><span class='line'>aGesture.addPointer("right", pointerOpts);</span></code></pre></td></tr></table></div></figure>


<p>Now we do the same for the left pointer.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var pointerOpts  = new AugmentedGesture.OptionPointer();
</span><span class='line'>pointerOpts.pointer.crossColor    = {r:    255, g:   0, b: 128};
</span><span class='line'>pointerOpts.colorFilter.r = {min: 190, max: 255};
</span><span class='line'>pointerOpts.colorFilter.g = {min:  30, max: 255};
</span><span class='line'>pointerOpts.colorFilter.b = {min:   0, max: 100};
</span><span class='line'>aGesture.addPointer("left", pointerOpts);</span></code></pre></td></tr></table></div></figure>


<h3>Gesture Analysis</h3>

<p>Now that augmentedgesture.js is giving us the position of each hand, we gonna
convert that into events. <code>punchingRight</code> when the user gives a punch with
the right hand and <code>punchingLeft</code> for the left hand.
We establish a variable to store the user moves. It is quite simple
 <code>.punchingRight</code> is true when the use is punching with his right hand.
 <code>.punchingLeft</code> is the same for the left hand.
and <code>.changed</code> is true when values change.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var userMove = {
</span><span class='line'>  punchingRight   : false,
</span><span class='line'>  punchingLeft    : false,
</span><span class='line'>  changed     : false
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>we bind the event <code>mousemove.left</code> thus we are notified when the user moves his
left hand. The algo we use is very simple: if the left hand is on the right part of
the screen, then the user is considered &#8220;punchingLeft&#8221;. Dont forget
to <code>.changed</code> to true</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aGesture.bind("mousemove.left", function(event){
</span><span class='line'>  var state   = event.x &gt; 1 - 1/3;
</span><span class='line'>  if( state === userMove.punchingLeft )   return;
</span><span class='line'>  userMove.punchingLeft   = state;
</span><span class='line'>  userMove.changed    = true;
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Now we need the same thing for the other hand. all the the same.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aGesture.bind("mousemove.right", function(event){
</span><span class='line'>  var state   = event.x &lt; 1/3;
</span><span class='line'>  if( state === userMove.punchingRight )  return;
</span><span class='line'>  userMove.punchingRight  = state;
</span><span class='line'>  userMove.changed    = true;
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h2>Bind Character and Augmented Gestures</h2>

<p>Now we hook a function to the rendering loop. This function will be executed
every time the scene is renderered. The first thing we do in this function
is to check that userMove has <code>.changed</code>. If not, we do nothing.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>world.loop().hook(function(){
</span><span class='line'>  if( userMove.changed === false )    return;
</span><span class='line'>  userMove.changed = false;</span></code></pre></td></tr></table></div></figure>


<p>Now we process each move of the user. If the user is <code>punchingRight</code>, play
the animation <code>crdeath</code> of the character. If he is <code>punchingLeft</code>,
play <code>crplain</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> if( userMove.punchingRight )        character.animation('crdeath');
</span><span class='line'>  else if( userMove.punchingLeft )    character.animation('crpain');
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>And you are <strong>DONE</strong>! Pretty nice no ? :)</p>

<h2>Conclusion</h2>

<p>In this post we built a mini-game where users can punch doom character in augmented reality.
All that in 60 lines of javascript.
The Character is displayed in WebGL with
<a href="https://github.com/mrdoob/three.js/">three.js</a>
and the augmented reality is handled
by <a href="https://github.com/jeromeetienne/augmentedgesture.js">augmentedgesture.js</a>.
I like how those libraries makes the code so small, and the developement time
so short.</p>

<p>That&#8217;s all folks, have fun :)</p>
]]></content>
  </entry>
  
</feed>
