<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorial3dgame | Learning Three.js]]></title>
  <link href="http://learningthreejs.com/blog/categories/tutorial3dgame/atom.xml" rel="self"/>
  <link href="http://learningthreejs.com/"/>
  <updated>2015-08-17T13:19:40+01:00</updated>
  <id>http://learningthreejs.com/</id>
  <author>
    <name><![CDATA[Jerome Etienne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Letâ€™s Make a 3D Game: Virtual Joystick]]></title>
    <link href="http://learningthreejs.com/blog/2011/12/26/let-s-make-a-3d-game-virtual-joystick/"/>
    <updated>2011-12-26T12:21:00+00:00</updated>
    <id>http://learningthreejs.com/blog/2011/12/26/let-s-make-a-3d-game-virtual-joystick</id>
    <content type="html"><![CDATA[<p>Here is another article of the "Let's Make a 3D Game"
<a href="/blog/categories/tutorial3dgame/">series</a>.
We have already seen how to handle other inputs like
<a href="/blog/2011/09/12/lets-Make-a-3D-game-keyboard/">keyboard</a>
and
<a href="/blog/2011/09/20/lets-make-a-3D-game-device-orientation/">device orientation</a>.
This post is about <a href="https://github.com/jeromeetienne/virtualjoystick.js">virtualjoystick.js</a>
It <strong>virtual joystick</strong>, another input you can use for your games.
A virtual joystick emulates a joystick behaviour on a touch screen.
<a href="https://github.com/jeromeetienne/virtualjoystick.js">virtualjoystick.js</a>
has been coded in a effort to port
<a href="http://marblesoccer.com">marblesoccer</a>
to mobile device.
Show, dont tell,
<a href="http://jeromeetienne.github.com/virtualjoystick.js/">Try it out</a>.</p>

<p>This
<a href="http://jeromeetienne.github.com/virtualjoystick.js/">demo</a>
works with mouse events too thus, it is easier to test/debug.
<a href="https://github.com/jeromeetienne/virtualjoystick.js">virtualjoystick.js</a>
has been widely inpired by
<a href="http://sebleedelisle.com/2011/04/multi-touch-game-controller-in-javascripthtml5-for-ipad/">this post</a>
by
<a href="http://sebleedelisle.com/">Seb Lee-Delisle</a>.
The screencast below is short introduction about
<a href="https://github.com/jeromeetienne/virtualjoystick.js">virtualjoystick.js</a></p>

<!-- more -->




<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/viyr_W0z1U8?hl=en&fs=1" frameborder="0" allowfullscreen></iframe>
</center>


<h2>Let's Get Started</h2>

<p>First step, you download
<a href="https://raw.github.com/jeromeetienne/virtualjoystick.js/master/virtualjoystick.js">virtualjoystick.js</a>
from its
<a href="https://github.com/jeromeetienne/virtualjoystick.js">github</a>
Then include it in your own code.</p>

<p>```html</p>

<pre><code>&lt;script src="virtualjoystick.js"&gt;&lt;/script&gt;
</code></pre>

<p>```</p>

<p>The joystick is composed of 2 parts: the <em>base</em> and the <em>stick</em>.
First the plare touch the screen, it gives the position of the <em>base</em>.
Then it drags its fingers to gives the position of the <em>stick</em></p>

<h2>Let's Use it</h2>

<iframe src="http://jeromeetienne.github.com/virtualjoystick.js/"
    webkitallowfullscreen mozallowfullscreen allowfullscreen 
    width="420" height="315" frameborder="0" style="float: right; margin-left: 1em;">
</iframe>


<p>First step is to create the object from <code>VirtualJoystick</code> class.</p>

<p>```javascript</p>

<pre><code>var joystick = new VirtualJoystick()
</code></pre>

<p>```</p>

<p>The constructor has some options.
They have sensible default.
You can change them to fit your specific needs.
See
<a href="https://github.com/jeromeetienne/virtualjoystick.js#readme">github README</a>
for a full API description.
You may look at the <a href="https://github.com/jeromeetienne/virtualjoystick.js/blob/master/index.html">index.html</a>.
It is an example which uses the library.</p>

<p>It is possible to read
<a href="http://en.wikipedia.org/wiki/Analog_stick">analogic</a>
coordinates.
 <code>joystick.deltaX()</code> gives the <em>delta x</em> between the base and the stick in pixel.
 <code>joystick.deltaY()</code> gives the <em>delta y</em>.
Those analogic coordinates may be interpreted as a
<a href="http://www.slagcoin.com/joystick/restrictors.html">joystick with 4 switches</a>.
Similar to
<a href="http://en.wikipedia.org/wiki/Arrow_keys">arrow keys</a>
in a way.
 <code>joystick.up()</code> tells you if your joystick is up or not.
You guessed the meaning of <code>.down()</code>, <code>.right()</code> and <code>.left()</code>.</p>

<h2>Conclusion</h2>

<p>The source is available on
<a href="https://github.com/jeromeetienne/virtualjoystick.js">github</a>
under MIT license.
Later, a button may be implemented as well.
It is alway usefull to able to fire in video games :)
That's all folks, have fun.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lets Make a 3D Game: Make It Embedded]]></title>
    <link href="http://learningthreejs.com/blog/2011/11/21/lets-make-a-3d-game-make-it-embedded/"/>
    <updated>2011-11-21T16:32:00+00:00</updated>
    <id>http://learningthreejs.com/blog/2011/11/21/lets-make-a-3d-game-make-it-embedded</id>
    <content type="html"><![CDATA[<iframe src="http://marblesoccer.com"
    allowfullscreen webkitallowfullscreen mozallowfullscreen
    width="420" height="315" frameborder="0" style="float: right; margin-left: 1em;">
</iframe>


<p>This post is part of the <a href="/blog/categories/tutorial3dgame/">"Let's make a 3D game"</a> series.
The previous post was on
<a href="/blog/2011/11/17/lets-make-a-3d-game-make-it-fullscreen/">fullscreen API</a>.
Here is another one on resizing the display area.
This post is about embedding your game in another page.
It is usefull to include it in a blog, in facebook, iGoogle or other game plateforms.</p>

<p><a href="http://marblesoccer.com">MarbleSoccer</a>
now contains all the tricks explained in this post.
<em>Show dont tell</em>, you can see it embedded on the left.
Embedding your game implies various things.
As your game is hosted in another page, it likely got a smaller display area.
HTML5
<a href="http://www.w3.org/TR/css3-mediaqueries/">CSS media query</a>
makes it easy to fit various sizes.
Another part are the
<a href="http://en.wikipedia.org/wiki/DOM_events">DOM events</a>
from the iframe.
They will be propagated to the host page and may produce undesirable effects.
We see how to shield them.
But first let's see about
<a href="http://en.wikipedia.org/wiki/HTML_element#Frames">iframe</a></p>

<h2>Let's go play in an iframe</h2>

<p><a href="http://en.wikipedia.org/wiki/HTML_element#Frames">iframe</a>
is an easy and secure way to embed a page in another.
Let's declare it.</p>

<p>```html</p>

<pre><code>&lt;iframe src="http://marblesoccer.com"
    allowfullscreen webkitallowfullscreen mozallowfullscreen
    width="480" height="320" frameborder="0"&gt;
&lt;/iframe&gt;
</code></pre>

<p>```</p>

<!-- more -->


<p>The attributes are pretty classics: <code>frameborder</code> to remove an ugly default border,
 <code>width</code> and <code>height</code> for size and <code>src</code> for your game page.
The ones ending with <code>allowfullscreen</code> tell the browser that this iframe is
allowed to go fullscreen. More about fullscreen in this
<a href="/blog/2011/11/17/lets-make-a-3d-game-make-it-fullscreen/">previous post</a>
or in the <a href="http://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html">spec</a>.</p>

<p>You may need to determined if your game is embedded or not.
Use this line will tell if it is in a iframe or not.</p>

<p>```javascript</p>

<pre><code>var isInIframe  = (window != window.top);
</code></pre>

<p>```</p>

<h2>Fit in a smaller display area</h2>

<p>When your game is embedded, it is likely to have a smaller display area.
How to deal with this ?
First, we have 2 types of rendering in our game:
a 3D display where
<a href="https://github.com/mrdoob/three.js/">three.js</a>
displays the
<a href="http://en.wikipedia.org/wiki/WebGL">WebGL</a>, and
a DOM display for
<a href="http://en.wikipedia.org/wiki/On-screen_display">OSD</a>
such as score, timers and other popups.</p>

<p>For <em>3D rendering</em>, we have already seen window resizing in
<a href="/blog/2011/08/30/window-resize-for-your-demos/">this post</a>.
Just download
<a href="/data/THREEx/THREEx.WindowResize.js">THREEx.WindowResize</a>
and add this line and you are done. Not too hard, hey.</p>

<p>```javascript</p>

<pre><code>THREEx.WindowResize(renderer, camera);
</code></pre>

<p>```</p>

<p>Now <em>the DOM display</em>. It may simply be done via CSS
and
<a href="http://www.w3.org/TR/css3-mediaqueries/">media queries</a>.
Typically, you may reduce the size of your font or icons.
I won't try to teach css, other do that much
<a href="https://developer.mozilla.org/en/CSS/Media_queries">better</a>
<a href="http://www.html5rocks.com/en/mobile/mobifying.html#toc-mediaqueries">than</a>
<a href="http://thinkvitamin.com/code/media-queries-width-and-height-video-tutorial/">me</a>.
Just a pick of what i did, not sure at all it is the best way.
I reduce the OSD display if your game page is 640px or less.</p>

<p>```css</p>

<pre><code>@media all and (max-width: 640px) {
    /* here put your style specific for embedded case */
    body { font-size : 60%; }
    img { width : 48px; }
}
</code></pre>

<p>```</p>

<h2>Shield Events</h2>

<p>Strange section title, hey.
It means <em>prevents DOM events from the iframe to interfere with the host page</em>.
Not much clearer...
Maybe with an example ? Let's see the arrows+scroll case.
Show dont tell.
Below are 2 iframes: on the left, no shielding happens, on the right shielding happens.
Try to click on them and use arrows up/down.</p>

<iframe src="http://learningthreejs.com/data/THREEx/examples/threex.embedded/noshield-iframe.html" width='50%' height='120px'></iframe>


<iframe src="http://learningthreejs.com/data/THREEx/examples/threex.embedded/withshield-iframe.html" width='49%' height='120px'></iframe>


<p>On the left, the host page scrolls, but not on the right.
Why does this happen ? good question :)
If our game iframe got the focus and users press up or down, the iframe will received
<a href="http://www.quirksmode.org/dom/events/keys.html">keydown/keyup events</a>.
Up to now, all is ok...
Troubles appear when those events are bubbling to the host page, they may trigger a scrolling.</p>

<p>Imagine the page going up and down while you play, the game becomes unplayable very fast :)
So here is the code which prevents this behavior. It listens to arrows
<a href="http://www.quirksmode.org/dom/events/keys.html">keydown events</a>.
and prevent their default.</p>

<p>```javascript</p>

<pre><code>document.addEventListener('keydown', function(event){
    // if it is keydown on a arrow, prevent default
    if( event.keyCode &gt;= 37 &amp;&amp; event.keyCode &lt;= 40 ){
        event.preventDefault();
    }
}, true);
</code></pre>

<p>```</p>

<h2>Conclusion</h2>

<p>I gathered the code in
<a href="/data/THREEx/threex.embedded.js">threex.embedded</a>,
see its
<a href="/data/THREEx/docs/threex.embedded.html">annoted source</a>.
Iframe is a easy and secure way to make your game embeddable.
We have seen how to handle smaller display area
with
<a href="/data/THREEx/THREEx.WindowResize.js">THREEx.WindowResize</a>
and
<a href="http://www.w3.org/TR/css3-mediaqueries/">media queries</a>.
Additionnaly we even shield DOM events, so we can use arrow keys for player control.
You are all set! Go embed your game now :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lets Make a 3D Game: Make It Fullscreen]]></title>
    <link href="http://learningthreejs.com/blog/2011/11/17/lets-make-a-3d-game-make-it-fullscreen/"/>
    <updated>2011-11-17T07:59:00+00:00</updated>
    <id>http://learningthreejs.com/blog/2011/11/17/lets-make-a-3d-game-make-it-fullscreen</id>
    <content type="html"><![CDATA[<p>This post is part of the <a href="/blog/categories/tutorial3dgame/">"Lets make a 3D game"</a> series.
It is about the <a href="http://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html">fullscreen API</a>.
This API allows to make DOM elements fullscreen.
Fullscreen is quite important for games.
It provides a larger display so a more immersive experience for your players.
All that from javascript, so no more needed to ask "please f11" to your
players, isnt that sweet ? :)</p>

<p><img class="right" src="/data/lets-make-a-3d-game-make-it-fullscreen/images/fullscreen-icon.png"></p>

<p>The <a href="http://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html">fullscreen API</a>
is still in discussion, but the basics are settled. At the time of this writing,
it is available in
<a href="http://blog.pearce.org.nz/2011/11/firefoxs-html-full-screen-api-enabled.html">firefox nightly</a>,
<a href="http://peter.sh/2011/01/javascript-full-screen-api-navigation-timing-and-repeating-css-gradients/">webkit nightly</a>and
<a href="http://updates.html5rocks.com/2011/10/Let-Your-Content-Do-the-Talking-Fullscreen-API">chrome stable</a>.
It has been already added in <a href="http://marblesoccer.com">marbleSoccer</a>.
The icon is from <a href="http://thenounproject.com/">The Noun Project</a>, a source of nice and clean icons.
Try it out! Click on it to toggle fullscreen state. If you dont see the icon, your browser
doesn't yet have the fullscreen API.</p>

<center>
    <iframe webkitallowfullscreen mozallowfullscreen allowfullscreen width="100%" height="320" src="http://marblesoccer.com" frameborder="0"></iframe>
</center>


<p>Ok now is time for code :)</p>

<h2>Let's get started</h2>

<p>As usual, i provide a little helper to make it easier for you to include it in
your games. It is called <a href="/data/THREEx/THREEx.FullScreen.js">THREEx.FullScreen.js</a>.
It hides the prefix of each vendor and the little discrepencies between their API
implementation.
You download this file from <a href="/data/THREEx/THREEx.FullScreen.js">here</a> and include
it in your page like this</p>

<p>```html</p>

<pre><code>&lt;script src='THREEx.FullScreen.js'&gt;&lt;/script&gt;
</code></pre>

<p>```</p>

<!-- more -->


<h2>How to use it ?</h2>

<p>The API is simple, only 4 calls. Lets see them one by one.
To test if it is possible to have fullscreen on your system, do</p>

<p>```javascript</p>

<pre><code>THREEx.FullScreen.available();
</code></pre>

<p>```</p>

<p>To test if fullscreen is currently activated on your page</p>

<p>```javascript</p>

<pre><code>THREEx.FullScreen.activated();
</code></pre>

<p>```</p>

<p>To Request fullscreen on a given element, just do</p>

<p>```javascript</p>

<pre><code>THREEx.FullScreen.request(element);
</code></pre>

<p>```</p>

<p>If element isnt provided, it defaults to <code>document.body</code>.
To cancel fullscreen on your page, use this line.</p>

<p>```javascript</p>

<pre><code>THREEx.FullScreen.cancel();
</code></pre>

<p>```</p>

<p>Quite straight forward, no ? :) As an example, let's make a toggle, the same used
in <a href="http://marblesoccer.com">marbleSoccer</a>.</p>

<p>```javascript</p>

<pre><code>if( THREEx.FullScreen.activated() ){
    THREEx.FullScreen.cancel();
}else{
    THREEx.FullScreen.request();
}
</code></pre>

<p>```</p>

<h2>What about the standard ?</h2>

<p>There is a <a href="http://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html">w3c proposal</a> in dicussion.
John dyer has written an in-depth <a href="http://johndyer.name/native-fullscreen-javascript-api-plus-jquery-plugin/">summary</a>.
Mozilla provides details on <a href="https://wiki.mozilla.org/Gecko:FullScreenAPI">their API</a>.
At the time of this writing
It is available in
<a href="http://blog.pearce.org.nz/2011/11/firefoxs-html-full-screen-api-enabled.html">firefox nightly</a>,
<a href="http://peter.sh/2011/01/javascript-full-screen-api-navigation-timing-and-repeating-css-gradients/">webkit nightly</a>
and
<a href="http://updates.html5rocks.com/2011/10/Let-Your-Content-Do-the-Talking-Fullscreen-API">chrome stable</a>.</p>

<h2>Conclusion</h2>

<p>For more details on <a href="/data/THREEx/THREEx.FullScreen.js">THREEx.FullScreen</a>,
see its <a href="/data/THREEx/docs/THREEx.FullScreen.html">annoted source</a>.
It is a simple to add in your game.
It provides a more immersive experience to your players.
On a related subject, we will soon likely do a post about embedding your game in another page.
It is usefull when you want to include it in a blog, in facebook or other game plateforms.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lets Make a 3D Game: microphysics.js, even easier]]></title>
    <link href="http://learningthreejs.com/blog/2011/11/02/lets-make-a-3d-game-helper-for-microphysics-js/"/>
    <updated>2011-11-02T18:16:00+00:00</updated>
    <id>http://learningthreejs.com/blog/2011/11/02/lets-make-a-3d-game-helper-for-microphysics-js</id>
    <content type="html"><![CDATA[<p>This post is part of the <a href="/blog/categories/tutorial3dgame/">"Lets make a 3D game"</a> series.
It is a follow up from the previous article on <a href="/blog/2011/10/17/lets-make-a-3d-game-microphysics-js/">microphysics.js</a>.
It will describe how to easily include <strong>microphysics.js</strong> in your three.js games.
<a href="https://raw.github.com/jeromeetienne/microphysics.js/master/THREEx.microphysics.js">THREEx.microphysics.js</a> is a THREEx wrapper for microphysics.js.
It helps binding <a href="https://github.com/mrdoob/three.js/">three.js</a> objects to <a href="/blog/2011/10/17/lets-make-a-3d-game-microphysics-js/">microphysics.js</a>.
The API is chained for convenience.</p>

<h2>Let's get started</h2>

<p>So lets see how to use it.
First step, you download it
<a href="https://raw.github.com/jeromeetienne/microphysics.js/master/THREEx.microphysics.js">here</a>.
Then include it in your own code with this line.</p>

<p>```html</p>

<pre><code>&lt;script src="THREEx.microphysics.js"&gt;&lt;/script&gt;
</code></pre>

<p>```</p>

<!-- more -->


<h2>Initialisation</h2>

<p>You instanciate the physics engine, like that.</p>

<p>```javascript</p>

<pre><code>var microphysics = new THREEx.Microphysics(opts);
</code></pre>

<p>```</p>

<p> <code>opts</code> is optional.
 <code>opts.timeStep</code> controls the frequency of the world update.
The smaller it is the more accurate is the physics but the longer it is to compute.
It defaults to <code>1/60</code>. Once instanciated, you start it.</p>

<p>```javascript</p>

<pre><code>microphysics.start();
</code></pre>

<p>```</p>

<h2>Binding THREE.Mesh</h2>

<p>Of course we need to add some mesh in the world. After this line, the <code>mesh</code>
is bound to microphysics.js, so its position is driven by the physics.</p>

<p>```javascript</p>

<pre><code>microphysics.bindMesh(mesh, opts);
</code></pre>

<p>```</p>

<p> <code>mesh.position</code> is honored.
If you need to unbind a <code>mesh</code>, just do</p>

<p>```javascript</p>

<pre><code>microphysics.unbindMesh(mesh);
</code></pre>

<p>```</p>

<p>At the time of this writing, microphysics.js support only moving sphere and static
boxes, so geometry may only be <code>THREE.SphereGeometry</code> or <code>THREE.CubeGeometry</code>.
If your mesh got another geometry, use <code>opts.geometry</code> to say how you wish the mesh
to be handled.</p>

<p>```javascript</p>

<pre><code>microphysics.bindMesh(mesh, {
     geometry   : new THREE.CubeGeometry(200,200,200);
});
</code></pre>

<p>```</p>

<p>It is also possible to overwrite <code>Mesh.position</code> with <code>opts.position</code>, or
to send options directly to microphysics.js with <code>opts.physics</code>.</p>

<p>```javascript</p>

<pre><code>microphysics.bindMesh(mesh, {
    // to overwrite the Mesh.position
    position    : { x : 1, y : 1, z : 2 },
    // to pass options directly to microphysics.js
    physics     : { restitution : 0.98 }
});
</code></pre>

<p>```</p>

<h2>Updating the physics</h2>

<p>In your render loop, just add this line. It will first update the physics world and
then move accordingly any <code>THREE.Mesh</code> you bound.</p>

<p>```javascript</p>

<pre><code>microphysics.update();  
</code></pre>

<p>```</p>

<h2>Needs a Direct Access ?</h2>

<p>If you need to have direct access to microphysics.js, uses
 <code>microphysics.body(mesh)</code> to get the <code>vphy.Body</code> bound to <code>mesh</code>.
To access <code>vphy.World</code>, just use <code>microphysics.word()</code>.</p>

<h2>Conclusion</h2>

<p>In the previous article on <a href="/blog/2011/10/17/lets-make-a-3d-game-microphysics-js/">microphysics.js</a>,
we learned how to use microphysics.js directly. This article makes it really easy to include
in your <a href="https://github.com/mrdoob/three.js/">three.js</a> demo/game.
It is so nice that it is what is used in the
<a href="http://jeromeetienne.github.com/microphysics.js/playground/">playground</a>.
That's all for today folks. Have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lets Make a 3D Game: microphysics.js]]></title>
    <link href="http://learningthreejs.com/blog/2011/10/17/lets-make-a-3d-game-microphysics-js/"/>
    <updated>2011-10-17T12:36:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2011/10/17/lets-make-a-3d-game-microphysics-js</id>
    <content type="html"><![CDATA[<p>This post is part of the <a href="/blog/categories/tutorial3dgame/">"Lets make a 3D game"</a> series.
3D and physics simulation always go well together
<a href="http://www.youtube.com/watch?v=Rd7TyU9RdQk">even</a>
<a href="http://www.youtube.com/watch?v=o_xr8Htj9GI">more</a>
<a href="http://www.youtube.com/watch?v=Xfrzi-yVcsM">so</a>
<a href="http://www.youtube.com/watch?v=uvCbc8vFUMo">with</a>
<a href="http://www.youtube.com/watch?v=7lBUBBW_sF0">marble</a>
<a href="http://www.youtube.com/watch?v=c7npJ3E-ydA">games</a>.
One is required for <a href="http://marblesoccer.com">marblesoccer</a> but i wasnt
convinced by current 3d physics engines. I explain why at the end.
Fortunatly, <a href="http://twitter.com/#!/pyalot">@pyalot</a> from <a href="http://codeflow.org/">codeflow.org</a>
has been kind enough to write one taylor-made for us: <strong>microphysics.js</strong>!!</p>

<p>It is bite-sized, elegant and efficient.
Less than 500 lines at the moment!!
It is small engouh to be understood, important feature for a tutorial blog.
It is a work in progress tho.
We aren't aware of any bugs.
New features will be added and the API is expected to move.
Currently it implements moving spheres and static boxes (or <a href="http://en.wikipedia.org/wiki/Axis-aligned_bounding_box">AABB</a> as we like to say).
This is all we need for <a href="http://marblesoccer.com">marblesoccer</a>, the good thing about tailor-made.
<em>We are in business!!!</em></p>

<p>Below is a screencast of me doing a short introduction of the
<a href="http://jeromeetienne.github.com/microphysics.js/playground/">playground</a>.
This just a page for you to experiment with microphysics.js.</p>

<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/DI5PV2_sLoM" frameborder="0" allowfullscreen></iframe>
</center>


<h2>Let's get started</h2>

<p>So lets see how to use it.
First step, you download it <a href="https://raw.github.com/jeromeetienne/microphysics.js/master/codeflow/physics.js">here</a>.
Then include it in your own code with this line.</p>

<p>```html</p>

<pre><code>&lt;script src="physics.js"&gt;&lt;/script&gt;
</code></pre>

<p>```</p>

<!-- more -->


<h2>Let's Create a World</h2>

<p><img class="right" src="/data/lets-make-a-3d-game-microphysics-js/images/galactus.png"></p>

<p>Quite a title hey ?
Dont you feel like <a href="http://en.wikipedia.org/wiki/Galactus">galactus</a> when you say it ?
First you instanciate the physics <code>world</code> like this.</p>

<p>```javascript</p>

<pre><code>var world = new vphy.World()
</code></pre>

<p>```</p>

<p>Now you start it. Dont forget to give it the date as you see it.</p>

<p>```javascript</p>

<pre><code>world.start(Date.now()/1000);
</code></pre>

<p>```</p>

<p>The <code>world</code> is now fully initialized.
You just have to periodically update it in your game/render loop.</p>

<p>```javascript</p>

<pre><code>var timeStep    = 1/180;
world.step(timeStep, Date.now()/1000);
</code></pre>

<p>```</p>

<p>The <code>timeStep</code> parameter is the precision of the physics engine, expressed in seconds.
Quite a subtle tradeoff.
The smaller it is, the more accurate is the physics, but the slower it is to compute.
Up to you to find the balance that fit your needs.</p>

<h2>Let's Add Bodies</h2>

<p><img class="left" src="/data/lets-make-a-3d-game-microphysics-js/images/The_shining_heres_johnny.jpg"></p>

<p>Don't worry, this is not about killing people and dispose of their dead bodies :)
In physics, A <a href="http://en.wikipedia.org/wiki/Rigid_body">body</a> is a solid object that you put in your world.
microphysics bodies can be spheres or static boxes.
Lets start right away by creating a sphere.</p>

<p>```javascript</p>

<pre><code>var sphere  = new vphy.Sphere({
    x : 10,
    y : 10,
    z : 10,
    restitution : 0.6,
    radius : 5,
});
</code></pre>

<p>```</p>

<p>This will position it at <code>(10,10,10)</code> in the world.
<a href="http://en.wikipedia.org/wiki/Coefficient_of_restitution">restitution</a> will determine how
bouncy is this during a collision.
A bouncing ball restitutes a lot.
A falling eggs restitutes less :)
This declaration seems quite verbose at first.
Don't worry those parameters got sensible defaults, no need to specify them all.</p>

<p>Now lets add it to our world</p>

<p>```javascript</p>

<pre><code>world.add(sphere);
</code></pre>

<p>```</p>

<p>If you need to remove it, just do <code>world.remove(sphere)</code>. Not too hard hey ?
Now lets create a static box.
Boxes are called <em>AABB</em>.
It stands for <a href="http://en.wikipedia.org/wiki/Axis-aligned_bounding_box">Axis-aligned bounding box</a>.
It is graphic jarguon for the smallest box containing your object.
 <code>vphy.Sphere</code>and <code>vphy.AABB</code> both derived from <code>vphy.Body</code>.
 <code>x, y, z, resitution</code> are <code>vphy.Body</code> parameters, common to both.
So we wont review them again.</p>

<p>```javascript</p>

<pre><code>var body = new vphy.AABB({
    width : 1,
    height: 1,
    depth : 1
});
</code></pre>

<p>```</p>

<p> <code>width</code>, <code>height</code> and <code>depth</code> gives the dimensions of the box.
After <code>world.step()</code>, you can read the new position of each body. Quite usefull
to push back the resulting physics in your 3D scene :)</p>

<p>```javascript</p>

<pre><code>var pos = body.getPosition();   // x = pos[0], y = pos[1], z = pos[2]
</code></pre>

<p>```</p>

<p>Ok, so we got a <code>world</code> with solid objects in it, all bound to <a href="http://en.wikipedia.org/wiki/Physical_law">physical law</a>.
Now what about moving them ?</p>

<h2>Let's move our Bodies</h2>

<p><img class="right" src="/data/lets-make-a-3d-game-microphysics-js/images/aerobic-small.jpg"></p>

<p>Lets make our sphere moves.
The bodies you added to the world will move according to the <a href="http://en.wikipedia.org/wiki/Force">forces</a> applied on them.
All that according to
<a href="http://en.wikipedia.org/wiki/Newton%27s_laws_of_motion">laws of motion</a>
from <a href="http://en.wikipedia.org/wiki/Isaac_Newton">Newton</a>.
He discovered that by receiving an <a href="http://en.wikipedia.org/wiki/Isaac_Newton#Apple_analogy">apple on the head</a>,
creativity can take strange paths sometime :)</p>

<p>Ok let's add <a href="http://en.wikipedia.org/wiki/Gravity_of_Earth">gravity</a>, the force which moved this falling apple.
This force is applied along a given direction to all our objects.
The library already contains an helper just for that. Simply do</p>

<p>```javascript</p>

<pre><code>world.add(new vphy.LinearAccelerator({
    x   :  0, 
    y   : -9.8,
    z   :  0
}));
</code></pre>

<p>```</p>

<p>Quite easy, no? Now lets see a custom accelerator, for example a player moving
according to the keyboard. The player will be a <code>vphy.Sphere</code> and we will
reuse the <a href="http://learningthreejs.com/data/THREEx/THREEx.KeyboardState.js">keyboard helper</a> we
did in this <a href="http://learningthreejs.com/blog/2011/09/12/lets-Make-a-3D-game-keyboard/">post</a>.</p>

<p>```javascript</p>

<pre><code>var player  = new vphy.Sphere({ radius : 20 });
world.add({
    type: vphy.types.ACCELERATOR,   // let the lib know it is an accelerator
    perform: function(bodies){      // bodies is the array of all vphy.Body
        if( keyboard.pressed('right') ) player.accelerate(1,0,0);
        if( keyboard.pressed('left') )  player.accelerate(-1,0,0);
        if( keyboard.pressed('up') )    player.accelerate(0,0,1);
        if( keyboard.pressed('down') )  player.accelerate(0,0,-1);
    }
});
</code></pre>

<p>```</p>

<p> <code>.perform()</code> will be called at every world step.
It accesses <code>player</code> via
<a href="https://developer.mozilla.org/en/JavaScript/Guide/Closures">closure</a>
, read current keyboard state and accelerate in the proper direction.</p>

<h2>Motivation</h2>

<p>The need for 3D physics is clear for <a href="http://marblesoccer.com">marblesoccer</a>.
Marble in physics are fun, generic and instinctive for the player.
Ok so how to get a 3D physics engine ?</p>

<ul>
<li><strong>Do it yourself ? </strong>
Well no, it is hard, long and im lazy :)</li>
<li><strong>Use an existing one ? </strong>
i tried some and left unimpressed. All those are new experimental stuff.
Documentation is inexistant.
They are issued from existing libraries in other languages and convert them to js, sometime multiple conversions in a row.
I experienced major bugs when i tried. Were those bugs ? Was it me misusing it ?
Quite possible as the doc is inexistant.
All in all, i didnt feel it would be a reliable dependancy for our game.</li>
<li><strong>Used a 2D one, like Box2D ? </strong>
Box2D is kind of special.
<a href="http://blog.sethladd.com/">Seth Ladd</a> recently did
<a href="http://blog.sethladd.com/2011/09/box2d-collision-damage-for-javascript.html">a</a>
<a href="http://blog.sethladd.com/2011/09/box2d-impulse-and-javascript.html">lot</a>
<a href="http://blog.sethladd.com/2011/09/box2d-with-complex-and-concave-objects.html">of</a>
<a href="http://blog.sethladd.com/2011/09/box2d-and-polygons-for-javascript.html">good</a>
<a href="http://blog.sethladd.com/2011/09/box2d-web-workers-better-performance.html">things</a>
to explain box2D. Ok, box2D is a converted one but it is of very good quality.
So why not using box2D ?
Well because it is 2D and we do 3D.
Quite an insight, hey :)
It would be such a tough limitation.
This webgl + box2D strategy can produce excelent results tho, like this
<a href="http://game.2x.io/">game demo</a> from <a href="http://twitter.com/#!/einaros">@einaros</a>.
Take a close look at the physics when object move, it is amazingly
realistic and it is all box2D.</li>
<li><strong>Ask somebody else to do it ? </strong>
We got a <em>winner!</em> <a href="http://twitter.com/#!/pyalot">@pyalot</a> from <a href="http://codeflow.org/">codeflow.org</a></li>
</ul>


<h2>Credits</h2>

<p>All images are from <a href="http://en.wikipedia.org">wikipedia</a>. All hard work is from <a href="http://twitter.com/#!/pyalot">@pyalot</a></p>

<h2>Conclusion</h2>

<p>This is the first post about physics.
It presented microphysics.js API.
Thus you can start playing with it immediatly.
More posts will come shortly.
At least, one about performance and another one on how to easily bind microphysics to your three.js game.
That's all folks.
Have fun with microphysics.js :)</p>
]]></content>
  </entry>
  
</feed>
