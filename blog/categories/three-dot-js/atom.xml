<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: three.js | Learning Three.js]]></title>
  <link href="http://learningthreejs.com/blog/categories/three-dot-js/atom.xml" rel="self"/>
  <link href="http://learningthreejs.com/"/>
  <updated>2014-02-10T13:25:53+01:00</updated>
  <id>http://learningthreejs.com/</id>
  <author>
    <name><![CDATA[Jerome Etienne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Have You Seen YourSelf when You Are Drunk ? - making of a fun WebGL Demo]]></title>
    <link href="http://learningthreejs.com/blog/2014/02/08/have-you-seen-yourself-when-you-are-drunk/"/>
    <updated>2014-02-08T12:49:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/02/08/have-you-seen-yourself-when-you-are-drunk</id>
    <content type="html"><![CDATA[<p>This post is about a demo called <a href="https://github.com/jeromeetienne/demo.seenyourselfdrunk">"Have you seen yourself When you are Drunk ?"</a>. What is it all about ?
Well have you seen yourself when you are drunk ?</p>

<p><img class="right" src="/data/2014-02-08-have-you-seen-yourself-when-you-are-drunk/images/angryBoss.jpg" width="250" height="250"></p>

<p>You don't look at your best, but you don't remember the morning after, lucky you. So now you are sober, this demo will show you how you look when you are drunk…
Hopefully this will make you realize that <em>alcohol abuse is a bad thing</em>! And that we could
<em>save the world by stopping it</em>!</p>

<p><a href='http://jeromeetienne.github.io/demo.seenyourselfdrunk/' target='_blank'><input type="button" value='Try Demo Now' style='font-size:400%;' /></a></p>

<p>Or it will just show some cool webgl effects… Honnestly i wasnt that sure of its exact purpose. Well, up to you to pick :)
In other words, this is a webgl demo which reads your webcam, to show yourself on screen, then it does some screen deformations to give you an idea of what you look like when you are drunk.</p>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/yl2Qd9T3Lq4" frameborder="0" allowfullscreen></iframe>


<p>We will learn how to code that. So first the tools of the trade…</p>

<!-- more -->


<h2>Used Tools</h2>

<p>This demo is done with 2 threex extensions
<a href="https://github.com/jeromeetienne/threex.toxicpproc">threex.toxicpproc</a>
,
<a href="https://github.com/jeromeetienne/threex.videotexture">threex.videotexture</a>
and our lovely
<a href="http://threejs.org">three.js</a> obviously.
<a href="https://github.com/jeromeetienne/threex.videotexture">threex.videotexture</a>
is, according to <a href="http://jeromeetienne.github.io/threex/#threex.videotexture">threex page</a> :</p>

<blockquote><p>handles videos in texture. It is possible to put html5 video output in texture, even put the webcam in it, or to connect it to WebAudio API to get localized sounds.</p></blockquote>

<p>We will use it to read the webcam and display it full page.
<a href="https://github.com/jeromeetienne/threex.toxicpproc">threex.toxicpproc</a>
is, according to <a href="http://jeromeetienne.github.io/threex/#threex.toxicpproc">threex page</a> :</p>

<blockquote><p>an intoxicated post-processing effect. You can easily add it in your game to simulate the player is drunk. It provides various levels: sober, drunk, high and wasted.</p></blockquote>

<p>We will use it to deform the video from the webcam and makes you look drunk.</p>

<h2>Webcam For Texture</h2>

<p>So the first thing is to get webcam on fullpage.
For that we use <a href="https://github.com/jeromeetienne/threex.videotexture">threex.videotexture</a>.
It does video textures, either you take this video from a url, like this.</p>

<p>```
// create the videoTexture
var videoUrl    = 'sintel.ogv';
var videoTexture= new THREEx.VideoTexture(videoUrl)
// on every render, update it
onRenderFcts.push(function(delta, now){</p>

<pre><code>    videoTexture.update(delta, now)
</code></pre>

<p>})
```</p>

<p>Or you take the video live from the webcam, like this.</p>

<p>```
// create the webcamTexture
var videoTexture    = new THREEx.WebcamTexture()
// on every render, update it
onRenderFcts.push(function(delta, now){</p>

<pre><code>    videoTexture.update(delta, now)
</code></pre>

<p>})<br/>
```</p>

<p>Then use <code>videoTexture.texture</code> in your materials to
have the texture of the webcam. So let's see how we will
compose our scene.</p>

<h2>Scene Composition</h2>

<p>We need a Plane which take the full page, and we will apply our webcam texture to it.
So first there is an orthographic camera. Perspective is useless in this case, and make computations much more complex :)</p>

<p>```
var camera = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2</p>

<pre><code> ,  window.innerHeight / 2, window.innerHeight / -2, -100, 100);
</code></pre>

<p>```</p>

<p>Then, there is a <code>THREE.PlaneGeometry</code> mesh
using full screen for this camera.</p>

<p><code>
var geometry    = new THREE.PlaneGeometry( window.innerWidth, window.innerHeight )
var material    = new THREE.MeshBasicMaterial();
var mesh    = new THREE.Mesh(geometry, material)
scene.add(mesh)
</code></p>

<p>Then we apply our <code>videoTexture</code> to this material. Thus
we see the webcam on this plan :)</p>

<p><code>
material.map    = videoTexture.texture
</code></p>

<p>So we got our face on full screen, cool for ego i guess :)
Now let's apply some deformation to it!</p>

<h2>Post Processing and Rendering</h2>

<p>Usually to render a scene, we use the following code.
This is when we render the scene directly on screen.</p>

<p><code>
renderer.render( scene, camera )
</code></p>

<p>We will use a post processing chain with <code>THREE.EffectComposer</code>. It process the screen as a 2d texture.
More specifically, we will use <a href="https://github.com/jeromeetienne/threex.toxicpproc">threex.toxicpproc</a>, a three.js extension which provide post processing of drunk effects. It got 4 presets <em>sober</em>, <em>drunk</em>, <em>high</em> and <em>wasted</em>. There is a nice tweening when you switch between presets so transitions looks smooth.
Try it yourself in <a href="http://jeromeetienne.github.io/threex.toxicpproc/examples/basic.html">this demo</a>.</p>

<h3>THREEx.ToxicPproc</h3>

<p>So First lets instanciate a <code>THREEx.ToxicPproc.Passes</code>. It will setup the effect composers passes for our effect. We set it to the <code>drunk</code> preset.</p>

<p>```
var toxicPasses = new THREEx.ToxicPproc.Passes('drunk')
// on every render you update it
onRenderFcts.push(function(delta, now){</p>

<pre><code>toxicPasses.update(delta, now)
</code></pre>

<p>})
```</p>

<p>If you want to create other presets, it is entirely possible. There is even a <a href="https://code.google.com/p/dat-gui/">Dat.GUI</a> provided for you to tweak buttons until it fits your needs. You see it in <a href="http://jeromeetienne.github.io/threex.toxicpproc/examples/basic.html">the demo</a>.
You use it like this.</p>

<p><code>
var datGui  = new dat.GUI()
THREEx.addToxicPasses2DatGui(toxicPasses, datGui)
</code></p>

<h3>THREE.EffectComposer</h3>

<p>Now that we got the toxicpproc passes, let's create the <code>THREE.EffectComposer</code> to run it.</p>

<p><code>
var composer    = new THREE.EffectComposer(renderer);
</code></p>

<p>We render the scene on a texture</p>

<p><code>
var renderPass  = new THREE.RenderPass( scene, camera );
composer.addPass( renderPass );
</code></p>

<p>We send this texture to <code>threex.toxicpproc</code></p>

<p><code>
toxicPasses.addPassesTo(composer)
</code></p>

<p>Now we just have to tell the composer the last pass is the one to be rendered on screen.</p>

<p><code>
composer.passes[composer.passes.length -1 ].renderToScreen  = true;
</code></p>

<h3>Update on each Frame</h3>

<p>We got the rendering to do on each frame. Usually we do</p>

<p><code>
renderer.render( scene, camera )
</code></p>

<p>But here we render thru the effect composer, so we do</p>

<p><code>
// render thru composer
composer.render(delta)
</code></p>

<h2>Conclusion</h2>

<p>Ok so you have learn how to code a demo like
<a href="https://github.com/jeromeetienne/demo.seenyourselfdrunk">"Have you seen yourself When you are Drunk ?"</a>
Pretty Cool!
Now you can get more <a href="http://jeromeetienne.github.io/threex/">threex</a> extensions and
play with it to build your own demos.
This is All for Today Folks, have fun! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Game Workshop: Let's Do a Fighting Spaceship Minigame Together]]></title>
    <link href="http://learningthreejs.com/blog/2014/01/10/flying-spaceship-minigame/"/>
    <updated>2014-01-10T11:05:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/01/10/flying-spaceship-minigame</id>
    <content type="html"><![CDATA[<p>In this post, we are going to present how to do a mini-game called "Flying Spaceships".
We are going to do it together in 40 minutes.
You can read the slides or watch the video to follow along!
Just look at this <a href="/data/2014-01-10-flying-spaceship-minigame/slides/step99.html">demo</a>.
It uses <a href="http://threejs.org">three.js</a> for the 3D,
<a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html">WebAudio API</a>
for the sound and several <a href="http://jeromeetienne.github.io/threex/">threex extensions</a>
for stuff like spaceships and planets.
I love the fact that now we can code mini-games in less than an hour!
All that on the web, and with open source, so cool!</p>

<p><a href='http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/slides/slides/' target='_blank'><input type="button" value='Slides of the talk' style='font-size:400%;' /></a>
<a href='http://www.youtube.com/watch?v=s9pxStYvqrQ' target='_blank'><input type="button" value='Video of the talk' style='font-size:400%;' /></a>
<a href='http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/slides/step99.html' target='_blank'><input type="button" value='the result!' style='font-size:400%;' /></a></p>

<iframe width="425" height="349" src="http://www.youtube.com/embed/EEvEw5n1iEo" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>The Talk</h2>

<p>Here is the promised 40min video. Sit back and relax :)</p>

<iframe width="425" height="349" src="http://www.youtube.com/embed/s9pxStYvqrQ" frameborder="0" allowfullscreen></iframe>


<h2>The Slides</h2>

<p>Here are a screenshot of every slides.
Or you can directly look at the
<a href="/data/2014-01-10-flying-spaceship-minigame/slides/slides/">slides</a>.</p>

<p><img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide00.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide01.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide02.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide03.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide04.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide05.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide06.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide07.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide08.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide09.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide10.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide11.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide12.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide13.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide14.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide15.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide16.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide17.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide18.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide19.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide20.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide21.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide22.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide23.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide24.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide25.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide26.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide27.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide28.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide29.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide30.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide31.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide32.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide33.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide34.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide35.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide36.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide37.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide38.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide39.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide40.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide41.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide42.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide43.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide44.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide45.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide46.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide47.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide48.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide49.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide50.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide51.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide52.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide53.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide54.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide55.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide56.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide57.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide58.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide59.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide60.png" width="100%"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zero To Nyancat in 30 Seconds Flat!]]></title>
    <link href="http://learningthreejs.com/blog/2013/12/31/zero-to-nyancat-in-30-seconds-flat/"/>
    <updated>2013-12-31T11:05:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2013/12/31/zero-to-nyancat-in-30-seconds-flat</id>
    <content type="html"><![CDATA[<p>So, today we are gonna learn how to use Yeoman for
<a href="http://threejs.org">three.js</a>.
We are gonna create a Nyancat in WebGL, starting from nothing in only 30 seconds.
It was a challenge to see how fast we could reach using the yeoman tools.
Here is the
<a href="/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/slides/demo/index.html">demo</a>
 we gonna build in 30 seconds :)
You are gonna see how easy it is through a talk i made at
<a href="http://parisjs.org/">parisjs</a>!
But first... what is yeoman? Well,
<a href="http://yeoman.io">yeoman</a>
is a "Modern Workflow for WebApps".
It is composed of 3 tools:
<a href="http://bower.io">bower</a>, <a href="http://gruntjs.com">grunt</a> and <a href="http://yeoman.io/generators.html">yo</a>.</p>

<p>Let's see how
<a href="http://yeoman.io">yeoman</a>
will help us ease up and speed up the work when we’re doing
<a href="http://threejs.org">three.js</a>.
You can look at the
<a href="www.youtube.com/watch?v=zeR_cpupZcQ">screencast</a>
of me doing the talk, or directly at the
<a href="/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/slides/">slides</a> below.
If you are in a rush, here is the TL;DR executive summary. Have Fun :)</p>

<p><a href='http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/slides/' target='_blank'><input type="button" value='Slides of the talk' style='font-size:400%;' /></a>
<a href='http://www.youtube.com/watch?v=zeR_cpupZcQ' target='_blank'><input type="button" value='Video of the talk' style='font-size:400%;' /></a>
<a href='http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/slides/demo/index.html' target='_blank'><input type="button" value='the result!' style='font-size:400%;' /></a>
<a href='https://www.udemy.com/yeoman-for-threejs/' target='_blank'><input type="button" value='udemy course' style='font-size:400%;' /></a></p>

<p><strong>Update:</strong> I am experimenting with <a href="https://www.udemy.com">udemy</a> and made a course from this post. Check it out <a href="https://www.udemy.com/yeoman-for-threejs/">"Yeoman For Three.js"</a>. More than 30min of video :)</p>

<iframe width="425" height="349" src="http://www.youtube.com/embed/UNuRxyEm6qU" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2><strong>TL;DR;</strong></h2>

<p>To generate the boilerplate, just do</p>

<p>```</p>

<pre><code>yo threejs-boilerplate
</code></pre>

<p>```</p>

<p>To install any <a href="http://jeromeetienne.github.io/threex/">threex extension for three.js</a>,
and
<a href="http://github.com/jeromeetienne/threex.nyancat/">threex.nyancat</a> in particular, do</p>

<p>```</p>

<pre><code>bower install threex.nyancat
</code></pre>

<p>```</p>

<h2>Video Of The Talk</h2>

<iframe width="425" height="349" src="http://www.youtube.com/embed/zeR_cpupZcQ" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>Slides</h2>

<p>Here are a screenshot of every slides.
Or you can directly look at the
<a href="/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/slides/">slides</a>.</p>

<p><img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide01.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide02.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide03.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide04.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide05.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide06.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide07.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide08.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide09.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide10.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide11.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide12.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide13.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide14.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide15.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide16.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide17.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide18.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide19.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide20.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide21.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide22.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide23.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide24.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide25.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide26.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide27.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide28.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide29.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide30.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide31.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide32.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide33.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide34.png" width="100%"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Make The Earth In WebGL?]]></title>
    <link href="http://learningthreejs.com/blog/2013/09/16/how-to-make-the-earth-in-webgl/"/>
    <updated>2013-09-16T10:13:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2013/09/16/how-to-make-the-earth-in-webgl</id>
    <content type="html"><![CDATA[<p>So today we gonna learn how to display the earth in webgl.
That will be a nice introduction to material and textures.
I got the idea while coding
<a href="http://github.com/jeromeetienne/threex.planets/">threex.planets</a>,
a three.js extension to easily display all the planets from the solar system based on
<a href="http://planetpixelemporium.com/planets.html">planetpixelemporium</a>. With this post, you will be able to feel like astronauts conquering the outer space for the day and creating your own galaxy. :)</p>

<iframe width="425" height="349" src="http://www.youtube.com/embed/-3ZCZUgvmo0" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<p>So we want to render the earth with three.js... It is surprisingly easy to code.
We gonna use the textures
from
<a href="http://planetpixelemporium.com/planets.html">planetpixelemporium</a>
and proceed step by step.
But first let me show you the
<a href="/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/index.html">demo we gonna write</a> below.</p>

<iframe width="100%" height="349" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/index.html" frameborder="0" allowfullscreen></iframe>


<p>First the geometry with a sphere, then each texture and their various effects.
We will even add animations to make it more realistic and put it in context with
a star field background.</p>

<h2>Let's Do a Plain Sphere</h2>

<p><img class="right" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/earth-color.png" width="320" height="240"></p>

<p>Well we first create a geometry for the sphere, then
we add a phong material,
create a mesh from them
and add it to the scene.
The first parameter, <code>0.5</code> is the radius.
The second parameter, <code>32</code>, is the segments in width
and
the third, <code>32</code>, is the segments in height.
We make it quite detailed for it to be nicer.
We pick <code>THREE.MeshPhongMaterial</code> to get
<a href="http://en.wikipedia.org/wiki/Phong_shading">phong shading</a>.
It provides <a href="http://en.wikipedia.org/wiki/Specular_reflection">specular reflection</a>
which will be used to get a shiny sea.</p>

<br clear='both'/>


<p><code>javascript
var geometry    = new THREE.SphereGeometry(0.5, 32, 32)
var material    = new THREE.MeshPhongMaterial()
var earthMesh   = new THREE.Mesh(geometry, material)
scene.add(earthMesh)
</code></p>

<p>Cool but rather flat... What about a diffuse texture to add some colors to our sphere.</p>

<h2>Let's Add a Diffuse Texture</h2>

<p><img class="right" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/earth-diffuse.png" width="320" height="240">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/bower_components/threex.planets/images/earthmap1k.jpg" width="410" height="240"></p>

<p>Above you can see the
<a href="http://wiki.splashdamage.com/index.php/Basic_Texture_Overview">diffuse texture</a>
from
<a href="http://planetpixelemporium.com/planets.html">planetpixelemporium</a> to set the main color
of the surface.
When we apply it to a sphere, we get the image on the right.
Here is the code to produce it.</p>

<br clear='both'/>


<p><code>javascript
material.map    = THREE.ImageUtils.loadTexture('images/earthmap1k.jpg')
</code></p>

<p>Hmm rather cool but more relief on the earth would be cool. What about a bump texture now ?</p>

<h2>Let's Add a Bump Texture</h2>

<p><img class="right" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/earth-bump.png" width="320" height="240">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/bower_components/threex.planets/images/earthbump1k.jpg" width="410" height="240"></p>

<p>Above is the bump map we use.
According to <a href="http://en.wikipedia.org/wiki/Bump_mapping">wikipedia definition</a>,
a bump map "perturbates the surface normals of the object
using the perturbed normal during lighting calculations".
Each of its pixels acts as a height on the surface.
See the result on the right.
The mountains appear more clearly thanks to their shadow.</p>

<p><code>javascript
material.bumpMap    = THREE.ImageUtils.loadTexture('images/earthbump1k.jpg')
material.bumpScale  = 0.05
</code></p>

<p>It is possible to change how much the map affects lighting with <code>bumpScale</code> parameter.
Play with it to fit your needs. Now that we change the heights on various parts of the
earth, let's change its shininess with a specular texture.</p>

<h2>Let's Add a Specular Texture</h2>

<p><img class="right" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/earth-specular.png" width="320" height="240">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/bower_components/threex.planets/images/earthspec1k.jpg" width="410" height="240"></p>

<p>Above is the <a href="http://wiki.splashdamage.com/index.php/Specular_Maps">specular map</a> we use.
Each pixel determines the intensity of
<a href="http://en.wikipedia.org/wiki/Specularity">specularity</a>.
In this case, only the sea is specular because water reflects water more than earth.
You can see it on the left with the white halo in the Gulf of Mexico.
You can control the specular color with <code>.specular</code> parameter.</p>

<p><code>javascript
material.specularMap    = THREE.ImageUtils.loadTexture('images/earthspec1k.jpg')
material.specular   = new THREE.Color('grey')
</code></p>

<p>Yeah but all this water, where does it go when it is hot ? It evaporates in the sky
and becomes clouds.</p>

<h2>Let's Add a Cloud Layer</h2>

<p><img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/bower_components/threex.planets/images/earthcloudmap.jpg" width="320" height="240">
<img class="right" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/earth-cloud.png" width="320" height="240">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/bower_components/threex.planets/images/earthcloudmaptrans.jpg" width="360" height="240"></p>

<br clear='both'/>


<p>We build <code>canvasCloud</code> and use it as texture.
It is based on the jpg images you see above:
one for the color and the other for the transparency.
We do that because
<a href="http://en.wikipedia.org/wiki/JPEG">jpg</a>
doesn't handle an alpha channel.
So you need to make the code to build the texture based on those images.</p>

<p>```javascript
var geometry    = new THREE.SphereGeometry(0.51, 32, 32)
var material    = new THREE.MeshPhongMaterial({</p>

<pre><code>map     : new THREE.Texture(canvasCloud),
side        : THREE.DoubleSide,
opacity     : 0.8,
transparent : true,
depthWrite  : false,
</code></pre>

<p>})
var cloudMesh   = new THREE.Mesh(geometry, material)
earthMesh.add(cloudMesh)
```</p>

<p>We attach the cloudMesh to the earthMesh, thus they will move together.
Notice the parameters of the material.
We disable <code>depthWrite</code> and set <code>transparent</code> to warn three.js the
cloud mesh is transparent.
We set <code>side</code> to <code>DoubleSide</code> thus both sides will be visible.
This avoids artefacts to be on the edge of the earth.
Finaly we set <code>opacity</code> to make them more translucide.
The output is quite convincing but rather static. Let's see what we can do about that!</p>

<h2>"And Yet it Moves"</h2>

<p>This is what
<a href="http://en.wikipedia.org/wiki/Galileo_Galilei">Galileo Galilei</a> said
about the earth. This sentence has a
<a href="http://en.wikipedia.org/wiki/And_yet_it_moves">interesting story</a>.
So i am thinking it would be cool to make our earth move too.
In your render loop, you simply do this</p>

<p>```javascript
onRenderFcts.push(function(delta, now){</p>

<pre><code>earthMesh.rotation.y    += 1/32 * delta
</code></pre>

<p>})
```</p>

<p>As a last step, we gonna animate the cloud layer too, to make it more realistic.</p>

<p>```javascript
onRenderFcts.push(function(delta, now){</p>

<pre><code>cloudMesh.rotation.y    += 1/16 * delta
</code></pre>

<p>})
```</p>

<p>Definitely better, but still we feel there is something missing.
What do we see in space ? Stars! duh :)</p>

<h2>Let's Add a Star Field</h2>

<p><img class="right" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/galaxy_starfield.png" width="320" height="240"></p>

<p>We will see how to render the galaxy starfield.
The star field as you see it in the demo is an "environment sphere",
aka it is a large sphere, we are in the center and we see what's inside.
So we ask three.js to show the backside of the faces.
And we use the texture above as diffuse.
The above image is smaller than the actual one so you barely see the stars.</p>

<br clear='both'/>


<p><code>javascript
// create the geometry sphere
var geometry    = new THREE.SphereGeometry(90, 32, 32)
// create the material, using a texture of startfield
var material    = new THREE.MeshBasicMaterial()
material.map    = THREE.ImageUtils.loadTexture('images/galaxy_starfield.png')
material.side   = THREE.BackSide
// create the mesh based on geometry and material
var mesh    = new THREE.Mesh(geometry, material)
</code></p>

<h2>threex.planets - All Solar System's Planets Done For You</h2>

<p>While i was at it, i made
<a href="https://github.com/jeromeetienne/threex.planets/">threex.planets</a>,
a
<a href="http://jeromeetienne.github.io/threex/">threex</a>
extension for
<a href="http://threejs.org">three.js</a>.
It provides all the planets from the solar system to be easily usable in your own demo or games.
It is based on
<a href="http://planetpixelemporium.com/planets.html">planetpixelemporium</a>
textures using the same technics described in this post.
You can see it live
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html">here</a>.
First, the mythical
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Sun">sun</a>,
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Mercury">mercury</a> and
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Venus">venus</a>.</p>

<p><img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-sun.png" width="230" height="172">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-mercury.png" width="230" height="172">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-venus.png" width="230" height="172"></p>

<br clear='both'/>


<p>Now the best known, the
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Earth">earth</a>
with its cloud that we previously detailed in this post, the
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Moon">moon</a>
which isn't
an actual planet but still we could not do without, and
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Mars">mars</a>
with the little green people.</p>

<p><img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-earth.png" width="230" height="172">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-moon.png" width="230" height="172">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-mars.png" width="230" height="172"></p>

<br clear='both'/>


<p>Follow,
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Jupiter">jupiter</a>,
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Saturn">saturn</a> and
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Uranus">uranus</a>.
I love the rings there. I added shadow casting to enhance realism.</p>

<p><img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-jupiter.png" width="230" height="172">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-saturn.png" width="230" height="172">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-uranus.png" width="230" height="172"></p>

<br clear='both'/>


<p>And the last two, the furthest ones,
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Neptune">neptune</a>
and
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Pluto">pluto</a></p>

<p><img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-neptune.png" width="230" height="172">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-pluto.png" width="230" height="172"></p>

<br clear='both'/>


<h2>Conclusion</h2>

<p>In this post, we saw how to make a nice looking earth with animated clouds with a star field in
the background. I think it is a nice result for the amount of work.
I hope it was useful to discuver the various roles of textures.
Now you can use this to make even nicer demos, like
<a href="http://jeromeetienne.github.io/threex.planets/examples/earth.html">this one</a>.
It shows the same Earth, that we just saw how to do, with the moon close to it.
We add shadow casting and a nice atmosphere shader and the result is quite convincing.</p>

<p>That's all for today folks. Have Fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Do A Procedural City In 100 Lines]]></title>
    <link href="http://learningthreejs.com/blog/2013/08/02/how-to-do-a-procedural-city-in-100lines/"/>
    <updated>2013-08-02T12:47:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2013/08/02/how-to-do-a-procedural-city-in-100lines</id>
    <content type="html"><![CDATA[<p>This post explains how to code
<a href="http://www.mrdoob.com/lab/javascript/webgl/city/01/">"city"</a>
, a  demo <a href="https://twitter.com/mrdoob/status/350730133319073792">recently released</a> by
<a href="http://mrdoob.com">@mrdoob</a>.
He built a fully procedural city in 100-lines of javascript.
I found the algorithm very elegant, a simple and efficient solution.
So I made a post explaining it.</p>

<iframe width="425" height="349" src="http://www.youtube.com/embed/huTF047XVvQ" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>A Few Remarks on the Algorithm</h2>

<p>It always helps to get a big picture before going down to the details.
The used algorithm is <a href="http://en.wikipedia.org/wiki/Procedural_generation">fully procedural</a>.
This means the whole city is built dynamically, so no download.
It is quite elegant as well.
The algorithm to generate the city in 3d is less than 100 lines long.
What is this algo in a nutshell?
Every building is a cube, they got random size and position.
Simple enough ?
It may seem far from realism but it is ok.
The illusion is surprisingly convincing if you fly over at low altitude.</p>

<p>From a performance point of view, all buildings are merged into a single geometry,
with a single material.
As a cherry on the cake, we remove the bottom face as it is never seen.
It is very efficient as there is no shader swap and a single draw call.</p>

<p>To improve realism, we simulate ambient occlusion thru a cheap trick
using <code>vertexColor</code>.
In the city, at the street level you got shadow from the other buildings.
So the bottom of the buildings are darker than the top.
We can reproduce this effect with <code>vertexColor</code>.
We take the bottom vertices of the building and make them darker than the top.</p>

<h2>Let's get started</h2>

<p>To explain those 100 lines, we will explain it step by step:
First, we <em>"generate the base geometry for the building"</em>.
Then we use this geometry to know <em>"where to place buildings in the city"</em>.
We use some clever trick <em>"using vertexColor for ambient occlusion"</em>.
Then we <em>"merge all buildings to make a city"</em>, thus the whole city may
be drawn in a single draw call.
At the end we detail the <em>"procedural generation of building’s texture"</em>.</p>

<p>Ok so let's get started!!</p>

<h2>Generate the base Geometry for the building</h2>

<p>We build a base geometry of our building.
It will be reused several time while building the whole city.
So we build a simple CubeGeometry</p>

<p><code>javascript
var geometry = new THREE.CubeGeometry( 1, 1, 1 );
</code></p>

<p>We change the pivot point to be at the bottom of the cube, instead of its center.
So we translate the whole geometry.</p>

<p><code>javascript
geometry.applyMatrix( new THREE.Matrix4().makeTranslation( 0, 0.5, 0 ) );
</code></p>

<p>Then we remove the bottom face.
This is an optimisation.
The bottom face of a building is never seen by the viewer as it is always on the ground.
It is useless and we remove it.</p>

<p><code>javascript
geometry.faces.splice( 3, 1 );
</code></p>

<p>Now we fix the <a href="http://en.wikipedia.org/wiki/UV_mapping">UV mapping</a> for the roof face.
We set them to the single coordinate <code>(0,0)</code>.
So the roof will be the same color as a floor row.
As each face of the building is using a single texture, it can be drawn in a single draw call.
Sweet trick for optimisation.</p>

<p><code>javascript
geometry.faceVertexUvs[0][2][0].set( 0, 0 );
geometry.faceVertexUvs[0][2][1].set( 0, 0 );
geometry.faceVertexUvs[0][2][2].set( 0, 0 );
geometry.faceVertexUvs[0][2][3].set( 0, 0 );
</code></p>

<p>Ok now that we got the geometry of a single building, let's assemble buildings together to make a city!</p>

<h2>Where to place buildings in the city</h2>

<p>Well... to be honest we put them anywhere.
All is random ;)
Obviously, there are collisions but the illusion is nice if you fly at low altitude.
So first, we put the building at random position.</p>

<p><code>javascript
buildingMesh.position.x = Math.floor( Math.random() * 200 - 100 ) * 10;
buildingMesh.position.z = Math.floor( Math.random() * 200 - 100 ) * 10;
</code></p>

<p>Then we put a random rotation in Y.</p>

<p><code>javascript
buildingMesh.rotation.y = Math.random()*Math.PI*2;
</code></p>

<p>Then we change the mesh.scale to change the building size.
First how wide and deep a building can be.</p>

<p><code>javascript
buildingMesh.scale.x  = Math.random()*Math.random()*Math.random()*Math.random() * 50 + 10;
buildingMesh.scale.z  = buildingMesh.scale.x
</code></p>

<p>Then how high it is.</p>

<p><code>javascript
buildingMesh.scale.y  = (Math.random() * Math.random() * Math.random() * buildingMesh.scale.x) * 8 + 8;
</code></p>

<p>What's the deal with all those multiplication of <code>Math.random()</code> ?
Well it is a way to change the statistic distribution of the result
and center it closer to 0. <code>Math.random()</code> is between 0 and 1
and got an average of 0.5. <code>Math.random() * Math.random()</code> is
between 0 and 1 but got an average of 0.25. <code>Math.random() * Math.random() * Math.random()</code>
got an average of 0.125 and so on.
That's it :)
We got the position/rotation/scale of our building all set.
Now let's set its color, and how to use it to simulate shadows.</p>

<h3>Using VertexColor for Ambient Occlusion</h3>

<p><img class="right" src="/data/2013-08-02-how-to-do-a-procedural-city/screenshots/screenshot-building-with-vertexcolor-small.png"></p>

<p>In a city with lots of buildings, the bottom of the building tends to be darker than the top.
This is because the sun light hits the top harder than the bottom, at the bottom you have the shadow of another building.
This is what we call
<a href="http://http.developer.nvidia.com/GPUGems/gpugems_ch17.html">ambient occlusion</a> in graphic programming.
This concept may be implemented in various ways:
for example in screen space with <a href="http://en.wikipedia.org/wiki/Screen_space_ambient_occlusion">screen space ambient occlusion or ssao</a>
or in this
<a href="http://threejs.org/examples/webgl_geometry_minecraft_ao.html">minecraft example from three.js</a></p>

<p><img class="left" src="/data/2013-08-02-how-to-do-a-procedural-city/screenshots/screenshot-building-without-vertexcolor-small.png"></p>

<p>With three.js, it is is possible to assign a color to a vertice.
It will alter the final color of the face.
We gonna use that to simulate shadows at the bottom of building.
First we define the base colors for the part which receives lights, and the ones
which get shadows.</p>

<p><code>javascript
var light = new THREE.Color( 0xffffff )
var shadow  = new THREE.Color( 0x303050 )
</code></p>

<p>Those are constants for each building. Now we need to get a color
for this particular building. We put some randomness for variety.</p>

<p><code>javascript
var value = 1 - Math.random() * Math.random();
var baseColor = new THREE.Color().setRGB( value + Math.random() * 0.1, value, value + Math.random() * 0.1 );
</code></p>

<p>Now we need to assign the .vertexColor every vertex of every face.
If the face is a top face, we use <code>baseColor</code> of the building.
If it is a side face, we use <code>baseColor</code> multiplied by our <code>light</code>
for the top vertices and <code>shaddow</code> for the bottom vertices,
as cheap ambient occlusion.</p>

<p>```javascript
// set topColor/bottom vertexColors as adjustement of baseColor
var topColor  = baseColor.clone().multiply( light );
var bottomColor = baseColor.clone().multiply( shadow );
// set .vertexColors for each face
var geometry  = buildingMesh.geometry;  <br/>
for ( var j = 0, jl = geometry.faces.length; j &lt; jl; j ++ ) {
  if ( j === 2 ) {</p>

<pre><code>// set face.vertexColors on root face
geometry.faces[ j ].vertexColors = [ baseColor, baseColor, baseColor, baseColor ];
</code></pre>

<p>  } else {</p>

<pre><code>// set face.vertexColors on sides faces
geometry.faces[ j ].vertexColors = [ topColor, bottomColor, bottomColor, topColor ];
</code></pre>

<p>  }
}
```</p>

<p>We got a single building fully setup. Now let's make a city with many buildings.</p>

<h2>Merge all buildings to make a city</h2>

<p>To make our city, we gonna merge 20000 buildings together.
So we gonna loop and apply the above formulas for each building we add.
We have already seen that reducing draw calls is good for performance.
see <a href="/blog/2011/10/05/performance-merging-geometry/">"Performance: Merging Geometry"</a> post.
Here all buildings share the same material, so we gonna merge them all
in a single geometry.</p>

<p>```javascript
var cityGeometry= new THREE.Geometry();
for( var i = 0; i &lt; 20000; i ++ ){
  // set the position/rotation/color the building in the city
  // ...</p>

<p>  // merge it with cityGeometry - very important for performance
  THREE.GeometryUtils.merge( cityGeometry, buildingMesh );
}
```</p>

<p>Now we got a single large geometry for the whole city, let's build
a mesh from it.</p>

<p><code>javascript
// build the mesh
var material  = new THREE.MeshLambertMaterial({
  map           : texture,
  vertexColors  : THREE.VertexColors
});
var mesh = new THREE.Mesh(cityGeometry, material );
</code></p>

<p>This mesh is a whole city.
Rather cool!
Now one last step, let's explain how to make this texture.</p>

<h2>Procedural Generation of Building's Texture</h2>

<p>Here we want to generate the texture for the side of each building.
In a nutshell, it will show the floors for realism and variety.
So it alternates between row of window and row of floor.
Window rows are dark with a small noise to simulate light variations in each room.
Then we upscale texture carefully avoiding filtering.</p>

<p>First you build a canvas. Make it small, 32x64.</p>

<p><code>javascript
var canvas  = document.createElement( 'canvas' );
canvas.width  = 32;
canvas.height = 64;
var context = canvas.getContext( '2d' );
</code></p>

<p>Then you paint it in white</p>

<p><code>javascript
context.fillStyle = '#ffffff';
context.fillRect( 0, 0, 32, 64 );
</code></p>

<p>Now we need to draw on this white surface. We gonna draw floors on it.
one windows row, then a floor row and we loop.
In fact, as the face is already white, we just have to draw the window rows.
To draw the window row, we add some random to simulate lights variations in each windows.</p>

<p>```javascript
for( var y = 2; y &lt; 64; y += 2 ){
  for( var x = 0; x &lt; 32; x += 2 ){</p>

<pre><code>var value = Math.floor( Math.random() * 64 );
context.fillStyle = 'rgb(' + [value, value, value].join( ',' )  + ')';
context.fillRect( x, y, 2, 1 );
</code></pre>

<p>  }
}
```</p>

<p><img class="right" src="/data/2013-08-02-how-to-do-a-procedural-city/screenshots/screenshot-texture-smoothing-small.png"></p>

<p>Now we got the texture... just it is super small, 32, 64
We need to increase its resolution. But lets be careful.
By default when you increase the resolution, you get a smoothed result, so it may easily appears blurry.
See on the right side, it doesn't look good...
To avoid this artefact, we disable <code>.imageSmoothedEnabled</code> on each plateform.
You can see the result on the left.
The blurry effect is no more.
It is as sharp as the original but with a better resolution.
Ok now lets code exactly that. First we create the large canvas of 1024 by 512.</p>

<p><code>javascript
var canvas2 = document.createElement( 'canvas' );
canvas2.width = 512;
canvas2.height  = 1024;
var context = canvas2.getContext( '2d' );
</code></p>

<p>We disable the smoothing</p>

<p><code>javascript
context.imageSmoothingEnabled   = false;
context.webkitImageSmoothingEnabled = false;
context.mozImageSmoothingEnabled  = false;
</code></p>

<p>Now we just have to copy the small canvas into the big one.</p>

<p><code>javascript
context.drawImage( canvas, 0, 0, canvas2.width, canvas2.height );
</code></p>

<p>Then all we need to do is to actually build the <code>THREE.Texture</code>.
We set the anisotropie to a high number to get better result.
see <a href="http://blog.tojicode.com/2012/03/anisotropic-filtering-in-webgl.html">tojiro on anisotropy</a> for detail.</p>

<p><code>javascript
var texture   = new THREE.Texture( generateTexture() );
texture.anisotropy  = renderer.getMaxAnisotropy();
texture.needsUpdate = true;
</code></p>

<p>This was the last step. Now, you know how to do a procedural city
in webgl with three.js. Rather cool!
As a summary here is the whole code put together.</p>

<h2>The Whole Code</h2>

<p>Let's put all that together. Here is the whole code commented.</p>

<p>```javascript
// build the base geometry for each building
var geometry = new THREE.CubeGeometry( 1, 1, 1 );
// translate the geometry to place the pivot point at the bottom instead of the center
geometry.applyMatrix( new THREE.Matrix4().makeTranslation( 0, 0.5, 0 ) );
// get rid of the bottom face - it is never seen
geometry.faces.splice( 3, 1 );
geometry.faceVertexUvs[0].splice( 3, 1 );
// change UVs for the top face
// - it is the roof so it wont use the same texture as the side of the building
// - set the UVs to the single coordinate 0,0. so the roof will be the same color
//   as a floor row.
geometry.faceVertexUvs[0][2][0].set( 0, 0 );
geometry.faceVertexUvs[0][2][1].set( 0, 0 );
geometry.faceVertexUvs[0][2][2].set( 0, 0 );
geometry.faceVertexUvs[0][2][3].set( 0, 0 );
// buildMesh
var buildingMesh= new THREE.Mesh( geometry );</p>

<p>// base colors for vertexColors. light is for vertices at the top, shaddow is for the ones at the bottom
var light   = new THREE.Color( 0xffffff )
var shadow  = new THREE.Color( 0x303050 )</p>

<p>var cityGeometry= new THREE.Geometry();
for( var i = 0; i &lt; 20000; i ++ ){</p>

<pre><code>// put a random position
buildingMesh.position.x = Math.floor( Math.random() * 200 - 100 ) * 10;
buildingMesh.position.z = Math.floor( Math.random() * 200 - 100 ) * 10;
// put a random rotation
buildingMesh.rotation.y = Math.random()*Math.PI*2;
// put a random scale
buildingMesh.scale.x    = Math.random() * Math.random() * Math.random() * Math.random() * 50 + 10;
buildingMesh.scale.y    = (Math.random() * Math.random() * Math.random() * buildingMesh.scale.x) * 8 + 8;
buildingMesh.scale.z    = buildingMesh.scale.x

// establish the base color for the buildingMesh
var value   = 1 - Math.random() * Math.random();
var baseColor   = new THREE.Color().setRGB( value + Math.random() * 0.1, value, value + Math.random() * 0.1 );
// set topColor/bottom vertexColors as adjustement of baseColor
var topColor    = baseColor.clone().multiply( light );
var bottomColor = baseColor.clone().multiply( shadow );
// set .vertexColors for each face
var geometry    = buildingMesh.geometry;        
for ( var j = 0, jl = geometry.faces.length; j &lt; jl; j ++ ) {
    if ( j === 2 ) {
        // set face.vertexColors on root face
        geometry.faces[ j ].vertexColors = [ baseColor, baseColor, baseColor, baseColor ];
    } else {
        // set face.vertexColors on sides faces
        geometry.faces[ j ].vertexColors = [ topColor, bottomColor, bottomColor, topColor ];
    }
}
// merge it with cityGeometry - very important for performance
THREE.GeometryUtils.merge( cityGeometry, buildingMesh );
</code></pre>

<p>}</p>

<p>// generate the texture
var texture     = new THREE.Texture( generateTexture() );
texture.anisotropy  = renderer.getMaxAnisotropy();
texture.needsUpdate = true;</p>

<p>// build the mesh
var material    = new THREE.MeshLambertMaterial({</p>

<pre><code>map     : texture,
vertexColors    : THREE.VertexColors
</code></pre>

<p>});
var cityMesh = new THREE.Mesh(cityGeometry, material );</p>

<p>function generateTexture() {</p>

<pre><code>// build a small canvas 32x64 and paint it in white
var canvas  = document.createElement( 'canvas' );
canvas.width    = 32;
canvas.height   = 64;
var context = canvas.getContext( '2d' );
// plain it in white
context.fillStyle   = '#ffffff';
context.fillRect( 0, 0, 32, 64 );
// draw the window rows - with a small noise to simulate light variations in each room
for( var y = 2; y &lt; 64; y += 2 ){
    for( var x = 0; x &lt; 32; x += 2 ){
        var value   = Math.floor( Math.random() * 64 );
        context.fillStyle = 'rgb(' + [value, value, value].join( ',' )  + ')';
        context.fillRect( x, y, 2, 1 );
    }
}

// build a bigger canvas and copy the small one in it
// This is a trick to upscale the texture without filtering
var canvas2 = document.createElement( 'canvas' );
canvas2.width   = 512;
canvas2.height  = 1024;
var context = canvas2.getContext( '2d' );
// disable smoothing
context.imageSmoothingEnabled       = false;
context.webkitImageSmoothingEnabled = false;
context.mozImageSmoothingEnabled    = false;
// then draw the image
context.drawImage( canvas, 0, 0, canvas2.width, canvas2.height );
// return the just built canvas2
return canvas2;
</code></pre>

<p>}
```</p>

<h2>threex.proceduralcity extension</h2>

<p>As usual, this code is gathered in easy-to-reuse threex package,
<a href="https://github.com/jeromeetienne/threex.proceduralcity">threex.proceduralcity</a>.
It makes stuff super simple, just create an instance and it will return a <code>THREE.Mesh</code>.</p>

<p><code>javascript
var city  = new THREEx.ProceduralCity()
scene.add(city)
</code></p>

<p>The <a href="http://jeromeetienne.github.io/threex.proceduralcity/examples/demo.html">demo live</a>
contains this city plus a ground, a first person control and a fog.
This is rather cool result for such a small effort.</p>

<h2>Conclusion</h2>

<p>So now you know how to generate a whole city in 100 lines.
No download.
Rather clever algorithm.
I hope you learned from it,
it contains many tricks that you can reused in your own demos.</p>

<p>That's all for today! Have fun :)</p>
]]></content>
  </entry>
  
</feed>
