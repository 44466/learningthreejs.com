<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: three.js | Learning Three.js]]></title>
  <link href="http://learningthreejs.com/blog/categories/three-dot-js/atom.xml" rel="self"/>
  <link href="http://learningthreejs.com/"/>
  <updated>2015-05-28T13:24:13+01:00</updated>
  <id>http://learningthreejs.com/</id>
  <author>
    <name><![CDATA[Jerome Etienne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LearningThree.js News: Stay Tuned with Creative 3D Demos]]></title>
    <link href="http://learningthreejs.com/blog/2015/05/27/learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/"/>
    <updated>2015-05-27T15:53:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2015/05/27/learningthree-dot-js-news-stay-tuned-with-creative-3d-demos</id>
    <content type="html"><![CDATA[<p>This post is about Three.js News, a fun and brief newsletter about demos in three.js. The idea is to present the new and interesting 3D creations on the web. Our goal is to keep the audience up to date and tuned with Three.js most recent developments. We will upload videos and collect information of the latest demos. Let's take a look at this episode</p>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/DgPv6IIVDFQ" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<p>In this second edition of Three.js news we have collected very creative and funky demos. Some of them  were developed for both desktop and mobile phones. Some are games, some are just pure fun. Using the latest technologies, they are all a clear example of what's possible to do with web 3D today.</p>

<h2>Inconvergent Waves</h2>

<p><img src="/data/2015-05-27-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/inconvergent_waves.png" alt="screen shot 2015-05-26 at 10 42 57" />
<a href="http://inconvergent.net/waves/">Inconvergent waves</a> is a nicely done demo by <a href="https://twitter.com/inconvergent">Anders Hoff</a>. You can create waves by moving your mouse around. It's like making ripples on the water. This technique is actually used as a method for generating landscapes. It's very reactive and the movements are smooth and natural. Visit the inconvergent <a href="http://inconvergent.net/">website</a> to check out the developing process.</p>

<h2>Interactive WebGL globes</h2>

<p><img src="/data/2015-05-27-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/interactive_webgl_globe.png" alt="screen shot 2015-05-26 at 10 57 30" />
<a href="http://projects.delimited.io/webgl-globes/example_4_interactive_globe.html">Interactive WebGL</a> globes is a great way to improve your geography skills! This very educational and fun demo is a creation of <a href="https://twitter.com/delimitedtech">Steve Hall</a>. You mouseover the countries that you want and turn around by clicking on the interactive globe. Don't hesitate to read Steve's <a href="http://www.delimited.io/blog/2015/5/16/interactive-webgl-globes-with-threejs-and-d3">blogpost</a> to know more about his implementation of D3 and Three.js.</p>

<h2>Spiral Circle</h2>

<p><img src="/data/2015-05-27-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/spiral_circle.png" alt="screen shot 2015-05-26 at 10 58 52" /></p>

<p><a href="http://projects.delimited.io/subunit/demos/spiral-circle-v2.html">Spiral Circle</a> is another cool demo created by Steve Hall. It is based on <a href="http://bl.ocks.org/mbostock">mbostockâ€™s</a> <a href="http://bl.ocks.org/mbostock/2472e84f78fd03df443f">example</a>. It is extremely hypnotic and it has kind of a disturbing texture, like the skin of a snake monster or something. You can pan to the left to divide the circle in two. Be careful, it's alive!</p>

<h2>Hatsune Miku</h2>

<p><img src="/data/2015-05-27-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/hatsune_miku_threejs.png" alt="screen shot 2015-05-26 at 11 00 53" /></p>

<p><a href="http://en.wikipedia.org/wiki/Hatsune_Miku">Hatsune Miku</a> is a Three.js example <a href="http://takahirox.github.io/three.js/examples/webgl_loader_mmd.html">demo</a> done by <a href="https://twitter.com/superhoge">takahiro</a>. It's a very fun demo even if takahiro is still working on improving it. This very cute blue hair girl is Japan's sweetheart. She dances in holograms and does <a href="https://www.youtube.com/watch?v=YSyWtESoeOc">live concerts</a>...yeah i'm not kidding! We are even trying to bring her to life in <a href="https://twitter.com/LearningThreejs/status/600740523574439937">AR</a>.</p>

<h2>Race Against Oblivion</h2>

<p><img src="/data/2015-05-27-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/race_against_oblivion.png" alt="screen shot 2015-05-26 at 10 59 58" /></p>

<p>Race against oblivion or <a href="http://www.timeshift165.com/game">Timeshift</a> is an  original game made by <a href="http://www.ultranoir.com/en/#!/home/">Utranoir</a>. Inspired on the story of a unique French car : The Delahaye 165, you have to race against time to save this one of a kind automobile. The presentation of the game is outstanding, it has great design, background and effects. Bonus, it can be played on both desktop and mobile!</p>

<h2>A Particle Dream</h2>

<p><img src="/data/2015-05-27-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/a_particle_dream.png" alt="screen shot 2015-05-26 at 11 03 05" />
A Particle dream is a <a href="https://www.chromeexperiments.com/experiment/particle-dream">demo</a> created by <a href="http://www.iamnop.com/">Nop Jiarathanakul</a>. It is one of the latest Chrome experiments. It is a wonderful simulation of particles moving smoothly around. You can choose the shape you want the particles to morph into. The music and the ambiance mix together for a very relaxing result. Oh and you can actually use <a href="https://www.leapmotion.com/">Leap Motion</a> in this demo.</p>

<h2>Our Galactic Neighbourhood</h2>

<p><img src="/data/2015-05-27-learningthree-dot-js-news-stay-tuned-with-creative-3d-demos/our_galactic_neighborhood.png" alt="screen shot 2015-05-26 at 11 02 06" /></p>

<p><a href="http://charliehoey.com/threejs-demos/our-galactic-neighborhood.html">Our Galactic Neighbourhood</a>
is another very educational demo. Developed by creative coder <a href="http://charliehoey.com/">Charlie Hoey</a> this demo is a simulation of the charted stars in our Galaxy. You are able to explore the stars travelling both in space and time. Have you ever wondered how the stars are like lightyears away from Earth? Or how will they be thousands of years from now? This demo is your interstellar adventure.</p>

<h2>Conclusion</h2>

<p>In this blogpost we reviewed some 3D demos for Three.js News. They are all very diverse. We saw games, educational projects, simulations and funky characters. What they all have in common is their creativity and the use of 3D technology on the web. Some even go further and incorporate fun control sensor like the Leap Motion device. Have fun checking out all these demos. I hope you enjoy them as much as we did.</p>

<p>Stay tuned for more Three.js News and see you next time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[See-through Effect for Augmented Reality On Your Phone]]></title>
    <link href="http://learningthreejs.com/blog/2015/05/10/see-through-effect-for-augmented-reality-on-your-phone/"/>
    <updated>2015-05-10T19:25:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2015/05/10/see-through-effect-for-augmented-reality-on-your-phone</id>
    <content type="html"><![CDATA[<p>This post shows how to read your phone camera and make it appears as
transparent, aka to act as a see-through.
It may seems unrelated to 3d at first but
it is extremely useful in augmented reality.
I know it may seem silly :)
But this see-throught is the base of Augmented Reality in a phone.
This and other AR tech will be the subject of future posts.</p>

<p>It makes your device 'appears as transparent'
So when the user is looking at her device, she is seeing the reality.
You just have to display your augmented part on top
and you got augmented reality. A Picture is Worth a Thousand Words :)</p>

<p><a href='http://jeromeetienne.github.io/demo.seethroughphone' target='_blank'><input type="button" value='Try Demo Now' /></a></p>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/q7uRkul5prI" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>How It Is Coded</h2>

<p>Webcams are great for interactivity.
  We will read the webcam thanks to <a href="http://www.webrtc.org/">WebRTC</a>,
  html5 API which can be used to do video/audio conferences like  Skype or Hangout.</p>

<p>In our case, we just get the video from the webcam
  with the <a href="https://w3c.github.io/mediacapture-main/getusermedia.html">getUserMedia() function</a>.
  we dont need all the network part.
  It is quite widespread according <a href="http://caniuse.com/#feat=stream">caniuse</a> which is great!
  You can learn more about it
  on <a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia">mdn</a>
  or <a href="http://www.html5rocks.com/en/tutorials/getusermedia/intro/">html5rocks</a></p>

<p>Now that we know how to get a video, which camera to pick ?
This demo is intended for phone. They often got multiple cameras nowsadays.
  typically a front camera for selfies
  a back camera for the normal photos.
<a href="https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack">MediaStreamTrack</a> will list all the media source available in your browser.
  In webrtc vocabulary,
  front camera is called 'user' facing video
  back camera is a 'environment' facing .
  So we try to get the environment video camera if we can.</p>

<p>For the see-through effect to be convincing, we need to be careful.
  first we display the video stream in full screen, thus it
  is more real to the user.
  We display it in the background of the page with the proper css
Additionally we ensure we keep a proper
  <a href="http://en.wikipedia.org/wiki/Aspect_ratio_%28image%29">aspect ratio</a>,
  no matter the size of the browser window.
  So it isn't streched.
So it must be robust to window resize and orientation change.
  All that makes the resize function more subtle than usual.
  but nothing dramatic</p>

<h2>Source</h2>

<p>Here is the full source of the effect.
It is in a <a href="https://github.com/jeromeetienne/demo.seethroughphone">github repo</a>.
Enjoy!</p>

<p>```html
&lt;!DOCTYPE html>
<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0"></p>



<p><body style='margin: 0px;; overflow: hidden;'><script></p>

<p>// shim
navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
window.URL      = window.URL || window.webkitURL;</p>

<p>;(function(){</p>

<pre><code>    'use strict;'

    // create video element
    var video        = document.createElement('video')
    video.setAttribute('autoplay', true)
    document.body.appendChild(video)

    /**
     * Resize video element. 
     * - Made complex to handle the aspect change 
     * - it is frequent when the mobile is changing orientation
     * - after a search on the internet, it seems hard/impossible to prevent browser from changing orientation :(
     */
    function onResize(){
            // is the size of the video available ?
            if( video.videoHeight === 0 )   return

            var videoAspect = video.videoWidth / video.videoHeight
            var windowAspect = window.innerWidth / window.innerHeight

            // var video = document.querySelector('video')
            video.style.position = 'absolute'

            if( videoAspect &lt; windowAspect ){
                    video.style.left        = '0%'
                    video.style.width       = window.innerWidth + 'px'
                    video.style.marginLeft  = '0px'

                    video.style.top         = '50%'
                    video.style.height      =  (window.innerWidth/videoAspect) + 'px'
                    video.style.marginTop   = -(window.innerWidth/videoAspect) /2 + 'px'                        
            }else{
                    video.style.top         = '0%'
                    video.style.height      = window.innerHeight+'px'
                    video.style.marginTop   =  '0px'

                    video.style.left        = '50%'
                    video.style.width       =  (window.innerHeight*videoAspect) + 'px'
                    video.style.marginLeft  = -(window.innerHeight*videoAspect)/2 + 'px'
            }
    }

    window.addEventListener('resize', function(event){
            onResize()
    })

    // just to be sure - resize on mobile is funky to say the least
    setInterval(function(){
            onResize()
    }, 1000)

    // get the media sources
    MediaStreamTrack.getSources(function(sourceInfos) {
            // define getUserMedia() constraints
            var constraints = {
                    video: true,
                    audio: false,                        
            }
            // to mirror the video element when it isnt 'environment'
            // video.style.transform   = 'scaleX(-1)'

            // it it finds the videoSource 'environment', modify constraints.video
            for (var i = 0; i != sourceInfos.length; ++i) {
                    var sourceInfo = sourceInfos[i];
                    console.log('sourceInfo', sourceInfo)
                    if(sourceInfo.kind == "video" &amp;&amp; sourceInfo.facing == "environment") {
                            constraints.video = {
                                    optional: [{sourceId: sourceInfo.id}]
                            }
                            // not to mirror the video element when it is 'environment'
                            // video.style.transform   = ''
                    }
            }

            // try to get user media
            navigator.getUserMedia( constraints, function(stream){
                    // set the video.src with the userMedia stream
                    video.src = URL.createObjectURL(stream);
            }, function(error){
                    console.error("Cant getUserMedia()! due to ", error);
            });
    });
</code></pre>

<p>})()
</script>
</body>
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Threex a Day Challenge: Phase 1 Completed!]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/26/one-threex-a-day-challenge-phase-1-completed/"/>
    <updated>2014-05-26T11:49:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/26/one-threex-a-day-challenge-phase-1-completed</id>
    <content type="html"><![CDATA[<p>Hello everybody!</p>

<p>It's been nearly a month since I started publishing <a href="/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/">"One threex a day" challenge</a>. The idea was to share with you the many <a href="http://www.threejsgames.com/extensions/">three.js games extensions</a> that I had written over time. I wanted to show you how they could be useful, fun and easy to include in your very own three.js game. I came up with a motto "One threex a day gets your game on its way". I was all set up and ready to go. This was a challenge inspired by John Resig's article called <a href="http://ejohn.org/blo!/write-code-every-day/">"Write code everyday"</a>. I deeply agree with his theory for making progress, increasing productivity and getting the work done. I wished to try something similar on myself.</p>

<p>Let me tell you though... it WAS challenging! Keeping the publication rhythm was hard. It takes a lot of discipline and organization to get it done everyday. I had the best intentions, but unfortunately I got sick and I felt bad for most of last week. Additionally I had some day work on the side that I needed to get done. At this rate of publication, it was very hard to keep up! At first I wanted to publish the threex extensions for a period of two months but I think it is best to rest for a while. So a week ago I published the last three.js game extension of phase 1.</p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/p7xM5X7dkeI" frameborder="0" allowfullscreen></iframe>


<p>The good news is that I've had a very interesting experience. I'm pleased with the results. Obviously, some posts got more attention than others. I think this was because the three.js game extensions I published weren't all for hard-core developers or game creators. Some were pretty basic, but still had educational value for people just starting with three.js. I wanted them to be directed to all kinds of audience, amateurs and experts alike. I really appreciated the process of sharing these extensions, and overall I had a great response. I got some <a href="https://plus.google.com/104300307601542851567/posts/RhabZY19TSq">very</a> <a href="https://plus.google.com/104300307601542851567/posts/RqDbZNeJEkW">cool</a> <a href="https://twitter.com/siggraph/status/464238273582211072">retweets</a> and a lot of positive echo from you guys. Thanks a lot! Don't hesitate to contact me and give me some more feedback.</p>

<p>I stopped publication last week, but wait...I'm not saying I'm giving up though. Far from it. I have promised myself, and I promise my readers, to come back with more three.js extensions. Especially, because I still have a lot to publish, there are still some tricks up my sleeve ;)  For the moment I will concentrate on regaining my strength, writing more code and documenting it for the next threex batch. I hope to deliver and publish it soon.</p>

<p>Stay tuned! I'll be back.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Personalized and Polished Text for Your Three.js Game With threex.text]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/16/personalized-and-polished-text-for-your-three-dot-js-game-with-threex-dot-text/"/>
    <updated>2014-05-16T17:55:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/16/personalized-and-polished-text-for-your-three-dot-js-game-with-threex-dot-text</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.text/examples/basic.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.text/master/examples/images/screenshot-threex-text-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/">'one threex a day' challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.text">threex.text</a>.
threex.text is a <a href="http://jeromeetienne.github.io/threex/">threex game extension for three.js</a> which makes it easy to add 3d text in your game. You can use it to create a big logo on top of a shop or a big sign of any kind Las Vegas style. Up to you to see :) It is very flexible. You can fine tune lots of parameters to make it fit your needs. You can choose the fonts, the size, the bevel, the weight etc...</p>

<p><a href='http://jeromeetienne.github.io/threex.text/examples/basic.html' target='_blank'><input type="button" value='Try Threex.text Demo Now' /></a></p>

<p>To see the <a href="/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>"A THREEx extension a day, gets your game on its way!"</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/skjX1Dl7e0Y" frameborder="0" allowfullscreen></iframe>


<h1>Show Don't Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.text/examples/basic.html">examples/basic.html</a>
[<a href="https://github.com/jeromeetienne/threex.text/blob/master/examples/basic.html">view source</a>] :
It shows a 3d text.</li>
<li><a href="http://jeromeetienne.github.io/threex.text/examples/requirejs.html">examples/requirejs.html</a>
[<a href="https://github.com/jeromeetienne/threex.text/blob/master/examples/requirejs.html">view source</a>] :
It show a 3d text and it is all loaded thru require.js</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<p>```html</p>

<script src='threex.text.js'></script>


<p>```</p>

<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<p><code>bash
bower install threex.text
</code></p>

<h1>How To Use It</h1>

<p>Here is a very basic usage</p>

<p><code>
var mesh    = new THREEx.Text('THREEx')
scene.add(mesh)
</code></p>

<p>Here is another example with more parameters. The options are passed directly
to  <code>THREE.TextGeometry</code>.
See <a href="http://threejs.org/docs/#Reference/Extras.Geometries/TextGeometry">three.js docs</a>
for details.</p>

<p>```
var mesh    = new THREEx.Text('THREEx', {</p>

<pre><code>font        : "droid serif",
weight      : "bold",
size        : 1,
height      : 0.4,
</code></pre>

<p>})
scene.add(mesh)
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perlin Terrain Procedural Generation For Your Game With threex.terrain]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/15/perlin-terrain-procedural-generation-for-your-game-with-threex-dot-terrain/"/>
    <updated>2014-05-15T20:21:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/15/perlin-terrain-procedural-generation-for-your-game-with-threex-dot-terrain</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.terrain/examples/planegeometry.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.terrain/master/examples/images/screenshot-threex-terrain-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/">'one threex a day' challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.terrain">threex.terrain</a>.
threex.terrain is a <a href="http://www.threejsgames.com/extensions/">three.js games extension</a> which provides a procedural terrain generated from a simplex noise, the <a href="http://en.wikipedia.org/wiki/Perlin_noise">Perlin noise</a>. As you can see you have different zones that make the terrain more varied, the blue zone represents water, the green one represents trees or grass and the white zone at the mountain top is snow. Imagine your video game character walking on these 3D mountains or flying over them, pretty cool eh? You can take him through river, forest, wind and snow if you want ;)</p>

<p><a href='http://jeromeetienne.github.io/threex.terrain/examples/planegeometry.html' target='_blank'><input type="button" value='Try Threex.terrain Demo Now' /></a></p>

<p>To see the <a href="/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>"A THREEx extension a day, gets your game on its way!"</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/z_73WDzgBsA" frameborder="0" allowfullscreen></iframe>


<h1>Show Don't Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.terrain/examples/canvas.html">examples/canvas.html</a>
[<a href="https://github.com/jeromeetienne/threex.terrain/blob/master/examples/canvas.html">view source</a>] :
It shows a perlin terrain in a canvas 2d.</li>
<li><a href="http://jeromeetienne.github.io/threex.terrain/examples/planegeometry.html">examples/planegeometry.html</a>
[<a href="https://github.com/jeromeetienne/threex.terrain/blob/master/examples/planegeometry.html">view source</a>] :
It displays the terrain in 3d with three.js.</li>
<li><a href="http://jeromeetienne.github.io/threex.terrain/examples/height.html">examples/height.html</a>
[<a href="https://github.com/jeromeetienne/threex.terrain/blob/master/examples/height.html">view source</a>] :
It show how to test the height in a 3d terrain</li>
<li><a href="http://jeromeetienne.github.io/threex.terrain/examples/minecraft.html">examples/minecraft.html</a>
[<a href="https://github.com/jeromeetienne/threex.terrain/blob/master/examples/minecraft.html">view source</a>] :
It show a minecraft character walking on perlin terrain</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<p>```html</p>

<script src='threex.terrain.js'></script>


<p>```</p>

<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<p><code>bash
bower install threex.terrain
</code></p>

<h1>How To Use It</h1>

<p>To allocate a heightMap with a width of 100 and a depth of 200, do</p>

<p><code>javascript
var heightMap   = THREEx.Terrain.allocateHeightMap(100, 200)
</code></p>

<p>To generate some heights based on a simplex/perlin noise, do</p>

<p><code>javascript
THREEx.Terrain.simplexHeightMap(heightMap)
</code></p>

<p>If you want to display it in three.js, built a <code>THREE.PlaneGeometry</code> for it</p>

<p><code>javascript
// build the geometry
var geometry    = THREEx.Terrain.heightMapToPlaneGeometry(heightMap)
// init the material
var material    = new THREE.MeshPhongMaterial();
// create the mesh and add it to the scene
var mesh    = new THREE.Mesh( geometry, material );
scene.add( mesh );
</code></p>

<p>To get the ground height of this mesh, use the following</p>

<p><code>javascript
var y = THREEx.Terrain.planeToHeightMapCoords(heightMap, mesh, x, z)
</code></p>

<p>It is possible to enhance the rendering of this heightmap with some vertexColor, and a
smoother shading if you want.</p>

<p>```
// build the geometry
var geometry    = THREEx.Terrain.heightMapToPlaneGeometry(heightMap)
// set the vertexColor in the geometry
THREEx.Terrain.heightMapToVertexColor(heightMap, geometry)
// init the material
var material    = new THREE.MeshPhongMaterial({</p>

<pre><code>shading     : THREE.SmoothShading,
vertexColors    : THREE.VertexColors,
</code></pre>

<p>});
// create the mesh and add it to the scene
var mesh    = new THREE.Mesh( geometry, material );
scene.add( mesh );
```</p>

<p>To get the height with heightMap coordinates, just use</p>

<p><code>javascript
var y   = THREEx.Terrain.heightMapToHeight(heightMap, x, z)
</code></p>

<p>If you want to display the result in a canvas 2d, just do</p>

<p><code>javascript
var canvas  = THREEx.Terrain.heightMapToCanvas(heightMap)
document.body.appendChild(canvas)
</code></p>
]]></content>
  </entry>
  
</feed>
