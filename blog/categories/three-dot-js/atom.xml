<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: three.js | Learning Three.js]]></title>
  <link href="http://learningthreejs.com/blog/categories/three-dot-js/atom.xml" rel="self"/>
  <link href="http://learningthreejs.com/"/>
  <updated>2014-04-23T13:08:54+02:00</updated>
  <id>http://learningthreejs.com/</id>
  <author>
    <name><![CDATA[Jerome Etienne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[One THREEx a Day Gets Your Game On Its Way! A Challenge!]]></title>
    <link href="http://learningthreejs.com/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/"/>
    <updated>2014-04-22T17:51:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge</id>
    <content type="html"><![CDATA[<p>Hello everybody! I’m working on a new project that I want to share with you. But first, let me start by telling you what inspired me to do it.</p>

<p>Last week, I read an interesting article written by John Resig called <a href="http://ejohn.org/blog/write-code-every-day/">Write code everyday</a>. He explains how he succeed in efficiently accomplishing his side projects. This article opened my eyes. It was like a revelation, a procedure that I just had to apply to my own work. An answer to the questions I had been asking myself: How could I be more efficient? How could I be more disciplined and improve my execution?</p>

<p>The tactic that Resig decided to practice to improve his productivity was quite simple: He tried working on his side projects a little everyday, for a delimited amount of time, and it worked! He didn’t feel like a failure when he didn't do enough "quality" work during the weekend anymore! He found a way to organize his schedule, do his work, while still devoting time to leisure activities. I find this amazingly intelligent!</p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/CShTdamWAzg" frameborder="0" allowfullscreen></iframe>


<p>Resig’s work inspired me. So, I wanna try to do something similar: I want to publish a three.js game extension every day! Yes I know, it’s a challenge! But I wanna see if Resig’s tactic helps me gain more discipline when publishing my code. The idea is to publish one every day of the week, from Monday to Friday, one per day for two months, except on the weekends, because well, one has to rest at some point :)</p>

<p>Ok, so you already know that I love three.js, a javascript 3D library that makes Webgl. Three.js is the new up and coming technology, it’s hot, cutting-edge, and it has been deployed worldwide. Well, now I would really love to help you write your own games with it! I think the best way to do this is by publishing one three.js game extension per day. I have an enormous amount of information, and code, to share with you. I just have to get it out there for you to see!</p>

<p>Three.js Game extensions will make the dream of developing your own 3d video game come true. My moto is <strong>“One threex per day, gets your game on it’s way!”</strong> I’ve got over <a href="http://www.threejsgames.com/extensions/">40 cool extensions</a> that could be used to facilitate the development of 3D games on the web. And I wanna share this knowledge with the world!</p>

<p><a href='http://jeromeetienne.github.io/stellar7/' target='_blank'><img class="right" src="http://learningthreejs.com/data/2014-04-22-one-threex-a-day-gets-your-game-on-its-way-a-challenge/images/stellar7-screenshot.png" width="444" height="250"></a>
Most of the three.js game extensions that I will publish support require.js and it would be very easy to add them to your own game. With these extensions you can actually learn to code 3D mini-games in less than an hour, like <a href="http://learningthreejs.com/blog/2014/01/10/flying-spaceship-minigame/">Flying Spaceships</a> or to create more detailed video games with a lot of cool post-processing effects, like <a href="http://jeromeetienne.github.io/stellar7/">Stellar7</a>. Just to give you an idea, I coded Stellar7 in only 2 weeks thanks to threex extensions! That's a record :)</p>

<p>The three.js game extensions will teach you real skills and tools to help you develop cool stuff on 3D. The best part is that you can reproduce everything you learn cause it’s all open source and available to anyone!</p>

<p>The Three.Js Games mission is to ignite the spark of genius creativity that every developer has.</p>

<p>I hope you enjoy it :)</p>

<p>That’s all folks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Have You Seen YourSelf when You Are Drunk ? - making of a fun WebGL Demo]]></title>
    <link href="http://learningthreejs.com/blog/2014/02/08/have-you-seen-yourself-when-you-are-drunk/"/>
    <updated>2014-02-08T12:49:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/02/08/have-you-seen-yourself-when-you-are-drunk</id>
    <content type="html"><![CDATA[<p>This post is about a demo called <a href="https://github.com/jeromeetienne/demo.seenyourselfdrunk">"Have you seen yourself When you are Drunk ?"</a>. What is it all about ?
Well have you seen yourself when you are drunk ?</p>

<p><img class="right" src="/data/2014-02-08-have-you-seen-yourself-when-you-are-drunk/images/angryBoss.jpg" width="250" height="250"></p>

<p>You don't look at your best, but you don't remember the morning after, lucky you. So now you are sober, this demo will show you how you look when you are drunk…
Hopefully this will make you realize that <em>alcohol abuse is a bad thing</em>! And that we could
<em>save the world by stopping it</em>!</p>

<p><a href='http://jeromeetienne.github.io/demo.seenyourselfdrunk/' target='_blank'><input type="button" value='Try Demo Now' /></a></p>

<p>Or it will just show some cool webgl effects… Honnestly i wasnt that sure of its exact purpose. Well, up to you to pick :)
In other words, this is a webgl demo which reads your webcam, to show yourself on screen, then it does some screen deformations to give you an idea of what you look like when you are drunk.</p>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/yl2Qd9T3Lq4" frameborder="0" allowfullscreen></iframe>


<p>We will learn how to code that. So first the tools of the trade…</p>

<!-- more -->


<h2>Used Tools</h2>

<p>This demo is done with 2 threex extensions
<a href="https://github.com/jeromeetienne/threex.toxicpproc">threex.toxicpproc</a>
,
<a href="https://github.com/jeromeetienne/threex.videotexture">threex.videotexture</a>
and our lovely
<a href="http://threejs.org">three.js</a> obviously.
<a href="https://github.com/jeromeetienne/threex.videotexture">threex.videotexture</a>
is, according to <a href="http://jeromeetienne.github.io/threex/#threex.videotexture">threex page</a> :</p>

<blockquote><p>handles videos in texture. It is possible to put html5 video output in texture, even put the webcam in it, or to connect it to WebAudio API to get localized sounds.</p></blockquote>

<p>We will use it to read the webcam and display it full page.
<a href="https://github.com/jeromeetienne/threex.toxicpproc">threex.toxicpproc</a>
is, according to <a href="http://jeromeetienne.github.io/threex/#threex.toxicpproc">threex page</a> :</p>

<blockquote><p>an intoxicated post-processing effect. You can easily add it in your game to simulate the player is drunk. It provides various levels: sober, drunk, high and wasted.</p></blockquote>

<p>We will use it to deform the video from the webcam and makes you look drunk.</p>

<h2>Webcam For Texture</h2>

<p>So the first thing is to get webcam on fullpage.
For that we use <a href="https://github.com/jeromeetienne/threex.videotexture">threex.videotexture</a>.
It does video textures, either you take this video from a url, like this.</p>

<p>```
// create the videoTexture
var videoUrl    = 'sintel.ogv';
var videoTexture= new THREEx.VideoTexture(videoUrl)
// on every render, update it
onRenderFcts.push(function(delta, now){</p>

<pre><code>    videoTexture.update(delta, now)
</code></pre>

<p>})
```</p>

<p>Or you take the video live from the webcam, like this.</p>

<p>```
// create the webcamTexture
var videoTexture    = new THREEx.WebcamTexture()
// on every render, update it
onRenderFcts.push(function(delta, now){</p>

<pre><code>    videoTexture.update(delta, now)
</code></pre>

<p>})<br/>
```</p>

<p>Then use <code>videoTexture.texture</code> in your materials to
have the texture of the webcam. So let's see how we will
compose our scene.</p>

<h2>Scene Composition</h2>

<p>We need a Plane which take the full page, and we will apply our webcam texture to it.
So first there is an orthographic camera. Perspective is useless in this case, and make computations much more complex :)</p>

<p>```
var camera = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2</p>

<pre><code> ,  window.innerHeight / 2, window.innerHeight / -2, -100, 100);
</code></pre>

<p>```</p>

<p>Then, there is a <code>THREE.PlaneGeometry</code> mesh
using full screen for this camera.</p>

<p><code>
var geometry    = new THREE.PlaneGeometry( window.innerWidth, window.innerHeight )
var material    = new THREE.MeshBasicMaterial();
var mesh    = new THREE.Mesh(geometry, material)
scene.add(mesh)
</code></p>

<p>Then we apply our <code>videoTexture</code> to this material. Thus
we see the webcam on this plan :)</p>

<p><code>
material.map    = videoTexture.texture
</code></p>

<p>So we got our face on full screen, cool for ego i guess :)
Now let's apply some deformation to it!</p>

<h2>Post Processing and Rendering</h2>

<p>Usually to render a scene, we use the following code.
This is when we render the scene directly on screen.</p>

<p><code>
renderer.render( scene, camera )
</code></p>

<p>We will use a post processing chain with <code>THREE.EffectComposer</code>. It process the screen as a 2d texture.
More specifically, we will use <a href="https://github.com/jeromeetienne/threex.toxicpproc">threex.toxicpproc</a>, a three.js extension which provide post processing of drunk effects. It got 4 presets <em>sober</em>, <em>drunk</em>, <em>high</em> and <em>wasted</em>. There is a nice tweening when you switch between presets so transitions looks smooth.
Try it yourself in <a href="http://jeromeetienne.github.io/threex.toxicpproc/examples/basic.html">this demo</a>.</p>

<h3>THREEx.ToxicPproc</h3>

<p>So First lets instanciate a <code>THREEx.ToxicPproc.Passes</code>. It will setup the effect composers passes for our effect. We set it to the <code>drunk</code> preset.</p>

<p>```
var toxicPasses = new THREEx.ToxicPproc.Passes('drunk')
// on every render you update it
onRenderFcts.push(function(delta, now){</p>

<pre><code>toxicPasses.update(delta, now)
</code></pre>

<p>})
```</p>

<p>If you want to create other presets, it is entirely possible. There is even a <a href="https://code.google.com/p/dat-gui/">Dat.GUI</a> provided for you to tweak buttons until it fits your needs. You see it in <a href="http://jeromeetienne.github.io/threex.toxicpproc/examples/basic.html">the demo</a>.
You use it like this.</p>

<p><code>
var datGui  = new dat.GUI()
THREEx.addToxicPasses2DatGui(toxicPasses, datGui)
</code></p>

<h3>THREE.EffectComposer</h3>

<p>Now that we got the toxicpproc passes, let's create the <code>THREE.EffectComposer</code> to run it.</p>

<p><code>
var composer    = new THREE.EffectComposer(renderer);
</code></p>

<p>We render the scene on a texture</p>

<p><code>
var renderPass  = new THREE.RenderPass( scene, camera );
composer.addPass( renderPass );
</code></p>

<p>We send this texture to <code>threex.toxicpproc</code></p>

<p><code>
toxicPasses.addPassesTo(composer)
</code></p>

<p>Now we just have to tell the composer the last pass is the one to be rendered on screen.</p>

<p><code>
composer.passes[composer.passes.length -1 ].renderToScreen  = true;
</code></p>

<h3>Update on each Frame</h3>

<p>We got the rendering to do on each frame. Usually we do</p>

<p><code>
renderer.render( scene, camera )
</code></p>

<p>But here we render thru the effect composer, so we do</p>

<p><code>
// render thru composer
composer.render(delta)
</code></p>

<h2>Conclusion</h2>

<p>Ok so you have learn how to code a demo like
<a href="https://github.com/jeromeetienne/demo.seenyourselfdrunk">"Have you seen yourself When you are Drunk ?"</a>
Pretty Cool!
Now you can get more <a href="http://jeromeetienne.github.io/threex/">threex</a> extensions and
play with it to build your own demos.
This is All for Today Folks, have fun! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Game Workshop: Let's Do a Fighting Spaceship Minigame Together]]></title>
    <link href="http://learningthreejs.com/blog/2014/01/10/flying-spaceship-minigame/"/>
    <updated>2014-01-10T11:05:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2014/01/10/flying-spaceship-minigame</id>
    <content type="html"><![CDATA[<p>In this post, we are going to present how to do a mini-game called "Flying Spaceships".
We are going to do it together in 40 minutes.
You can read the slides or watch the video to follow along!
Just look at this <a href="/data/2014-01-10-flying-spaceship-minigame/slides/step99.html">demo</a>.
It uses <a href="http://threejs.org">three.js</a> for the 3D,
<a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html">WebAudio API</a>
for the sound and several <a href="http://jeromeetienne.github.io/threex/">threex extensions</a>
for stuff like spaceships and planets.
I love the fact that now we can code mini-games in less than an hour!
All that on the web, and with open source, so cool!</p>

<p><a href='http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/slides/slides/' target='_blank'><input type="button" value='Slides of the talk' /></a>
<a href='http://www.youtube.com/watch?v=s9pxStYvqrQ' target='_blank'><input type="button" value='Video of the talk' /></a>
<a href='http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/slides/step99.html' target='_blank'><input type="button" value='the result!' /></a></p>

<iframe width="425" height="349" src="http://www.youtube.com/embed/EEvEw5n1iEo" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>The Talk</h2>

<p>Here is the promised 40min video. Sit back and relax :)</p>

<iframe width="425" height="349" src="http://www.youtube.com/embed/s9pxStYvqrQ" frameborder="0" allowfullscreen></iframe>


<h2>The Slides</h2>

<p>Here are a screenshot of every slides.
Or you can directly look at the
<a href="/data/2014-01-10-flying-spaceship-minigame/slides/slides/">slides</a>.</p>

<p><img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide00.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide01.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide02.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide03.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide04.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide05.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide06.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide07.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide08.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide09.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide10.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide11.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide12.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide13.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide14.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide15.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide16.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide17.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide18.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide19.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide20.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide21.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide22.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide23.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide24.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide25.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide26.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide27.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide28.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide29.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide30.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide31.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide32.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide33.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide34.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide35.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide36.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide37.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide38.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide39.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide40.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide41.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide42.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide43.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide44.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide45.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide46.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide47.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide48.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide49.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide50.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide51.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide52.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide53.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide54.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide55.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide56.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide57.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide58.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide59.png" width="100%">
<img src="http://learningthreejs.com/data/2014-01-10-flying-spaceship-minigame/screenshots/slide60.png" width="100%"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zero To Nyancat in 30 Seconds Flat!]]></title>
    <link href="http://learningthreejs.com/blog/2013/12/31/zero-to-nyancat-in-30-seconds-flat/"/>
    <updated>2013-12-31T11:05:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2013/12/31/zero-to-nyancat-in-30-seconds-flat</id>
    <content type="html"><![CDATA[<p>So, today we are gonna learn how to use Yeoman for
<a href="http://threejs.org">three.js</a>.
We are gonna create a Nyancat in WebGL, starting from nothing in only 30 seconds.
It was a challenge to see how fast we could reach using the yeoman tools.
Here is the
<a href="/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/slides/demo/index.html">demo</a>
 we gonna build in 30 seconds :)
You are gonna see how easy it is through a talk i made at
<a href="http://parisjs.org/">parisjs</a>!
But first... what is yeoman? Well,
<a href="http://yeoman.io">yeoman</a>
is a "Modern Workflow for WebApps".
It is composed of 3 tools:
<a href="http://bower.io">bower</a>, <a href="http://gruntjs.com">grunt</a> and <a href="http://yeoman.io/generators.html">yo</a>.</p>

<p>Let's see how
<a href="http://yeoman.io">yeoman</a>
will help us ease up and speed up the work when we’re doing
<a href="http://threejs.org">three.js</a>.
You can look at the
<a href="www.youtube.com/watch?v=zeR_cpupZcQ">screencast</a>
of me doing the talk, or directly at the
<a href="/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/slides/">slides</a> below.
If you are in a rush, here is the TL;DR executive summary. Have Fun :)</p>

<p><a href='http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/slides/' target='_blank'><input type="button" value='Slides of the talk' /></a>
<a href='http://www.youtube.com/watch?v=zeR_cpupZcQ' target='_blank'><input type="button" value='Video of the talk' /></a>
<a href='http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/slides/demo/index.html' target='_blank'><input type="button" value='the result!' /></a>
<a href='https://www.udemy.com/yeoman-for-threejs/' target='_blank'><input type="button" value='udemy course' /></a></p>

<p><strong>Update:</strong> I am experimenting with <a href="https://www.udemy.com">udemy</a> and made a course from this post. Check it out <a href="https://www.udemy.com/yeoman-for-threejs/">"Yeoman For Three.js"</a>. More than 30min of video :)</p>

<iframe width="425" height="349" src="http://www.youtube.com/embed/UNuRxyEm6qU" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2><strong>TL;DR;</strong></h2>

<p>To generate the boilerplate, just do</p>

<p>```</p>

<pre><code>yo threejs-boilerplate
</code></pre>

<p>```</p>

<p>To install any <a href="http://jeromeetienne.github.io/threex/">threex extension for three.js</a>,
and
<a href="http://github.com/jeromeetienne/threex.nyancat/">threex.nyancat</a> in particular, do</p>

<p>```</p>

<pre><code>bower install threex.nyancat
</code></pre>

<p>```</p>

<h2>Video Of The Talk</h2>

<iframe width="425" height="349" src="http://www.youtube.com/embed/zeR_cpupZcQ" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<h2>Slides</h2>

<p>Here are a screenshot of every slides.
Or you can directly look at the
<a href="/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/slides/">slides</a>.</p>

<p><img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide01.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide02.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide03.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide04.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide05.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide06.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide07.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide08.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide09.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide10.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide11.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide12.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide13.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide14.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide15.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide16.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide17.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide18.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide19.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide20.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide21.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide22.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide23.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide24.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide25.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide26.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide27.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide28.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide29.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide30.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide31.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide32.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide33.png" width="100%">
<img src="http://learningthreejs.com/data/2013-12-31-zero-to-nyancat-in-30-seconds-flat/screenshots/slide34.png" width="100%"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Make The Earth In WebGL?]]></title>
    <link href="http://learningthreejs.com/blog/2013/09/16/how-to-make-the-earth-in-webgl/"/>
    <updated>2013-09-16T10:13:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2013/09/16/how-to-make-the-earth-in-webgl</id>
    <content type="html"><![CDATA[<p>So today we gonna learn how to display the earth in webgl.
That will be a nice introduction to material and textures.
I got the idea while coding
<a href="http://github.com/jeromeetienne/threex.planets/">threex.planets</a>,
a three.js extension to easily display all the planets from the solar system based on
<a href="http://planetpixelemporium.com/planets.html">planetpixelemporium</a>. With this post, you will be able to feel like astronauts conquering the outer space for the day and creating your own galaxy. :)</p>

<iframe width="425" height="349" src="http://www.youtube.com/embed/-3ZCZUgvmo0" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<p>So we want to render the earth with three.js... It is surprisingly easy to code.
We gonna use the textures
from
<a href="http://planetpixelemporium.com/planets.html">planetpixelemporium</a>
and proceed step by step.
But first let me show you the
<a href="/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/index.html">demo we gonna write</a> below.</p>

<iframe width="100%" height="349" src="http://learningthreejs.com/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/index.html" frameborder="0" allowfullscreen></iframe>


<p>First the geometry with a sphere, then each texture and their various effects.
We will even add animations to make it more realistic and put it in context with
a star field background.</p>

<h2>Let's Do a Plain Sphere</h2>

<p><img class="right" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/earth-color.png" width="320" height="240"></p>

<p>Well we first create a geometry for the sphere, then
we add a phong material,
create a mesh from them
and add it to the scene.
The first parameter, <code>0.5</code> is the radius.
The second parameter, <code>32</code>, is the segments in width
and
the third, <code>32</code>, is the segments in height.
We make it quite detailed for it to be nicer.
We pick <code>THREE.MeshPhongMaterial</code> to get
<a href="http://en.wikipedia.org/wiki/Phong_shading">phong shading</a>.
It provides <a href="http://en.wikipedia.org/wiki/Specular_reflection">specular reflection</a>
which will be used to get a shiny sea.</p>

<br clear='both'/>


<p><code>javascript
var geometry    = new THREE.SphereGeometry(0.5, 32, 32)
var material    = new THREE.MeshPhongMaterial()
var earthMesh   = new THREE.Mesh(geometry, material)
scene.add(earthMesh)
</code></p>

<p>Cool but rather flat... What about a diffuse texture to add some colors to our sphere.</p>

<h2>Let's Add a Diffuse Texture</h2>

<p><img class="right" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/earth-diffuse.png" width="320" height="240">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/bower_components/threex.planets/images/earthmap1k.jpg" width="410" height="240"></p>

<p>Above you can see the
<a href="http://wiki.splashdamage.com/index.php/Basic_Texture_Overview">diffuse texture</a>
from
<a href="http://planetpixelemporium.com/planets.html">planetpixelemporium</a> to set the main color
of the surface.
When we apply it to a sphere, we get the image on the right.
Here is the code to produce it.</p>

<br clear='both'/>


<p><code>javascript
material.map    = THREE.ImageUtils.loadTexture('images/earthmap1k.jpg')
</code></p>

<p>Hmm rather cool but more relief on the earth would be cool. What about a bump texture now ?</p>

<h2>Let's Add a Bump Texture</h2>

<p><img class="right" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/earth-bump.png" width="320" height="240">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/bower_components/threex.planets/images/earthbump1k.jpg" width="410" height="240"></p>

<p>Above is the bump map we use.
According to <a href="http://en.wikipedia.org/wiki/Bump_mapping">wikipedia definition</a>,
a bump map "perturbates the surface normals of the object
using the perturbed normal during lighting calculations".
Each of its pixels acts as a height on the surface.
See the result on the right.
The mountains appear more clearly thanks to their shadow.</p>

<p><code>javascript
material.bumpMap    = THREE.ImageUtils.loadTexture('images/earthbump1k.jpg')
material.bumpScale  = 0.05
</code></p>

<p>It is possible to change how much the map affects lighting with <code>bumpScale</code> parameter.
Play with it to fit your needs. Now that we change the heights on various parts of the
earth, let's change its shininess with a specular texture.</p>

<h2>Let's Add a Specular Texture</h2>

<p><img class="right" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/earth-specular.png" width="320" height="240">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/bower_components/threex.planets/images/earthspec1k.jpg" width="410" height="240"></p>

<p>Above is the <a href="http://wiki.splashdamage.com/index.php/Specular_Maps">specular map</a> we use.
Each pixel determines the intensity of
<a href="http://en.wikipedia.org/wiki/Specularity">specularity</a>.
In this case, only the sea is specular because water reflects water more than earth.
You can see it on the left with the white halo in the Gulf of Mexico.
You can control the specular color with <code>.specular</code> parameter.</p>

<p><code>javascript
material.specularMap    = THREE.ImageUtils.loadTexture('images/earthspec1k.jpg')
material.specular   = new THREE.Color('grey')
</code></p>

<p>Yeah but all this water, where does it go when it is hot ? It evaporates in the sky
and becomes clouds.</p>

<h2>Let's Add a Cloud Layer</h2>

<p><img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/bower_components/threex.planets/images/earthcloudmap.jpg" width="320" height="240">
<img class="right" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/earth-cloud.png" width="320" height="240">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/demo/bower_components/threex.planets/images/earthcloudmaptrans.jpg" width="360" height="240"></p>

<br clear='both'/>


<p>We build <code>canvasCloud</code> and use it as texture.
It is based on the jpg images you see above:
one for the color and the other for the transparency.
We do that because
<a href="http://en.wikipedia.org/wiki/JPEG">jpg</a>
doesn't handle an alpha channel.
So you need to make the code to build the texture based on those images.</p>

<p>```javascript
var geometry    = new THREE.SphereGeometry(0.51, 32, 32)
var material    = new THREE.MeshPhongMaterial({</p>

<pre><code>map     : new THREE.Texture(canvasCloud),
side        : THREE.DoubleSide,
opacity     : 0.8,
transparent : true,
depthWrite  : false,
</code></pre>

<p>})
var cloudMesh   = new THREE.Mesh(geometry, material)
earthMesh.add(cloudMesh)
```</p>

<p>We attach the cloudMesh to the earthMesh, thus they will move together.
Notice the parameters of the material.
We disable <code>depthWrite</code> and set <code>transparent</code> to warn three.js the
cloud mesh is transparent.
We set <code>side</code> to <code>DoubleSide</code> thus both sides will be visible.
This avoids artefacts to be on the edge of the earth.
Finaly we set <code>opacity</code> to make them more translucide.
The output is quite convincing but rather static. Let's see what we can do about that!</p>

<h2>"And Yet it Moves"</h2>

<p>This is what
<a href="http://en.wikipedia.org/wiki/Galileo_Galilei">Galileo Galilei</a> said
about the earth. This sentence has a
<a href="http://en.wikipedia.org/wiki/And_yet_it_moves">interesting story</a>.
So i am thinking it would be cool to make our earth move too.
In your render loop, you simply do this</p>

<p>```javascript
onRenderFcts.push(function(delta, now){</p>

<pre><code>earthMesh.rotation.y    += 1/32 * delta
</code></pre>

<p>})
```</p>

<p>As a last step, we gonna animate the cloud layer too, to make it more realistic.</p>

<p>```javascript
onRenderFcts.push(function(delta, now){</p>

<pre><code>cloudMesh.rotation.y    += 1/16 * delta
</code></pre>

<p>})
```</p>

<p>Definitely better, but still we feel there is something missing.
What do we see in space ? Stars! duh :)</p>

<h2>Let's Add a Star Field</h2>

<p><img class="right" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/galaxy_starfield.png" width="320" height="240"></p>

<p>We will see how to render the galaxy starfield.
The star field as you see it in the demo is an "environment sphere",
aka it is a large sphere, we are in the center and we see what's inside.
So we ask three.js to show the backside of the faces.
And we use the texture above as diffuse.
The above image is smaller than the actual one so you barely see the stars.</p>

<br clear='both'/>


<p><code>javascript
// create the geometry sphere
var geometry    = new THREE.SphereGeometry(90, 32, 32)
// create the material, using a texture of startfield
var material    = new THREE.MeshBasicMaterial()
material.map    = THREE.ImageUtils.loadTexture('images/galaxy_starfield.png')
material.side   = THREE.BackSide
// create the mesh based on geometry and material
var mesh    = new THREE.Mesh(geometry, material)
</code></p>

<h2>threex.planets - All Solar System's Planets Done For You</h2>

<p>While i was at it, i made
<a href="https://github.com/jeromeetienne/threex.planets/">threex.planets</a>,
a
<a href="http://jeromeetienne.github.io/threex/">threex</a>
extension for
<a href="http://threejs.org">three.js</a>.
It provides all the planets from the solar system to be easily usable in your own demo or games.
It is based on
<a href="http://planetpixelemporium.com/planets.html">planetpixelemporium</a>
textures using the same technics described in this post.
You can see it live
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html">here</a>.
First, the mythical
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Sun">sun</a>,
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Mercury">mercury</a> and
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Venus">venus</a>.</p>

<p><img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-sun.png" width="230" height="172">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-mercury.png" width="230" height="172">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-venus.png" width="230" height="172"></p>

<br clear='both'/>


<p>Now the best known, the
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Earth">earth</a>
with its cloud that we previously detailed in this post, the
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Moon">moon</a>
which isn't
an actual planet but still we could not do without, and
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Mars">mars</a>
with the little green people.</p>

<p><img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-earth.png" width="230" height="172">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-moon.png" width="230" height="172">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-mars.png" width="230" height="172"></p>

<br clear='both'/>


<p>Follow,
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Jupiter">jupiter</a>,
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Saturn">saturn</a> and
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Uranus">uranus</a>.
I love the rings there. I added shadow casting to enhance realism.</p>

<p><img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-jupiter.png" width="230" height="172">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-saturn.png" width="230" height="172">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-uranus.png" width="230" height="172"></p>

<br clear='both'/>


<p>And the last two, the furthest ones,
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Neptune">neptune</a>
and
<a href="http://jeromeetienne.github.io/threex.planets/examples/select.html#Pluto">pluto</a></p>

<p><img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-neptune.png" width="230" height="172">
<img class="left" src="/data/2013-09-16-how-to-make-the-earth-in-webgl/screenshots/planets-pluto.png" width="230" height="172"></p>

<br clear='both'/>


<h2>Conclusion</h2>

<p>In this post, we saw how to make a nice looking earth with animated clouds with a star field in
the background. I think it is a nice result for the amount of work.
I hope it was useful to discuver the various roles of textures.
Now you can use this to make even nicer demos, like
<a href="http://jeromeetienne.github.io/threex.planets/examples/earth.html">this one</a>.
It shows the same Earth, that we just saw how to do, with the moon close to it.
We add shadow casting and a nice atmosphere shader and the result is quite convincing.</p>

<p>That's all for today folks. Have Fun!</p>
]]></content>
  </entry>
  
</feed>
