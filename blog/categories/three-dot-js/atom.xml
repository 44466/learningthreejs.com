<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: three.js | Learning Three.js]]></title>
  <link href="http://learningthreejs.com/blog/categories/three-dot-js/atom.xml" rel="self"/>
  <link href="http://learningthreejs.com/"/>
  <updated>2014-05-02T13:32:13+02:00</updated>
  <id>http://learningthreejs.com/</id>
  <author>
    <name><![CDATA[Jerome Etienne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Easy to use dynamic texture to write text in your 3d object with threex.dynamictexture game extensions for three.js]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/02/easy-to-use-dynamic-texture-to-write-text-in-your-3d-object-with-threex-dot-dynamictexture-game-extensions-for-three-dot-js/"/>
    <updated>2014-05-02T13:54:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/02/easy-to-use-dynamic-texture-to-write-text-in-your-3d-object-with-threex-dot-dynamictexture-game-extensions-for-three-dot-js</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.dynamictexture/examples/basic.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.dynamictexture/master/examples/images/screenshot-threex-dynamictexture-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="/blog/categories/threexaday/">'one threex a day' challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.dynamictexture">threex.dynamictexture</a>.
threex.dynamictexture is a <a href="http://www.threejsgames.com/extensions/">threex game extension for three.js</a>. It provides an easy way to handle dynamically generated texture.
Inspiration came from
the excelent <a href="http://www.babylonjs.com">babylon.js</a>
which got
<a href="https://github.com/BabylonJS/Babylon.js/blob/master/Babylon/Materials/textures/babylon.dynamicTexture.js">BABYLON.DynamicTexture</a>.
It is mainly used to write text in texture. Say you got a character which says something, you may want to put that in a texture and display that above your character. threex.dynamictexture will make it easy for you.</p>

<p><a href='http://jeromeetienne.github.io/threex.dynamictexture/examples/basic.html' target='_blank'><input type="button" value='Try Threex.dynamictexture Demo Now' /></a></p>

<p>To see the <a href="/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>"A THREEx extension a day, gets your game on its way!"</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/lSR-6Q4oinU" frameborder="0" allowfullscreen></iframe>


<h1>Show Don't Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.dynamictexture/examples/basic.html">examples/basic.html</a>
[<a href="https://github.com/jeromeetienne/threex.dynamictexture/blob/master/examples/basic.html">view source</a>] :
It shows this feature, and that one which is coded like that.</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it manually or with
<a href="http://bower.io/">bower</a>.
for the manual version, first include <code>threex.dynamictexture.js</code> with the usual</p>

<p>```html</p>

<script src='threex.dynamictexture.js'></script>


<p>```</p>

<p>or with
<a href="http://bower.io/">bower</a>
you type the following to install the package.</p>

<p><code>bash
bower install threex.dynamictexture
</code></p>

<p>then you add that in your html</p>

<p>```html</p>

<script src="bower_components/threex.dynamictexture/threex.dynamictexture.js"></script>


<p>```</p>

<h1>How To Use It ? </h1>

<p>You instanciate the texture, say it is 512 pixel width, and 512 pixel high.
<code>
var dynamicTexture  = new THREEx.DynamicTexture(512,512)
</code></p>

<ul>
<li><code>dynamicTexture.canvas</code> the underlying canvas</li>
<li><code>dynamicTexture.context</code> the context of the underlying canvas</li>
<li><code>dynamicTexture.texture</code> the <code>THREE.Texture</code> created</li>
</ul>


<p>To use the texture on a <code>THREE.Material</code></p>

<p>```javascript
var geometry    = new THREE.CubeGeometry( 1, 1, 1);
var material    = new THREE.MeshBasicMaterial({</p>

<pre><code>map : dynamicTexture.texture
</code></pre>

<p>})
var mesh    = new THREE.Mesh( geometry, material );
scene.add( mesh );
```</p>

<p>When you update a texture be sure to do</p>

<p><code>javascript
dynamicTexture.texture.needsUpdate  = true
</code></p>

<h2>Helpers Functions</h2>

<p>Some helpers functions are provided to draw in this canvas.</p>

<p><strong>To clear the underlying canvas</strong></p>

<p><code>
dynamicTexture.clear();
</code></p>

<p><strong>To Draw a Text</strong>
to draw a text</p>

<p><code>
dynamicTexture.drawText('Hello', 32, 256, 'red')
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy Way To Integrate Video, or even WebCam, in Your Texture with THREEx.VideoTexture Game Extension for THREE.js]]></title>
    <link href="http://learningthreejs.com/blog/2014/04/30/easy-way-to-integrate-video-or-even-webcam-in-your-texture-with-threex-dot-videotexture-game-extension-for-three-dot-js/"/>
    <updated>2014-04-30T13:38:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2014/04/30/easy-way-to-integrate-video-or-even-webcam-in-your-texture-with-threex-dot-videotexture-game-extension-for-three-dot-js</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.videotexture/examples/videotexture.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.videotexture/master/examples/images/screenshot-threex-videotexture-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="/blog/categories/threexaday/">'one threex a day' challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.videotexture">threex.videotexture</a>.
threex.videotexture is a <a href="http://www.threejsgames.com/extensions/">threex game extension for three.js</a>.
It provides help to handle videos in texture.
It is possible to put html5 <code>&lt;video&gt;</code> output in texture with <code>threex.videotexture.js</code>.
You can even put the webcam in a texture with <code>threex.webcamtexture.js</code>.
It is cool if you want to make a tv screen in your game, You can easily use this extension. You pick the video to play and you are ready to go.
The screen surface will use your video texture making it look like a TV set.
If you need it, you can try <code>threex.audiovideotexture.js</code> where the
video is mapped on the texture and additionnally the sound of the video
is handled via
<a href="https://dvcs.w3.org/hg/audio/raw-file/tip/webaudio/specification.html">web audio API</a>.
Thus you can have localized sound, which is neat in the 3d environment.</p>

<p><a href='http://jeromeetienne.github.io/threex.videotexture/examples/videotexture.html' target='_blank'><input type="button" value='Try Threex.videotexture Demo Now' /></a></p>

<p>To see the <a href="/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>"A THREEx extension a day, gets your game on its way!"</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/O5ae0FhrOEo" frameborder="0" allowfullscreen></iframe>


<h1>Show Don't Tell</h1>

<ul>
<li>Here is a <a href="http://jeromeetienne.github.io/threex.videotexture/examples/videotexture.html">videotexture example</a> and its <a href="https://github.com/jeromeetienne/threex.videotexture/blob/master/examples/videotexture.html">source</a>.
It read the video from a file via video dom element and display it in a texture</li>
<li>Here is a <a href="http://jeromeetienne.github.io/threex.videotexture/examples/audiovideotexture.html">audio/video texture example with WebAudio API</a>and its <a href="https://github.com/jeromeetienne/threex.videotexture/blob/master/examples/audiovideotexture.html">source</a>.
It shows how to plug the video sound into the WebAudio API because you get localised sounds.
This is particularly useful in 3D.
"Audio/Video" texture is a texture where the sound comes from the object3d on which
the texture is mapped.</li>
<li>Here is another <a href="http://jeromeetienne.github.io/threex.videotexture/examples/webcamtexture.html">webcam example</a> and its <a href="https://github.com/jeromeetienne/threex.videotexture/blob/master/examples/webcamtexture.html">source</a>.
It reads the webcam thru getUserMedia and put it in a texture.</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it manually. Just do</p>

<p>```html</p>

<script src='threex.videotexture.js'></script>


<p>```</p>

<p>You can install with <a href="http://bower.io/">bower</a>.</p>

<p><code>bash
bower install threex.videotexture
</code></p>

<p>then you add that in your html</p>

<p>```html</p>

<script src="bower_components/threex.videotexture/threex.videotexture.js"></script>


<p>```</p>

<h1>How To Use it</h1>

<h2>threex.videotexture.js</h2>

<p>First you instanciate the texture itself</p>

<p>```javascript
// create the videoTexture
var videoTexture= new THREEx.VideoTexture('videos/sintel.ogv')
updateFcts.push(function(delta, now){</p>

<pre><code>// to update the texture are every frame
videoTexture.update(delta, now)
</code></pre>

<p>})
```</p>

<p>Then you use it in a mesh like this.</p>

<p>```javascript
// use the texture in a THREE.Mesh
var geometry    = new THREE.CubeGeometry(1,1,1);
var material    = new THREE.MeshBasicMaterial({</p>

<pre><code>map : videoTexture.texture
</code></pre>

<p>});
var mesh    = new THREE.Mesh( geometry, material );
scene.add( mesh );
```</p>

<p>Here is the detailled API:</p>

<ul>
<li><code>videoTexture.video</code>: the video dom element from which the video is used</li>
<li><code>videoTexture.texture</code>: the generated <code>THREE.Texture</code></li>
<li><code>videoTexture.update(delta, now)</code>: update the texture from the video element</li>
<li><code>videoTexture.destroy()</code>: destroy the object</li>
</ul>


<h2>threex.webcamtexture.js</h2>

<p>It will read the webcam using
<a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator.getUserMedia">getUserMedia</a>.
The browser
will likely ask for permissions to the users.
Let's see how to use it. You instanciate the texture itself.</p>

<p>```javascript
var webcamTexture   = new THREEx.WebcamTexture()
updateFcts.push(function(delta, now){</p>

<pre><code>// to update the texture are every frame
webcamTexture.update(delta, now)
</code></pre>

<p>})
```</p>

<p>Then you use it in a mesh</p>

<p>```javascript
// use the texture in a THREE.Mesh
var geometry    = new THREE.CubeGeometry(1,1,1);
var material    = new THREE.MeshBasicMaterial({</p>

<pre><code>map : videoTexture.texture
</code></pre>

<p>});
var mesh    = new THREE.Mesh( geometry, material );
scene.add( mesh );
```</p>

<p>Here is the detailled API:</p>

<ul>
<li><code>videoTexture.video</code>: the video dom element from which the video is used</li>
<li><code>videoTexture.texture</code>: the generated <code>THREE.Texture</code></li>
<li><code>videoTexture.update(delta, now)</code>: update the texture from the video element</li>
<li><code>videoTexture.destroy()</code>: destroy the object</li>
<li><code>THREEx.WebcamTexture.available</code>: true if <code>getUserMedia</code> is available on this
browser, false otherwise.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beautiful Dynamic Laser Beams for Your Space Game with threex.laser Game Extension For Three.js]]></title>
    <link href="http://learningthreejs.com/blog/2014/04/29/beautiful-dynamic-laser-beams-for-your-space-game-with-threex-dot-laser-game-extension-for-three-dot-js/"/>
    <updated>2014-04-29T13:57:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2014/04/29/beautiful-dynamic-laser-beams-for-your-space-game-with-threex-dot-laser-game-extension-for-three-dot-js</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.laser/examples/demo.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.laser/master/examples/images/screenshot-threex-laser-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="/blog/categories/threexaday/">'one threex a day' challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.laser">threex.laser</a>.
threex.laser is a <a href="http://www.threejsgames.com/extensions/">threex</a> game extension for three.js. It provides a laser beam effect. Excellent to add in your space game!
The laser itself is fully procedural with generated texture.
The bleeding effect is obtained with additive blending.
threex.laser contains a more elaborate laser which dynamically collides with your scene. It is all done for you and it looks great! On impact, there is a point light and an particle sprite for cooler effects :)</p>

<p><a href='http://jeromeetienne.github.io/threex.laser/examples/demo.html' target='_blank'><input type="button" value='Try Threex.laser Demo Now' /></a></p>

<p>To see the <a href="/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>"A THREEx extension a day, gets your game on its way!"</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/PsxSsdwODRk" frameborder="0" allowfullscreen></iframe>


<h1>Show Don't Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.laser/examples/demo.html">examples/demo.html</a>
[<a href="https://github.com/jeromeetienne/threex.laser/blob/master/examples/demo.html">view source</a>] :
It shows a demo with cooked laser impacting a moving torus.</li>
<li><a href="http://jeromeetienne.github.io/threex.laser/examples/laserbeam.html">examples/laserbeam.html</a>
[<a href="https://github.com/jeromeetienne/threex.laser/blob/master/examples/laserbeam.html">view source</a>] :
It shows a usage of threex.laserbeam.js, it could be the basis for a light sword for example.</li>
<li><a href="http://jeromeetienne.github.io/threex.laser/examples/lasercooked.html">examples/lasercooked.html</a>
[<a href="https://github.com/jeromeetienne/threex.laser/blob/master/examples/lasercooked.html">view source</a>] :
It shows a usage of threex.lasercooked.js. The laser is inside a cube, the cube is
filled with toruses positioned at random, and the laser is colliding with other objects.</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<p>```html</p>

<script src='threex.laserbeam.js'></script>


<script src='threex.lasercooked.js'></script>


<p>```</p>

<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<p><code>bash
bower install threex.laser
</code></p>

<h1>How To Use It</h1>

<h2>threex.laserbeam.js</h2>

<p>It is a raw laser beam using dynamic textures.
Here is to create the laser beam and add it to the scene.</p>

<p><code>javascript
var laserBeam   = new THREEx.LaserBeam()
scene.add(laserBeam)
</code></p>

<h2>threex.lasercooked.js</h2>

<p>It is a laser beam with dynamic collision.
On impacts, to increase realism, there is sprite and point light.
It depends on <code>THREEx.LaserBeam</code> so first create it and add it to the scene</p>

<p><code>javascript
var laserBeam   = new THREEx.LaserBeam()
scene.add(laserBeam)
</code></p>

<p>Then you create the laserCooked based on it. Don't forget to update it in your render loop.</p>

<p>```javascript
var laserCooked = new THREEx.LaserCooked(laserBeam)
onRenderFcts.push(function(delta, now){</p>

<pre><code>// every time you render the scene, update laserCooked
laserCooked.update(delta, now)
</code></pre>

<p>})
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Realistic Physics for Your 3D Game with THREEx.Oimo Game Extension For three.js]]></title>
    <link href="http://learningthreejs.com/blog/2014/04/28/realistic-physics-for-your-3d-game-with-threex-dot-oimo/"/>
    <updated>2014-04-28T17:12:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2014/04/28/realistic-physics-for-your-3d-game-with-threex-dot-oimo</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.oimo/examples/demo.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.oimo/master/examples/images/screenshot-threex-oimo-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="/blog/categories/threexaday/">'one threex a day' challenge</a>. This challenge is to publish every day one game extension for three.js! One per day, every day and that for 2month! In this post, we gonna talk about <a href="http://www.threejsgames.com/extensions/#threex.oimo">threex.oimo</a>.
threex.oimo is a <a href="http://www.threejsgames.com/extensions/">threex game extension for three.js</a>. It provides a <a href="http://en.wikipedia.org/wiki/Game_physics">realistic physics</a> easy to include in your own games. So you can take objects in your game and make them fall as if it was the real world! You can code a <a href="http://en.wikipedia.org/wiki/Pool_(cue_sports)">pool game</a> in a day!
You make rocks fall from the sky in a realistic fashion! Sky is the limit!
It is a warper over the excelent library <a href="https://github.com/lo-th/Oimo.js">oimo.js</a> physics library. <a href="https://plus.google.com/114170447432405103307/posts">lo-th</a>, the author does <a href="http://3dflashlo.wordpress.com/">a lot of crazy things</a>! Be sure to check it out!</p>

<p><a href='http://jeromeetienne.github.io/threex.oimo/examples/demo.html' target='_blank'><input type="button" value='Try Threex.oimo Demo Now'></a></p>

<p>To see the <a href="/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto! <strong>"A THREEx extension a day, gets your game on its way!"</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/wESF0NdMWBE" frameborder="0" allowfullscreen></iframe>


<h1>Show Don't Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.oimo/examples/crates.html">examples/crates.html</a>
[<a href="https://github.com/jeromeetienne/threex.oimo/blob/master/examples/crates.html">view source</a>] :
It shows a slow motion demo of a football hitting a wall of crates.</li>
<li><a href="http://jeromeetienne.github.io/threex.oimo/examples/basic.html">examples/basic.html</a>
[<a href="https://github.com/jeromeetienne/threex.oimo/blob/master/examples/basic.html">view source</a>] :
It shows a bunch of cube and sphere falling on a ground.</li>
<li><a href="http://jeromeetienne.github.io/threex.oimo/examples/demo.html">examples/demo.html</a>
[<a href="https://github.com/jeromeetienne/threex.oimo/blob/master/examples/demo.html">view source</a>] :
It shows a more elaborate rendering. Planets falling down a pyramid in space.</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<p><code>
 &lt;script src='threex.oimo.js'&gt;&lt;/script&gt;
</code></p>

<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<p><code>
bower install threex.oimo
</code></p>

<h1>How To Use It</h1>

<p>Well first you need to create a oimo.js world. You do that like this</p>

<p><code>
var world   = new OIMO.World()
</code></p>

<p>Then, at every frame, update your mesh position/rotation.</p>

<p><code>
world.step()
</code></p>

<p>Then you need to create physics bodies and make them move</p>

<h2>.createBodyFromMesh()</h2>

<p>It will create the <code>IOMO.Body</code> from a three.js mesh you give it.
Currently it support <code>THREE.CubeGeometry</code> and <code>THREE.SphereGeometry</code>. First create a normal <code>THREE.Mesh</code></p>

<p><code>
var geometry    = new THREE.CubeGeometry(1,1,1)
var material    = new THREE.MeshNormalMaterial()
var mesh    = new THREE.Mesh( geometry, material )
scene.add(mesh)
</code></p>

<p>Then you create the <code>IOMO.Body</code> for it</p>

<p><code>
var body    = THREEx.Iomo.createBodyFromMesh(world, mesh)
</code></p>

<h2>.Body2MeshUpdater()</h2>

<p>It will update the position/rotation of a <code>THREE.Mesh</code>
based on a position/rotation of a <code>IOMO.Body</code>. You need
this to see your meshes moves according to oimo.js physics.
First you create the object</p>

<p><code>
var updater = new THREEx.Iomo.Body2MeshUpdater(body, mesh)
</code></p>

<p>Then, at every frame, update your mesh position/rotation.</p>

<p><code>
updater.update()
</code></p>

<h2>.Stats()</h2>

<p>It will display statistic from oimo.js, it may be useful to know what is going on.
It acts very much like
<a href="">mrdoob's stats</a>
or
<a href="">threex.rendererstats</a>.</p>

<p><code>
var oimoStats   = new THREEx.Iomo.Stats(world)
document.body.appendChild(oimoStats.domElement)
</code></p>

<p>Then, at every frame, update it.</p>

<p><code>
oimoStats.update()
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple and Easy To use Crates Models to Get Your Game Started with THREEx.Crates Game Extension For THREE.js]]></title>
    <link href="http://learningthreejs.com/blog/2014/04/25/simple-and-easy-to-use-crates-models-to-get-your-game-started-with-threex-dot-crates-game-extension-for-three-dot-js/"/>
    <updated>2014-04-25T13:44:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2014/04/25/simple-and-easy-to-use-crates-models-to-get-your-game-started-with-threex-dot-crates-game-extension-for-three-dot-js</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.crates/examples/basic.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.crates/master/examples/images/screenshot-threex-crates-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="/blog/categories/threexaday/">'one threex a day' challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.crates">threex.crates</a>.
threex.crates is a <a href="http://www.threejsgame.com/extensions/">threex game extension for three.js</a>.
It provides <a href="http://en.wikipedia.org/wiki/Crate">crates</a> models, 3 of them to be accurate.
Yeah you heard me, this is only boxes of wood. Why doing an extension for that?
Well, because crates are like a myth in 3d graphics, we put them everywhere.
So if you need crates to easily put in your game, you know where to find them now :)</p>

<p><a href='http://jeromeetienne.github.io/threex.crates/examples/basic.html' target='_blank'><input type="button" value='Try Threex.crates Demo Now' /></a></p>

<p>To see the <a href="/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>"A THREEx extension a day, gets your game on its way!"</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/zEmGzBc8nSY" frameborder="0" allowfullscreen></iframe>


<h1>Show Don't Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.crates/examples/basic.html">examples/basic.html</a>
[<a href="https://github.com/jeromeetienne/threex.crates/blob/master/examples/basic.html">view source</a>] :
It shows all the balls on a single screen.</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<p>```html</p>

<script src='threex.crates.js'></script>


<p>```</p>

<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<p><code>bash
bower install threex.crates
</code></p>

<h1>How To Use It</h1>

<p>To create a crate0, just do</p>

<p><code>
var mesh = THREEx.Crates.createCrate0()
scene.add(mesh)
</code></p>

<p>To create a crate1, just do</p>

<p><code>
var mesh = THREEx.Crates.createCrate1()
scene.add(mesh)
</code></p>

<p>To create a crate2, just do</p>

<p><code>
var mesh = THREEx.Crates.createCrate2()
scene.add(mesh)
</code></p>
]]></content>
  </entry>
  
</feed>
