<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sparks.js | Learning Three.js]]></title>
  <link href="http://learningthreejs.com/blog/categories/sparks-dot-js/atom.xml" rel="self"/>
  <link href="http://learningthreejs.com/"/>
  <updated>2014-05-09T14:03:11+02:00</updated>
  <id>http://learningthreejs.com/</id>
  <author>
    <name><![CDATA[Jerome Etienne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Particles: Online Editor for Sparks.js]]></title>
    <link href="http://learningthreejs.com/blog/2011/12/19/particles-online-editor-for-sparks-js/"/>
    <updated>2011-12-19T12:11:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2011/12/19/particles-online-editor-for-sparks-js</id>
    <content type="html"><![CDATA[<p>This post is the second of our <a href="/blog/categories/particles">serie on particles</a>.
It presents
<a href="https://github.com/jeromeetienne/sparkseditor">sparkseditor</a>
, an online editor for
<a href="https://github.com/zz85/sparks.js">sparks.js</a>
with
<a href="https://github.com/mrdoob/three.js/">three.js</a>.
In a few word, it is a webpage which provide an text editor
with a
<a href="https://github.com/zz85/sparks.js">sparks.js</a>
effect.
You got the code in the editor
and
you see <em>live</em> the resulting particles effect.
I like this <em>live</em> aspect a lot :)
I think it makes your design more direct, lower latency, less overhead.
More creative in a way.
<a href="http://jeromeetienne.github.com/sparkseditor/">Try it out</a>.</p>

<p>This editor has been made to lower the barrier of entry on
<a href="https://github.com/zz85/sparks.js">sparks.js</a>
with
<a href="https://github.com/mrdoob/three.js/">three.js</a>
particles.
The UI is rather simple and obvious. You can find a small presentation in the
screencast below.</p>

<!-- more -->




<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/nu00FhIW5bc?hl=en&fs=1" frameborder="0" allowfullscreen></iframe>
</center>


<h2>Live editor rocks</h2>

<p><a href="http://jeromeetienne.github.com/sparkseditor/">Sparkseditor</a>
is widely inpired by
<a href="http://glsl.heroku.com/e">glsl editor</a>
from
<a href="http://mrdoob.com/">mrdoob</a>
and
<a href="http://www.iquilezles.org/apps/shadertoy/">shadertoy</a>
from
<a href="http://www.iquilezles.org/">Inigo Quilez</a>.
On the same vibe,
<a href="http://lea.verou.me/">lea verou</a>
recently
released
<a href="http://lea.verou.me/2011/12/introducing-dabblet-an-interactive-css-playground/">dablet</a>,
an online editor for
<a href="http://en.wikipedia.org/wiki/Cascading_Style_Sheets">css</a>.
There is a clear trend here...
What is it about those live editors ?
A live editor produces a result immediatly.
This helps design your effect faster.
Be light on your foot kindof style.
Very agile way to design.</p>

<p>Additionally, it is easy to share with others because we have <em>bookmarkability</em>.
We do that by storing state in url.
On the down side, it makes super long+ugly urls...
<a href="http://en.wikipedia.org/wiki/URL_shortening">url shortening</a>
helps us reduces this issue.
In our case, we use
<a href="https://bitly.com/">bitly</a>
service.</p>

<p>This editor is purely static files.
No specific server to run, no need to admin and no risk to go offline.
Oh and by the way i dont not even have to pay for hosting this application.
I think it shows html5 in all its power.
The web is becoming something real nice :) html5 i love you!</p>

<h2>conclusion</h2>

<p>Under the hood,
<a href="https://github.com/jeromeetienne/sparkseditor">sparkseditor</a>
uses
<a href="https://github.com/jeromeetienne/threex/blob/master/threex.sparks.js">threex.sparks.js</a>, a
<a href="https://github.com/jeromeetienne/threex">threex</a>
helper, to make
<a href="https://github.com/zz85/sparks.js/">sparks.js</a>
even easier to use.
This helper will be the subject of a future post of our
<a href="/blog/categories/particles">particles series</a>.</p>

<p>The source is open-source under
<a href="https://github.com/jeromeetienne/sparkseditor/blob/master/MIT-LICENSE.txt">MIT</a>.
You can get it in its <a href="https://github.com/jeromeetienne/sparkseditor">git repository</a>.
If you hit bugs, fill issues on github.
Feel free to fork and modify it!
That's all folks, have fun :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Particles: Introduction to Sparks.js]]></title>
    <link href="http://learningthreejs.com/blog/2011/12/14/particles-introduction-to-sparks-js/"/>
    <updated>2011-12-14T12:08:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2011/12/14/particles-introduction-to-sparks-js</id>
    <content type="html"><![CDATA[<p>This post is the first of a <a href="/blog/categories/particles">serie on particles</a>.
It specifically is about
<a href="https://github.com/zz85/sparks.js">sparks.js</a>.
<em>sparks.js</em> is lightweight 3d
<a href="http://en.wikipedia.org/wiki/Particle_system">Particle system</a>
in javascript, for use with
<a href="https://github.com/mrdoob/three.js/">three.js</a>
and
<a href="https://github.com/sole/tween.js">tween.js</a>.
It is from
<a href="http://www.lab4games.net/zz85/blog/">zz85</a>
who already did
<a href="http://mrdoob.github.com/three.js/examples/webgl_geometry_text.html">3D text</a>
and
<a href="http://mrdoob.github.com/three.js/examples/webgl_geometry_subdivison.html">Catmull Clark subdivision</a>.
a productive guy :)</p>

<p>The <a href="http://mrdoob.github.com/three.js/examples/webgl_particles_shapes.html">demo</a>
below is one of the many <a href="https://github.com/mrdoob/three.js/tree/master/examples">three.js examples</a>.
While im on it, the <a href="https://github.com/mrdoob/three.js/tree/master/examples">example directory</a> is a gold mine.
Go dig in it to understand how to code three.js :)
Back to the point, this
<a href="http://mrdoob.github.com/three.js/examples/webgl_particles_shapes.html">demo</a>
is rather cool no ?
You want to do the same ?
During this short post, let me walk you walk thru the code for particles in this example.</p>

<!-- more -->




<iframe src="http://mrdoob.github.com/three.js/examples/webgl_particles_shapes.html" width="100%" height="420" frameborder="0"></iframe>


<h2>Lets Get Started</h2>

<p>So lets see how to use it. First step, you download
<a href="https://raw.github.com/zz85/sparks.js/master/Sparks.js">sparks.js</a>
from
<a href="https://github.com/zz85/sparks.js">its github</a>.
Then include it in your own code.</p>

<p>```html</p>

<pre><code>&lt;script src="Sparks.js"&gt;&lt;/script&gt;
</code></pre>

<p>```</p>

<p>First a few words on what is a <a href="http://en.wikipedia.org/wiki/Particle_system">particle system</a>.
It is usually composed of 2 big parts: the <em>emitter</em> and the <em>particle</em> itself.
Emitter creates particles.
Particles are usually smallish objects on the screen.
As you got many particles at the same time, they appears a single mass.</p>

<!-- more -->


<h2>Let's create an emitter</h2>

<p>First we create the emitter like this.
 <code>emitter</code> is the main object we will play with.</p>

<p>```javascript</p>

<pre><code>var counter = new SPARKS.SteadyCounter( 500 );
var emitter = new SPARKS.Emitter( counter );
</code></pre>

<p>```</p>

<p> <code>counter</code> controls how frequently particles are created. Here it will
emit 500 particles per seconds.
Now let's start emit particles.</p>

<p>```javascript</p>

<pre><code>emitter.start();
</code></pre>

<p>```</p>

<p>Sparks.js has a very flexible core.
It mainly uses two stacks of functions.
<em>Initializers</em> is the stack run at the creation of a particle.
<em>Actions</em> is another stack which is run at every step of a particle life.
Those functions are run in order.
Up to you to configure them to fit your needs.
You can easily code your own <em>initializer</em> or <em>action</em>.
Dont worry it got a bunch of predefined ones.</p>

<h2>Let's initialize</h2>

<p>Lets me walk you thru the ones used in our example. The whole stack is below.
 <code>emitter.addInitializer()</code> to push a new initializer, and <code>emitter.removeInitializer()</code>
to remove it, not too hard :)</p>

<p>```javascript</p>

<pre><code>emitterpos = new THREE.Vector3( 0, 0, 0 );
emitter.addInitializer( new SPARKS.Position( new SPARKS.PointZone( emitterpos ) ) );
emitter.addInitializer( new SPARKS.Lifetime( 1, 15 ));
var vector = new THREE.Vector3( 0, -5, 1 );
emitter.addInitializer( new SPARKS.Velocity( new SPARKS.PointZone( vector ) ) );
</code></pre>

<p>```</p>

<p> <code>SPARKS.Position(zone)</code> initializer set the original position of the particle.
A <code>zone</code> provide a location in space.
 <code>new SPARKS.PointZone( emitterpos )</code> means the particles will always start from this specific point in space.
It is possible to have other zones.
For example, <code>SPARKS.LineZone( startVector3, endVector3 )</code> represents a line between 2 points, so
your particle would start anywhere on this line.</p>

<p> <code>SPARKS.Lifetime(mintime, maxtime)</code> initializer set particle's lifetime.
You can specify a range and a random value will be assigned.
Don't forget to add <code>SPARKS.Age</code> action to handle its lifetime.
And the last one.
 <code>SPARKS.Velocity(zone)</code> set particle's velocity based on a <code>zone</code> location.
The initializer stack is setup the particle at the begining of its life.
Let's see what happen during this life.</p>

<h2>Let's do some actions</h2>

<p>Actions are performed at every step of a particle life.
Same as with initializers, <code>emitter.addAction()</code> to push a new action,
 <code>emitter.removeAction()</code> to remove it.
For our examples the whole action stack is this.</p>

<p>```javascript</p>

<pre><code>emitter.addAction( new SPARKS.Age() );
emitter.addAction( new SPARKS.Accelerate( 0, 0, -50 ) );
emitter.addAction( new SPARKS.Move() );
emitter.addAction( new SPARKS.RandomDrift( 90, 100, 2000 ) );
</code></pre>

<p>```</p>

<p>Now lets details it.
We have already seen <code>SPARKS.Age()</code>. It is handle the lifetime of each particle.
 <code>SPARKS.Accelerate(x,y,z)</code> changes the velocity by adding a fixed amount at every step.
This one produces a gravity effect with a negative <code>y</code>.
 <code>SPARKS.Move()</code> makes the particles move in our 3D space.
 <code>SPARKS.RandomDrift(x,y,z)</code> changes the velocity by adding a random amount at every step.</p>

<h2>Conclusion</h2>

<p>I hope this short introduction got you excited about
<a href="https://github.com/zz85/sparks.js/">sparks.js</a>.
Next posts on the
<a href="/blog/categories/particles">particle series</a>
may be a UI editor, stay tuned!
I find sparks.js clean and flexible.
Flexibility is very important for particles.
It helps provide a wide variety of effect in your games/demos.
For more informations and authoritative answer, see the
<a href="https://github.com/zz85/sparks.js/">github repository</a>.
That's all for today folks, have fun.</p>
]]></content>
  </entry>
  
</feed>
