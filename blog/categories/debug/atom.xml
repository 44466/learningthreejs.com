<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debug | Learning Three.js]]></title>
  <link href="http://learningthreejs.com/blog/categories/debug/atom.xml" rel="self"/>
  <link href="http://learningthreejs.com/"/>
  <updated>2015-08-25T13:37:31+01:00</updated>
  <id>http://learningthreejs.com/</id>
  <author>
    <name><![CDATA[Jerome Etienne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Three.js Inspector in Chrome Devtools: v1.2.5 Released]]></title>
    <link href="http://learningthreejs.com/blog/2015/08/13/three-dot-js-inspector-in-chrome-devtools-v1-dot-2-5-released/"/>
    <updated>2015-08-13T14:33:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2015/08/13/three-dot-js-inspector-in-chrome-devtools-v1-dot-2-5-released</id>
    <content type="html"><![CDATA[<p>Hey everybody,</p>

<p>We recently <a href="http://learningthreejs.com/blog/2015/07/30/three-dot-js-inspector-in-chrome-devtools/">announced three.js inspector</a>. This chrome devtools extension allows you to inspect the three.js within your page, directly from devtools.</p>

<p>It is also a great debugging tool! With it you can learn how three.js demos are made, interact with them and modify their parameters. You can grab it on <a href="https://chrome.google.com/webstore/detail/threejs-inspector/dnhjfclbfhcbcdfpjaeacomhbdfjbebi">chrome web store</a> and give it a try. It is definitely fun to work on :) We had some long week ends with sleepless nights, and now the <a href="https://chrome.google.com/webstore/detail/threejs-inspector/dnhjfclbfhcbcdfpjaeacomhbdfjbebi">Three.js Inspector 1.2.5</a> is released !</p>

<h3><a href="https://chrome.google.com/webstore/detail/threejs-inspector/dnhjfclbfhcbcdfpjaeacomhbdfjbebi">Install THREE.js Inspector</a></h3>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/q-c0i0nQn5M" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<p>Some of these new features include cool stuff with textures, material shading, shadow casting and practical exporting and tuning options. We will be writing posts to highlight each of these new features. Here is the ChangeLog with the features recently added to version <a href="https://chrome.google.com/webstore/detail/threejs-inspector/dnhjfclbfhcbcdfpjaeacomhbdfjbebi">Three.js Inspector 1.2.5</a>, revised and improved.</p>

<h3>ChangeLog</h3>

<ul>
<li>massive cleanup of the scene capture code</li>
<li>added range limit to material.opacity</li>
<li>added ability to create a texture from material popup menu</li>
<li>added export-in-console for material and geometry</li>
<li>added upload support for texture</li>
<li>added dragdrop support for texture</li>
<li>added "about" tab</li>
<li>added texture.sourceFile it is now possible to change texture

<ul>
<li>external texture needs to be on a CORS server</li>
</ul>
</li>
<li>added 'visibility toggle'/'export to console' and better css on treeview</li>
<li>added an object is now relative to the selected parent

<ul>
<li>better controls over the scene tree when you build something</li>
</ul>
</li>
<li>added support for face material</li>
<li>added texture.anisotropy</li>
<li>added texture handling - repeat/offset/wrapS/wrapT</li>
<li>added help button linking to three.js documentation

<ul>
<li>good for learning</li>
</ul>
</li>
<li>added object3d.castShadow / receiveShadow</li>
<li>added material.shadding</li>
<li>added left/right/top/bottom for ortho camera</li>
<li>fixed Sprites crash + castShadow support</li>
<li>added viewVertices + viewFaces in geometry menu</li>
<li>added a Config.js and save autoRefresh</li>
<li>added bounding sphere in geometry</li>
<li>added linewidth, dashSize in material</li>
<li>added auto refresh to on by default</li>
<li>fixed bug in case of typedGeometry, PointCloud</li>
<li>'export in console' in object3d inspector popup menu</li>
<li>implemented a tab for setting</li>
<li>added autoRefresh setting to periodically refresh the inspector</li>
<li>added the 'no' panels for a better visibility in the UI

<ul>
<li>simply show it with a object3d selected and without</li>
</ul>
</li>
<li>uniform live tuning for shader material</li>
<li>implemented better number tuning with the mouse.

<ul>
<li>if shift is pressed, it goes 10 times faster</li>
<li>it meta is pressed, it goes 100 times faster</li>
<li>if shift+meta are pressed, it goes 1000 times faster</li>
</ul>
</li>
</ul>


<p>Do not hesitate to try it out. If you have any suggestions, feedback or questions please contact us.</p>

<p>Thanks for sharing this project :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three.js Inspector in Chrome Devtools]]></title>
    <link href="http://learningthreejs.com/blog/2015/07/30/three-dot-js-inspector-in-chrome-devtools/"/>
    <updated>2015-07-30T13:21:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2015/07/30/three-dot-js-inspector-in-chrome-devtools</id>
    <content type="html"><![CDATA[<p>Hey guys,</p>

<p>Recently people started to experiment with three.js and Chrome devtools. The excellent <a href="https://twitter.com/thespite">@thespite</a> first did <a href="https://github.com/spite/ShaderEditorExtension">Shader Editor Extension</a> and then <a href="https://twitter.com/thespite/status/624256879766712320">Three.js Editor Extension</a>. <a href="https://twitter.com/mrdoob">@mrdoob</a> did it too <a href="https://twitter.com/mrdoob/status/616042217464012800">here</a> where he links directly to the <a href="http://threejs.org/editor">three.js editor</a> itself. The goal is to make an extension which allows to inspect your page when you are debugging three.js.</p>

<p>All that is very early work, but the concept seems really promising. It will allow to interact with almost all three.js demos out there. It is a great tool to debug your own work, or to understand how a demo is done. You can even use it to fine tune your parameters.</p>

<p>I loved it so I decided to give it a shot. I forked @thespite work and looked at it over the last weekend. I reused the UI layer from the three.js editor, improved the UI a bit, and applied it to the Chrome Dev tools. The implementation still clearly has some quirks, but I love the concept. I believe it can be a very strong tool to debug three.js.</p>

<p>You can find the <a href="https://chrome.google.com/webstore/detail/threejs-inspector/dnhjfclbfhcbcdfpjaeacomhbdfjbebi">Three.js Inspector Extension</a> on chrome app store and play with it.</p>

<h3><a href="https://chrome.google.com/webstore/detail/threejs-inspector/dnhjfclbfhcbcdfpjaeacomhbdfjbebi">Install THREE.js Inspector</a></h3>

<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/0GQlp9IdLjM" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging With Chrome's Canvas Inspection]]></title>
    <link href="http://learningthreejs.com/blog/2013/04/05/debugging-with-chromes-canvas-inspection/"/>
    <updated>2013-04-05T09:15:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2013/04/05/debugging-with-chromes-canvas-inspection</id>
    <content type="html"><![CDATA[<p>This post will present to you how to debug your webgl with  chrome's canvas inspection.
This is an experimental feature available in chrome devtools.
It gives you all the WebGL calls which are done in your webgl scene.
So it helps if you actually know some raw WebGL :)
In anycase you can see it being replayed call by calls, which is uber cool.</p>

<center>
  <iframe width="425" height="349" src="http://www.youtube.com/embed/837O1YloCRc" frameborder="0" allowfullscreen></iframe>
</center>




<!-- more -->


<h2>Let's get started</h2>

<p>As it is an experimental feature, you first need to enable it.
First let's enable devtool experiment: enter "chrome://flags" url
in your chrome location bar. There you enable "Enable Developer Tools experiments"
and relaunch chrome.</p>

<p><img src="/data/2013-04-05-debugging-with-chromes-canvas-inspection/screenshots/devtools-enable-experiments.png"></p>

<p><img class="right" src="/data/2013-04-05-debugging-with-chromes-canvas-inspection/screenshots/devtools-settings-gear.png" width="160" height="120"></p>

<p>Now that you got the Developer Tools Experiments enabled, let's enable
'Canvas Inpection' in particular. Click on the little gear on bottom right
of devtools. The one you can see on the right.</p>

<p><img src="/data/2013-04-05-debugging-with-chromes-canvas-inspection/screenshots/devtools-settings-panel.png"></p>

<p>It will open the settings panel you see above.
Now, select experiment from the left menu, enable 'Canvas Inpection' and you are done.
Rather clumsy but this is an experiment after all :)</p>

<h2>How to use it</h2>

<p>Now that it is enabled, let's see how to use it.
First let's go on the "profile" tab of devtools. We can see "Capture Canvas Frame", this is the one we gonna use.</p>

<p><img src="/data/2013-04-05-debugging-with-chromes-canvas-inspection/screenshots/devtools-capture-canvas-frame.png"></p>

<p>Let's enable it and load a page with WebGL.
As an example, i will use <a href="http://mmo3d.jit.su/montains">mmo3d</a>. It is a multiplayer game
in webgl. It is very hackable so other people can easily do their own world. Let's talk about
that later. For now, lets click 'start' and capture a frame :)</p>

<h2>Captured frames</h2>

<p>After that you should obtain the following. You got the actual game on the left.
and you recognise developer tools on the right.</p>

<p><img src="/data/2013-04-05-debugging-with-chromes-canvas-inspection/screenshots/devtools-capture-example-resized.png"></p>

<p>For every frame you capture, you will get a trace log of each webgl call which has been done during this frame.
Above there is a replay window where you can actually see the scene as it is drawn step by step.
Thus you can check the order of your calls. It can be usefull when you debug transparency for example.
Watch for the draw calls, they got huge overhead and should be limited if possible.</p>

<h2>Conclusion</h2>

<p>As it is pure webgl, and not at three.js level, it helps if you know raw WebGL. For that, i suggest
you to read a book on the subject. Personnaly i
like
<a href="http://www.amazon.com/WebGL-Beginners-Guide-Diego-Cantor/dp/184969172X">"WebGL Beginner's Guide"</a>
by
<a href="http://blog.tojicode.com/">Brandon Jones</a>.
WebGL may be complex at times, and having cool debug tools help being more efficient.
You can see the excelent paul irish doing a
<a href="http://www.youtube.com/watch?v=FY5iiuQRyEE&amp;feature=youtu.be&amp;t=8m23s">presentation</a>
what you can do with canvas inspector.</p>

<p>That's all folks. Have Fun!</p>
]]></content>
  </entry>
  
</feed>
