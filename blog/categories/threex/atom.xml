<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: threex | Learning Three.js]]></title>
  <link href="http://learningthreejs.com/blog/categories/threex/atom.xml" rel="self"/>
  <link href="http://learningthreejs.com/"/>
  <updated>2014-05-15T14:02:00+02:00</updated>
  <id>http://learningthreejs.com/</id>
  <author>
    <name><![CDATA[Jerome Etienne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Perlin Terrain Procedural Generation For Your Game With threex.terrain]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/15/perlin-terrain-procedural-generation-for-your-game-with-threex-dot-terrain/"/>
    <updated>2014-05-15T20:21:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/15/perlin-terrain-procedural-generation-for-your-game-with-threex-dot-terrain</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.terrain/examples/planegeometry.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.terrain/master/examples/images/screenshot-threex-terrain-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/">'one threex a day' challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.terrain">threex.terrain</a>.
threex.terrain is a <a href="http://www.threejsgames.com/extensions/">three.js games extension</a> which provides a procedural terrain generated from a simplex noise, the <a href="http://en.wikipedia.org/wiki/Perlin_noise">Perlin noise</a>. As you can see you have different zones that make the terrain more varied, the blue zone represents water, the green one represents trees or grass and the white zone at the mountain top is snow. Imagine your video game character walking on these 3D mountains or flying over them, pretty cool eh? You can take him through river, forest, wind and snow if you want ;)</p>

<p><a href='http://jeromeetienne.github.io/threex.terrain/examples/planegeometry.html' target='_blank'><input type="button" value='Try Threex.terrain Demo Now' /></a></p>

<p>To see the <a href="/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>"A THREEx extension a day, gets your game on its way!"</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/z_73WDzgBsA" frameborder="0" allowfullscreen></iframe>


<h1>Show Don't Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.terrain/examples/canvas.html">examples/canvas.html</a>
[<a href="https://github.com/jeromeetienne/threex.terrain/blob/master/examples/canvas.html">view source</a>] :
It shows a perlin terrain in a canvas 2d.</li>
<li><a href="http://jeromeetienne.github.io/threex.terrain/examples/planegeometry.html">examples/planegeometry.html</a>
[<a href="https://github.com/jeromeetienne/threex.terrain/blob/master/examples/planegeometry.html">view source</a>] :
It displays the terrain in 3d with three.js.</li>
<li><a href="http://jeromeetienne.github.io/threex.terrain/examples/height.html">examples/height.html</a>
[<a href="https://github.com/jeromeetienne/threex.terrain/blob/master/examples/height.html">view source</a>] :
It show how to test the height in a 3d terrain</li>
<li><a href="http://jeromeetienne.github.io/threex.terrain/examples/minecraft.html">examples/minecraft.html</a>
[<a href="https://github.com/jeromeetienne/threex.terrain/blob/master/examples/minecraft.html">view source</a>] :
It show a minecraft character walking on perlin terrain</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<p>```html</p>

<script src='threex.terrain.js'></script>


<p>```</p>

<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<p><code>bash
bower install threex.terrain
</code></p>

<h1>How To Use It</h1>

<p>To allocate a heightMap with a width of 100 and a depth of 200, do</p>

<p><code>javascript
var heightMap   = THREEx.Terrain.allocateHeightMap(100, 200)
</code></p>

<p>To generate some heights based on a simplex/perlin noise, do</p>

<p><code>javascript
THREEx.Terrain.simplexHeightMap(heightMap)
</code></p>

<p>If you want to display it in three.js, built a <code>THREE.PlaneGeometry</code> for it</p>

<p><code>javascript
// build the geometry
var geometry    = THREEx.Terrain.heightMapToPlaneGeometry(heightMap)
// init the material
var material    = new THREE.MeshPhongMaterial();
// create the mesh and add it to the scene
var mesh    = new THREE.Mesh( geometry, material );
scene.add( mesh );
</code></p>

<p>To get the ground height of this mesh, use the following</p>

<p><code>javascript
var y = THREEx.Terrain.planeToHeightMapCoords(heightMap, mesh, x, z)
</code></p>

<p>It is possible to enhance the rendering of this heightmap with some vertexColor, and a
smoother shading if you want.</p>

<p>```
// build the geometry
var geometry    = THREEx.Terrain.heightMapToPlaneGeometry(heightMap)
// set the vertexColor in the geometry
THREEx.Terrain.heightMapToVertexColor(heightMap, geometry)
// init the material
var material    = new THREE.MeshPhongMaterial({</p>

<pre><code>shading     : THREE.SmoothShading,
vertexColors    : THREE.VertexColors,
</code></pre>

<p>});
// create the mesh and add it to the scene
var mesh    = new THREE.Mesh( geometry, material );
scene.add( mesh );
```</p>

<p>To get the height with heightMap coordinates, just use</p>

<p><code>javascript
var y   = THREEx.Terrain.heightMapToHeight(heightMap, x, z)
</code></p>

<p>If you want to display the result in a canvas 2d, just do</p>

<p><code>javascript
var canvas  = THREEx.Terrain.heightMapToCanvas(heightMap)
document.body.appendChild(canvas)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Procedural Generated Pool Balls For Your Three.js Pool Game with threex.poolball]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/14/procedural-generated-pool-balls-for-your-three-dot-js-pool-game-with-threex-dot-poolball/"/>
    <updated>2014-05-14T20:21:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/14/procedural-generated-pool-balls-for-your-three-dot-js-pool-game-with-threex-dot-poolball</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.poolball/examples/demo.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.poolball/master/examples/images/screenshot-threex-poolball-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/">'one threex a day' challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.poolball">threex.poolball</a>.
threex.poolball is a <a href="http://www.threejsgames.com/extensions/">three.js games extension</a> which helps you build pool balls. It provides dynamically generated models of pool balls, so no model download needed. It may be fun to play with when you start with three.js, funnier than a plain sphere for sure :) You can use it for your bar games, having  your characters bet when playing pool, or even your <a href="http://jeromeetienne.github.io/marbleTable/">Marble Table</a> games, as I did, adding cool granular sounds when the balls roll.</p>

<p><a href='http://jeromeetienne.github.io/threex.poolball/examples/demo.html' target='_blank'><input type="button" value='Try Threex.poolball Demo Now' /></a></p>

<p>To see the <a href="/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>"A THREEx extension a day, gets your game on its way!"</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/u_hjrVazLYo" frameborder="0" allowfullscreen></iframe>


<h1>Show Don't Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.poolball/examples/basic.html">examples/basic.html</a>
[<a href="https://github.com/jeromeetienne/threex.poolball/blob/master/examples/basic.html">view source</a>] :
It shows a basic usage of this extension</li>
<li><a href="http://jeromeetienne.github.io/threex.poolball/examples/demo.html">examples/demo.html</a>
[<a href="https://github.com/jeromeetienne/threex.poolball/blob/master/examples/demo.html">view source</a>] :
It shows multiple pool balls setup like on a pool table :)</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<p>```html</p>

<script src='threex.poolball.js'></script>


<p>```</p>

<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<p><code>bash
bower install threex.poolball
</code></p>

<h1>How To Use It</h1>

<p>Here is the default usages</p>

<p><code>
var mesh    = THREEx.createPoolBall();
scene.add(mesh)
</code></p>

<p>this is with custom arguments</p>

<p>```
var mesh    = THREEx.createPoolBall({</p>

<pre><code>ballDesc    : '0',  // the text which gonna be written on the ball
stripped    : true, // true if the ball must be stripped, false otherwise
textureW    : 512   // the width/height of the created texture for this ball
</code></pre>

<p>});
scene.add(mesh)
```</p>

<p>Some ball description are already done.</p>

<ul>
<li><code>cue</code> will return an unstripped white ball</li>
<li><code>black</code> will return an unstripped black ball</li>
<li><code>1</code> to <code>9</code> will assign the official colors for <a href="http://en.wikipedia.org/wiki/Nine-ball">nine-ball</a> pool</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy Way to Include Transparency In Your Three.js Game with threex.transparency]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/13/easy-way-to-include-transparency-in-your-three-dot-js-game-with-threex-dot-transparency/"/>
    <updated>2014-05-13T20:21:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/13/easy-way-to-include-transparency-in-your-three-dot-js-game-with-threex-dot-transparency</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.transparency/examples/basic.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.transparency/master/examples/images/screenshot-threex-transparency-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/">'one threex a day' challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.transparency">threex.transparency</a>.
threex.transparency is a <a href="http://www.threejsgames.com/extensions/">three.js games extension</a> to easily handle transparency. Transparency is a tricky business in Webgl, but this extension makes it approachable. It is worth trying. Do you remember the transparency between the leaves of a tree in 3D games? Well, with this extension you will be able to add it to your own game. You can also make clouds appear transparent in the sky you have created for your game. It is easy to include and it gives a nice polish finish, a professional touch.</p>

<p><a href='http://jeromeetienne.github.io/threex.transparency/examples/basic.html' target='_blank'><input type="button" value='Try Threex.transparency Demo Now' /></a></p>

<p>To see the <a href="/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>"A THREEx extension a day, gets your game on its way!"</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/mP_8EHnZUTo" frameborder="0" allowfullscreen></iframe>


<h1>Show Don't Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.transparency/examples/basic.html">examples/basic.html</a>
[<a href="https://github.com/jeromeetienne/threex.transparency/blob/master/examples/basic.html">view source</a>] :
It shows a basic usage of this extension.</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<p>```html</p>

<script src='threex.transparency.js'></script>


<p>```</p>

<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<p><code>bash
bower install threex.transparency
</code></p>

<h2>How To Use It ?</h2>

<p>The algo is well described in this
<a href="http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-10-transparency/">opengl tutorial about transparency</a>. We just adapt it to fit three.js.
First you setup all the objects that you want to be transparent</p>

<p><code>
THREEx.Transparency.init(objects)
</code></p>

<p>It will change the <code>THREE.Material</code> to make it support transparent.
Second you need to update all your objects at every frame.</p>

<p><code>
THREEx.Transparency.update(objects, camera)
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Live Cube Maps Reflections In Your Three.js Game With threex.cubecamera]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/12/live-cube-maps-reflections-in-your-three-dot-js-game-with-threex-dot-cubecamera/"/>
    <updated>2014-05-12T20:20:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/12/live-cube-maps-reflections-in-your-three-dot-js-game-with-threex-dot-cubecamera</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.cubecamera/examples/demo.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.cubecamera/master/examples/images/screenshot-threex-cubecamera-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/">'one threex a day' challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.cubecamera">threex.cubecamera</a>.
threex.cubecamera is a <a href="http://www.threejsgames.com/extensions/">three.js games extension</a> which provides a helper for cube cameras. It is very useful when a given object must reflect a texture cube live. Just look at it, you can see the reflection as clear as a real life mirror! You can give your texture the color you want, for example in the demo I created a "gold" sphere to give it a shinier look. Be careful though, this requires 6 renderings of the scene every time you update it. It becomes expensive fast.</p>

<p><a href='http://jeromeetienne.github.io/threex.cubecamera/examples/demo.html' target='_blank'><input type="button" value='Try Threex.cubecamera Demo Now' /></a></p>

<p>To see the <a href="/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>"A THREEx extension a day, gets your game on its way!"</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/tUnyNECDgFE" frameborder="0" allowfullscreen></iframe>


<h1>Show Don't Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.cubecamera/examples/basic.html">examples/basic.html</a>
[<a href="https://github.com/jeromeetienne/threex.cubecamera/blob/master/examples/basic.html">view source</a>] :
It shows the most basic usage of this extension.</li>
<li><a href="http://jeromeetienne.github.io/threex.cubecamera/examples/demo.html">examples/demo.html</a>
[<a href="https://github.com/jeromeetienne/threex.cubecamera/blob/master/examples/demo.html">view source</a>] :
It shows a little bit shinier demo.</li>
<li><a href="http://jeromeetienne.github.io/threex.cubecamera/examples/discoball.html">examples/discoball.html</a>
[<a href="https://github.com/jeromeetienne/threex.cubecamera/blob/master/examples/discoball.html">view source</a>] :
It shows a little bit shinier discoball.
TODO to port in its own demo.
It doesnt even use live rendering.
Use the "minecraft goes party" from nextgamefrontier talk.</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<p>```html</p>

<script src='threex.cubecamera.js'></script>


<p>```</p>

<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<p><code>bash
bower install threex.cubecamera
</code></p>

<h1>How To Use It</h1>

<p>First you need to create a classic mesh, the one which gonna reflect the live texture cube.
In this example, we gonna create sphere with the color 'gold' like this.</p>

<p>```
var geometry    = new THREE.SphereGeometry(0.5, 32, 16)
var material    = new THREE.MeshPhongMaterial({</p>

<pre><code>color   : 'gold'
</code></pre>

<p>})
var mesh    = new THREE.Mesh(geometry, material)
scene.add( mesh ) <br/>
```</p>

<p>Now we needs to create the cube camera which gonna update the texture cube live.
We do that like this.</p>

<p><code>
var cubeCamera  = new THREEx.CubeCamera(mesh)
scene.add(cubeCamera.object3d)
</code></p>

<p>Don't forget to update it when needed (likely at every frame)</p>

<p><code>
cubeCamera.update(renderer, scene)
</code></p>

<p>Now that we got the textureCube, we set the mesh material to reflect this texture cube.</p>

<p><code>
material.envMap = cubeCamera.textureCube
</code></p>

<p>This is it! Now you got the live texture cube on your sphere :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Classical Suzanne Monkey From Blender To Get Your Game Started With threex.suzanne]]></title>
    <link href="http://learningthreejs.com/blog/2014/05/09/classical-suzanne-monkey-from-blender-to-get-your-game-started-with-threex-dot-suzanne/"/>
    <updated>2014-05-09T20:20:00+02:00</updated>
    <id>http://learningthreejs.com/blog/2014/05/09/classical-suzanne-monkey-from-blender-to-get-your-game-started-with-threex-dot-suzanne</id>
    <content type="html"><![CDATA[<p><a href='http://jeromeetienne.github.io/threex.suzanne/examples/basic.html' target='_blank'><img class="right" src="https://raw.githubusercontent.com/jeromeetienne/threex.suzanne/master/examples/images/screenshot-threex-suzanne-512x512.jpg" width="250" height="250"></a>
This is post is part of the <a href="/blog/2014/04/22/one-threex-a-day-gets-your-game-on-its-way-a-challenge/">'one threex a day' challenge</a>.
This challenge is to publish every day one game extension for three.js!
One per day, every day and that for 2month!
In this post, we gonna talk about
<a href="http://www.threejsgames.com/extensions/#threex.suzanne">threex.suzanne</a>.
Suzanne is a classic. She is the blender famous model familiar to all blender users. It is also a <a href="http://www.threejsgames.com/extensions/">three.js games extension</a> extension which provides you with a monkey model. Blender wanted to create a less common test model, so Suzanne was born. She is more precisely a 3D model of a chimpanzee head. It is pretty basic but you can easily add it as a funky animal character and install it in your platform games!</p>

<p><a href='http://jeromeetienne.github.io/threex.suzanne/examples/basic.html' target='_blank'><input type="button" value='Try Threex.suzanne Demo Now' /></a></p>

<p>To see the <a href="/blog/categories/threexaday/">other posts about one threex a day</a> and forget our moto!
<strong>"A THREEx extension a day, gets your game on its way!"</strong></p>

<!-- more -->




<iframe width="420" height="315" src="http://learningthreejs.com//www.youtube.com/embed/RYrAktdkEUo" frameborder="0" allowfullscreen></iframe>


<h1>Show Don't Tell</h1>

<ul>
<li><a href="http://jeromeetienne.github.io/threex.suzanne/examples/basic.html">examples/basic.html</a>
[<a href="https://github.com/jeromeetienne/threex.suzanne/blob/master/examples/basic.html">view source</a>] :
It shows a basic usage of the extension.</li>
</ul>


<h1>How To Install It</h1>

<p>You can install it via script tag</p>

<p>```html</p>

<script src='threex.suzanne.js'></script>


<p>```</p>

<p>Or you can install with <a href="http://bower.io/">bower</a>, as you wish.</p>

<p><code>bash
bower install threex.suzanne
</code></p>

<h1>How To Use It</h1>

<h3>How to load the geometry ?</h3>

<p>```javascript
new THREEx.Suzanne.GeometryLoader(function onLoad(geometry){</p>

<pre><code>// this function is notified when the geometry is actually loaded

// geometry is a THREE.Geometry of suzanne model
</code></pre>

<p>})
```</p>

<h3>How to create a mesh with it ?</h3>

<p>```javascript
new THREEx.Suzanne.GeometryLoader(function onLoad(geometry){</p>

<pre><code>// create a mesh with the geometry
var material    = new THREE.MeshNormalMaterial()
var mesh    = new THREE.Mesh( geometry, material )
// attach mesh to the scene
scene.add(mesh)
</code></pre>

<p>})
```</p>

<p>Sometime it is not desirable to wait for the loading to complete before
adding the object to the scene. To avoid this, we create a container
which will contains the model once loading is completed.
Thanks to the scene graph inheritance, any position/quaternion/scale
changes made on container, will be reported to the children meshes.</p>

<p>```javascript
// create the container
var container   = new THREE.Object3D();
// add the container to the scene without waiting the end of loading
scene.add(container)
// start to load the geometry
new THREEx.Suzanne.GeometryLoader(function onLoad(geometry){</p>

<pre><code>// create a mesh with it
var material    = new THREE.MeshNormalMaterial()
var mesh    = new THREE.Mesh( geometry, material )
// attach mesh to the container
container.add(mesh)
</code></pre>

<p>})
```</p>
]]></content>
  </entry>
  
</feed>
