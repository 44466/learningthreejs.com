<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: experiment | Learning Three.js]]></title>
  <link href="http://learningthreejs.com/blog/categories/experiment/atom.xml" rel="self"/>
  <link href="http://learningthreejs.com/"/>
  <updated>2014-05-07T15:45:43+02:00</updated>
  <id>http://learningthreejs.com/</id>
  <author>
    <name><![CDATA[Jerome Etienne]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dom Events in 3D Space]]></title>
    <link href="http://learningthreejs.com/blog/2012/01/17/dom-events-in-3d-space/"/>
    <updated>2012-01-17T11:56:00+01:00</updated>
    <id>http://learningthreejs.com/blog/2012/01/17/dom-events-in-3d-space</id>
    <content type="html"><![CDATA[<p>Ever dreamed of a <strong>object3d.on('click', function(){ ... });</strong>?</p>

<p>I have :) This post presents a little experiment.
What about implementing the concept of
<a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html">dom events</a>
in 3D Space.
In a web page, a
<a href="http://www.quirksmode.org/dom/events/click.html">click</a>
event is trigger when a user click on a
<a href="http://en.wikipedia.org/wiki/HTML_element">element</a>.
This is common knowledge in web development.
What about having that but in a three.js scene ?
Maybe people will start do 3D user interface with that, who knows.
How great would that be ?!?
So let's do that.</p>

<p><a href="http://jeromeetienne.github.com/threex/examples/threex.domevent/">Try it out</a>.
The demo contains 3 teapots.
Each bind a different type of events.
When the events are triggered, teapots are animated.
Animations are made by <a href="https://github.com/sole/tween.js/">tween.js</a>, a nice js tweening engine
seen in a <a href="/blog/2011/08/17/tweenjs-for-smooth-animation/">previous post</a>.
Play with it to get a feel of it, maybe think about the type of UI you could do in 3D.</p>

<!-- more -->




<center>
    <iframe width="425" height="349" src="http://www.youtube.com/embed/c2KLj8sie9Q?hl=en&fs=1" frameborder="0" allowfullscreen></iframe>
</center>


<h2>Let's Get Started</h2>

<p>First let's include the source.
You download <a href="https://github.com/jeromeetienne/threex/blob/master/threex.domevent.js">threex.domevent.js</a>.
and copy this line in your page.</p>

<p>```html</p>

<pre><code>&lt;script src='threex.domevent.js'&gt;&lt;/script&gt;
</code></pre>

<p>```</p>

<h2>Let's Use It</h2>

<iframe src="http://jeromeetienne.github.com/threex/examples/threex.domevent"
    webkitallowfullscreen mozallowfullscreen allowfullscreen 
    width="420" height="315" frameborder="0" style="float: right; margin-left: 1em;">
</iframe>


<p>Let's say we want do to an action when the user is clicking on a object.
We just do the following.</p>

<p>```javascript</p>

<pre><code>mesh.on('click', function(){
    mesh.scale.x *= 2;
});
</code></pre>

<p>```</p>

<p>This short line means "<em>if the user click on this mesh, make it twice wider</em>".
Eloquent meaning, short syntax ... pretty sweet in my book.
If you wish to stop listening just do as usual.</p>

<p>```javascript</p>

<pre><code>mesh.off('click', callback)
</code></pre>

<p>```</p>

<p>In fact, there is 2 naming for those functions:
one is
<a href="https://developer.mozilla.org/en/DOM/element.addEventListener">addEventListener</a>
/
<a href="https://developer.mozilla.org/en/DOM/element.removeEventListener">removeEventListener</a>
from
<a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/semantics.html">HTMLElement</a>
The other is copied on
<a href="http://jquery.com/">jQuery</a> api:
<a href="http://api.jquery.com/on/">on</a>
/
<a href="http://api.jquery.com/off/">off</a>
Pick the one you like. They are doing the same thing.</p>

<p>Always in a effort to stay close to usual pratices, the events name are the same as in DOM.
The semantic is the same too.
Currently, the available events are
<a href="http://www.quirksmode.org/dom/events/click.html">click, dblclick, mouseup, mousedown</a>,
<a href="http://www.quirksmode.org/dom/events/mouseover.html">mouseover and mouse out</a>.</p>

<h2>Some Internals</h2>

<p><a href="https://github.com/mrdoob/three.js/">three.js</a>
already has the ability to interact with the mouse.
You can see it in action
<a href="http://mrdoob.github.com/three.js/examples/webgl_interactive_cubes.html">here</a>
and
<a href="http://mrdoob.github.com/three.js/examples/webgl_interactive_voxelpainter.html">here</a>.
Internally they use 2 three.js classes:
<a href="https://github.com/mrdoob/three.js/blob/master/src/core/Projector.js">THREE.Projector</a>
and
<a href="https://github.com/mrdoob/three.js/blob/master/src/core/Ray.js">THREE.Ray</a>.
<a href="https://github.com/jeromeetienne/threex/blob/master/threex.domevent.js">threex.domevent.js</a>
is an higher level api on top of those functions,
an interface which mimic dom events,
something closer to the usual web developper.</p>

<p>It is a nice api. clean, short, object oriented and feels familiar to web developpers.
A little hichup tho, it modifies THREE.Object3D class.
It is a global class, so it may be legitimatly considered unclean by some people.
If this bother you, simply do <code>THREEx.DomEvent.noConflict()</code> and use the
standalone API. It is documented in the
<a href="http://jeromeetienne.github.com/threex/docs/threex.domevent.html">annoted source</a>.
In fact, the object oriented API is just a thin wrapper
on top of the standalone API.</p>

<h2>Conclusion</h2>

<p>We all know the click event when the user click on a webpage.
This experiment wishes to provide to web developpers the same experience in 3D.
I hope people will do crazy innovations by using 3D in user interfaces.
This is a first version. Maybe we will implement
<a href="http://www.quirksmode.org/js/events_order.html">bubbling</a>
in the future, even events like
<a href="http://www.quirksmode.org/dom/events/change.html">'change'</a>.</p>

<p>As usual, <a href="https://github.com/jeromeetienne/threex/blob/master/threex.domevent.js">threex.domevent.js</a>
source is available on
<a href="https://github.com/jeromeetienne/threex/blob/master/threex.domevent.js">github</a>.
There is an
<a href="http://jeromeetienne.github.com/threex/docs/threex.domevent.html">annoted source</a>
for implementation details.
That's all folks. Have fun.</p>
]]></content>
  </entry>
  
</feed>
